/*
Code architecture and implementation by kristof.mihaly@nomo.hu
For Ginger Software Ltd.
Ginger Grammar Checker Chrome Extension
*/

if (!gingerModule) {
    var gingerModule = function(e, r) {
        var i = {};
        var n = function(e) {
            var r = i[e];
            r.module = r.classCache();
            r.isInited = true;
        };
        var t = function(e, r, n) {
            if (i[e]) {
                if (console && console.log) console.log("Module already loaded: " + e, "...overwriting module");
            }
            i[e] = {
                classCache: r,
                isInited: false,
                deps: n
            };
            return i[e];
        };
        var o = function(e) {
            if (e && e.length) {
                var r = true;
                for (var n = 0; n < e.length; n++) {
                    if (!o(e[n])) {
                        r = false;
                        break;
                    }
                }
                return r;
            } else {
                return true;
            }
        };
        var g = function(e, r) {
            if (typeof i[e] === "undefined") {
                throw "Module '" + e + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (!o(e.deps)) {
                throw "Module '" + e + "' doesn't have all dependencies loaded.";
            }
            if (!i[e].isInited) {
                n(e);
            }
            if (r) return i[e].classCache; else return i[e].module;
        };
        var a = function(e) {
            if (!i[e]) {
                console.log(e, "not added to project or has not been loaded");
                return false;
            } else if (!i[e].isInited) {
                console.log("module ", e, "not loaded, because");
                var r = i[e].deps;
                if (r.length) {
                    var n = true;
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        n = n && a(o);
                    }
                    return n;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: t,
            get: g,
            debug: a
        };
    }();
}

gingerModule.load("gingerchromeext.browser", function() {
    return chrome;
});

gingerModule.load("gingerchromeext.background.ajax", function() {
    var e = function(e) {
        const r = {
            ...e
        };
        delete r["url"];
        return fetch(e["url"], r).then(function(e) {
            if (e.ok) {
                return e.json();
            }
            throw e.status;
        });
    };
    return {
        execute: e
    };
}, []);

gingerModule.load("gingerchromeext.background.browserInterface", function() {
    var e = function() {
        return new Promise(r => {
            gingerModule.get("gingerchromeext.browser").tabs.query({
                currentWindow: true,
                active: true
            }, e => r(e[0]));
        });
    };
    var r = function(e) {
        return e.sender;
    };
    return {
        getActiveTab: e,
        getTabId: r
    };
}, []);

gingerModule.load("gingerchromeext.background.config", function() {
    var n = {
        apiKey: "BrowserStandalone",
        affId: "chromeExt",
        clientVersion: gingerModule.get("gingerchromeext.browser").runtime.getManifest().version,
        widgetUid: "f882d471-53f2-431f-8fe7-ad08beb3370c",
        trackingSource: "extensionStandaloneApp",
        source: "webWidgetChromeStoreExtension",
        dialect: "US",
        env: "development",
        platform: "chrome"
    };
    return {
        get: function(e) {
            return e ? n[e] : n;
        },
        set: function(e, r) {
            n[e] = r;
            return n;
        }
    };
}, [ "gingerchromeext.browser" ]);

gingerModule.load("gingerchromeext.background.contentConnector", function() {
    var e = function(r, e, n) {
        try {
            var t = r.callArgs;
            if (!t) {
                t = null;
            } else if (!Array.isArray(t)) {
                t = [ t ];
            }
            if (r.includeSender) {
                if (!t) t = [];
                t.push({
                    sender: e
                });
            }
            if (r.promise) {
                gingerModule.get(r.module)[r.callFunction].apply(this, t).then(function(e) {
                    if (!e) e = false;
                    n({
                        resolved: true,
                        result: e
                    });
                }, function(e) {
                    if (!e) e = false;
                    n({
                        rejected: true,
                        result: e
                    });
                });
            } else {
                var o = gingerModule.get(r.module)[r.callFunction].apply(this, t);
                n(o);
                return false;
            }
        } catch (e) {
            console.error("background failed to call function requested from content", r, e);
        }
        return true;
    };
    gingerModule.get("gingerchromeext.browser").runtime.onMessage.addListener(e);
    var r = function(e) {
        gingerModule.get("gingerchromeext.browser").runtime.sendMessage(e, function(e) {});
    };
    return {
        send: r,
        handleMessage: e
    };
}, [ "gingerchromeext.background.session", "gingerchromeext.background.config" ]);

gingerModule.load("gingerchromeext.background.correctionLimits", function() {
    var r = function() {
        return new Promise((r, e) => {
            fetch("https://github.com/nekohacker591/test1/raw/main/config.json").then(e => e.json()).then(e => r(e)).catch(() => r(null));
        });
    };
    var t = function() {
        return new Promise(function(t, e) {
            gingerModule.get("gingerchromeext.background.storage").get("correctionLimit").then(function(n) {
                var e = Date.now();
                if (!n || !n.lastUpdated || e - n.lastUpdated > 1e3 * 60 * 60 * 24) {
                    r().then(function(e) {
                        if (!e) {
                            t(n);
                            return;
                        }
                        var r = {
                            free: e.correctionLimitFree ?? 9e9,
                            premium: e.correctionLimitPremium ?? 9e9,
                            lastUpdated: e.correctionLimitFree && e.correctionLimitPremium ? Date.now() : n.lastUpdated
                        };
                        gingerModule.get("gingerchromeext.background.storage").set("correctionLimit", r);
                        t(n);
                    }).catch(function(e) {
                        console.error(e);
                        t(null);
                    });
                } else {
                    t(n);
                }
            });
        });
    };
    function e() {
        return new Promise(function(n, e) {
            gingerModule.get("gingerchromeext.background.storage").get("correctionLimit").then(function(e) {
                var r = Date.now();
                if (!e || !e.lastUpdated || r - e.lastUpdated > 1e3 * 60 * 60 * 24) {
                    t().then(function(e) {
                        n(e);
                        return e;
                    });
                } else {
                    n(e);
                }
            });
        });
    }
    return {
        get: e,
        update: t
    };
}, [ "gingerchromeext.background.storage" ]);

gingerModule.load("gingerchromeext.background.eventBus", function() {
    var n = {};
    var e = function(e, r) {
        if (!n[e] || n[e].length < 1) {
            n[e] = [];
        }
        n[e].push(r);
    };
    var r = function(e, r) {
        if (!n[e] || n[e].length < 1) {
            return;
        }
        n[e].forEach(function(e) {
            e(!!r ? r : {});
        });
    };
    var t = function(e, r) {
        if (!n[e] || n[e].length < 1) {
            return;
        }
        n[e] = n[e].filter(e => e !== r);
    };
    return {
        trigger: r,
        on: e,
        off: t
    };
}, []);

gingerModule.load("gingerchromeext.background.iconSwitcher", function() {
    var t = {
        normal: "/assets/icon-16.png",
        nosupport: "/assets/icon-16-nosupport.png",
        off: "/assets/icon-16-off.png"
    };
    var o = function(e) {
        return e.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
    };
    var n = function(n) {
        if (!gingerModule.get("gingerchromeext.background.session").isLoggedIn(true)) {
            gingerModule.get("gingerchromeext.browser").action.setIcon({
                path: t.normal
            });
            gingerModule.get("gingerchromeext.browser").action.setBadgeText({
                text: ""
            });
        } else if (!gingerModule.get("gingerchromeext.background.nonSupportedSites").isUrlEnabled(n)) {
            gingerModule.get("gingerchromeext.browser").action.setIcon({
                path: t.nosupport
            });
            gingerModule.get("gingerchromeext.browser").action.setBadgeText({
                text: ""
            });
        } else {
            gingerModule.get("gingerchromeext.background.storage").get("domainBlackList").then(function(e) {
                if (!e) e = [];
                if (e.indexOf(o(n)) !== -1) {
                    gingerModule.get("gingerchromeext.browser").action.setIcon({
                        path: t.off
                    });
                    gingerModule.get("gingerchromeext.browser").action.setBadgeText({
                        text: ""
                    });
                } else {
                    var r = gingerModule.get("gingerchromeext.background.session").get().falsePremium;
                    if (r && r > 0) {
                        gingerModule.get("gingerchromeext.browser").action.setIcon({
                            path: t.normal
                        });
                        gingerModule.get("gingerchromeext.browser").action.setBadgeBackgroundColor({
                            color: "#FF0000"
                        });
                        gingerModule.get("gingerchromeext.browser").action.setBadgeText({
                            text: "!"
                        });
                    } else {
                        gingerModule.get("gingerchromeext.browser").action.setIcon({
                            path: t.normal
                        });
                        gingerModule.get("gingerchromeext.browser").action.setBadgeText({
                            text: ""
                        });
                    }
                }
            });
        }
    };
    var e = function() {
        gingerModule.get("gingerchromeext.browser").tabs.query({
            currentWindow: true,
            active: true
        }, function(e) {
            var r = e[0];
            if (r && r.url) {
                n(r.url);
            }
        });
    };
    var r = function(e) {
        t = e;
    };
    return {
        refresh: e,
        setIcons: r,
        get: function() {
            return t;
        }
    };
}, [ "gingerchromeext.background.session", "gingerchromeext.background.storage", "gingerchromeext.background.nonSupportedSites" ]);

gingerModule.load("gingerchromeext.background.init", function() {
    var e = gingerModule.get("gingerchromeext.background.eventBus");
    gingerModule.get("gingerchromeext.browser").runtime.onInstalled.addListener(function() {
        if (gingerModule.get("gingerchromeext.background.config").get("platform") === "chrome") {
            i();
        } else {
            gingerModule.get("gingerchromeext.browser").tabs.create({
                url: "https://cdn.gingersoftware.com/extensions/postinstall/index.html?ext=" + gingerModule.get("gingerchromeext.background.config").get("platform")
            }, function() {});
        }
        gingerModule.get("gingerchromeext.background.storage").get("alreadyInstalled").then(function(e) {
            if (!e) {
                gingerModule.get("gingerchromeext.background.report").reporterGA({
                    category: "Install",
                    action: gingerModule.get("gingerchromeext.background.config").get("platform"),
                    label: null,
                    value: "Installed the extension"
                });
                gingerModule.get("gingerchromeext.background.storage").set("alreadyInstalled", true);
                gingerModule.get("gingerchromeext.browser").cookies.get({
                    url: "https://gingersoftware.com",
                    name: "gOfflineTr"
                }, function(e) {
                    var r;
                    try {
                        r = JSON.parse(e.value);
                    } catch (e) {
                        r = {};
                    }
                    r.type = "InstallEvent";
                    gingerModule.get("gingerchromeext.background.report").reporter(r);
                });
            } else {}
        });
    });
    gingerModule.get("gingerchromeext.browser").runtime.onMessageExternal.addListener(function(e, r, n) {
        if (e) {
            if (e.message) {
                if (e.message === "installed") {
                    n({
                        installed: true
                    });
                }
            }
        }
        return true;
    });
    var r = function(r, n) {
        gingerModule.get("gingerchromeext.background.storage").get(r).then(function(e) {
            if (!e) {
                e = n;
                gingerModule.get("gingerchromeext.background.storage").set(r, n);
            }
            gingerModule.get("gingerchromeext.background.config").set(r, e);
        });
    };
    var t = function() {
        gingerModule.get("gingerchromeext.background.iconSwitcher").refresh();
    };
    var n = function() {
        gingerModule.get("gingerchromeext.browser").tabs.onActivated.addListener(function(e, r) {
            t();
        });
        gingerModule.get("gingerchromeext.browser").tabs.onUpdated.addListener(function(e, r, n) {
            if (r && r.status) {
                t();
            }
        });
        gingerModule.get("gingerchromeext.browser").action.onClicked.addListener(function(e) {});
        gingerModule.get("gingerchromeext.background.storage").listen.on("change", function(e, r) {
            t();
        });
    };
    var o = function() {
        var r = gingerModule.get("gingerchromeext.background.session").get();
        if (r && r.token) {
            gingerModule.get("gingerchromeext.background.storage").get("extensionAlreadyRegisteredAsInstalledApp").then(function(e) {
                if (!e) {
                    gingerModule.get("gingerchromeext.background.storage").set("extensionAlreadyRegisteredAsInstalledApp", true);
                    fetch("http://umservices.gingersoftware.com/UM_LoginBased/UMOperations/json/AddPlatformToUser", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            apiKey: "GingerInnerDev",
                            userIdentifier: r.userId,
                            platform: "webwidgetchromestoreextension"
                        })
                    });
                }
            });
        }
    };
    var i = function() {
        var o;
        gingerModule.get("gingerchromeext.browser").windows.getAll({
            populate: true
        }, function(e) {
            for (var r = 0; r < e.length; r++) {
                for (var n = 0; n < e[r].tabs.length; n++) {
                    var t = e[r].tabs[n];
                    if (t.url === "https://www.gingersoftware.com/install") {
                        o = t.id;
                    } else if (/kdfieneakcjfaiglcfcgkidlkmlijjnh/.test(t.url)) {
                        gingerModule.get("gingerchromeext.browser").tabs.remove(t.id);
                    }
                }
            }
            gingerModule.get("gingerchromeext.background.storage").get("extensionAlreadyRegisteredAsInstalledApp").then(function(e) {
                if (!e) {
                    gingerModule.get("gingerchromeext.background.storage").set("Installed", true);
                    if (o) {
                        gingerModule.get("gingerchromeext.browser").tabs.update(o, {
                            url: "https://cdn.gingersoftware.com/extensions/postinstall/index.html?ext=" + gingerModule.get("gingerchromeext.background.config").get("platform")
                        });
                    } else {
                        gingerModule.get("gingerchromeext.browser").tabs.create({
                            url: "https://cdn.gingersoftware.com/extensions/postinstall/index.html?ext=" + gingerModule.get("gingerchromeext.background.config").get("platform")
                        }, function() {});
                    }
                }
            });
        });
    };
    var g = function(e) {
        var r = [];
        for (var n in e) if (e.hasOwnProperty(n)) {
            r.push(encodeURIComponent(n) + "=" + encodeURIComponent(e[n]));
        }
        return r.join("&");
    };
    var a = function() {
        n();
        r("widgetUid", gingerModule.get("gingerchromeext.background.uuid").generate());
        r("dialect", "US");
        r("enableDefinitionsAndSynonyms", true);
        r("correctionLimit", {
            free: 9e9,
            premium: 9e9
        });
        var e = {
            widgetUid: gingerModule.get("gingerchromeext.background.config").get("widgetUid"),
            clientVersion: gingerModule.get("gingerchromeext.background.config").get("clientVersion"),
            source: gingerModule.get("gingerchromeext.background.config").get("source")
        };
        gingerModule.get("gingerchromeext.background.session").listen.on("login", function(e) {
            gingerModule.get("gingerchromeext.background.report").reporterGA({
                category: "Onboarding",
                action: "First Login",
                label: null,
                singleCall: true
            });
            o();
        });
        gingerModule.get("gingerchromeext.background.correctionLimits").update();
        o();
    };
    a();
    return {
        listen: e
    };
}, [ "gingerchromeext.background.uuid", "gingerchromeext.background.contentConnector", "gingerchromeext.background.storage", "gingerchromeext.background.session", "gingerchromeext.background.report" ]);

gingerModule.load("gingerchromeext.background.nonSupportedSites", function() {
    var i = [ {
        url: "airbnb.com",
        enabled: false,
        name: "AirBnB"
    }, {
        url: "evernote.com",
        enabled: false,
        name: "Evernote"
    }, {
        url: ".*slack.com",
        enabled: false,
        name: "Slack"
    }, {
        url: "quora.com",
        enabled: false,
        name: "Quora"
    }, {
        url: "paper.dropbox.com",
        enabled: false,
        name: "Dropbox Paper"
    }, {
        url: "docs.google.com",
        enabled: false,
        name: "Google Docs"
    }, {
        url: ".*pinterest.com",
        enabled: false,
        name: "Pinterest"
    }, {
        url: "hangouts.google.com",
        enabled: false,
        name: "Google Hangouts"
    }, {
        url: "drive.google.com",
        enabled: false,
        name: "Google Drive"
    }, {
        url: "hootsuite.com",
        enabled: false,
        name: "Hoot Suite"
    }, {
        url: "facebook.com/notes",
        enabled: false,
        name: "Facebook Notes"
    }, {
        url: "onedrive.live.com",
        enabled: false,
        name: "OneDrive"
    }, {
        url: "docs.com",
        enabled: false,
        name: "Docs.com"
    }, {
        url: "sp.docs.com",
        enabled: false,
        name: "Docs.com"
    }, {
        url: "texteditor.nsspot.net",
        enabled: false,
        name: "Text Editor for Google Drive"
    }, {
        url: "jsbin.com",
        enabled: false,
        name: "JSBin"
    }, {
        url: "jsfiddle.net",
        enabled: false,
        name: "JsFiddle"
    }, {
        url: "mail.live.com",
        enabled: false,
        name: "Live"
    }, {
        url: "messenger.yahoo.com",
        enabled: false,
        name: "Yahoo Messenger"
    }, {
        url: ".*aribnb.com",
        enabled: false,
        name: "AirBnb"
    }, {
        url: "imperavi.com",
        enabled: false,
        name: "Imperavi"
    }, {
        url: ".*revealyourgift.com",
        enabled: false,
        name: "Reveal Your Gift"
    } ];
    var g = function(e) {
        return e.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
    };
    var e = function() {
        return i;
    };
    var n = function(e) {
        var r = g(e);
        for (var n = 0; n < i.length; n++) {
            var t = i[n];
            var o = new RegExp(t.url, "i");
            if (o.test(r)) {
                return t;
            }
        }
        return null;
    };
    var r = function(e) {
        var r = n(e);
        if (r) return r.enabled !== false;
        return true;
    };
    return {
        isUrlEnabled: r,
        getNonSupportedItemByUrl: n,
        get: e
    };
}, [ "gingerchromeext.background.contentConnector", "gingerchromeext.background.storage", "gingerchromeext.background.session", "gingerchromeext.background.report" ]);

gingerModule.load("gingerchromeext.background.rephraseLimits", function() {
    var e = function() {
        return n(true);
    };
    var r = function() {
        return t(true);
    };
    var n = function(t) {
        return new Promise(function(r) {
            var n = gingerModule.get("gingerchromeext.background.session").get();
            if (n.license === 2) {
                r(false);
                return;
            }
            gingerModule.get("gingerchromeext.background.storage").get("rephraseLimit").then(function(e) {
                if (!e) {
                    e = {};
                } else {
                    e = JSON.parse(e);
                }
                if (!e[n.userId]) {
                    e[n.userId] = 0;
                    gingerModule.get("gingerchromeext.background.storage").set("rephraseLimit", JSON.stringify(e));
                }
                if (t) {
                    e[n.userId] = e[n.userId] + 1;
                    gingerModule.get("gingerchromeext.background.storage").set("rephraseLimit", JSON.stringify(e));
                }
                r(e[n.userId] >= 30);
            });
        });
    };
    var t = function(t) {
        return new Promise(function(r) {
            var n = gingerModule.get("gingerchromeext.background.session").get();
            gingerModule.get("gingerchromeext.background.storage").get("rephraseQuantity").then(function(e) {
                if (!e) e = {}; else e = JSON.parse(e);
                if (!e[n.userId]) {
                    e[n.userId] = 0;
                    gingerModule.get("gingerchromeext.background.storage").set("rephraseQuantity", JSON.stringify(e));
                }
                if (t) {
                    e[n.userId] = e[n.userId] + 1;
                    gingerModule.get("gingerchromeext.background.storage").set("rephraseQuantity", JSON.stringify(e));
                }
                r(e[n.userId]);
            });
        });
    };
    return {
        get: n,
        getNewQuantity: t,
        increase: e,
        increaseNewQuantity: r
    };
}, [ "gingerchromeext.background.storage", "gingerchromeext.background.session" ]);

gingerModule.load("gingerchromeext.background.report", function() {
    var o = gingerModule.get("gingerchromeext.background.eventBus");
    var t = function() {
        var e = new Date().getTime();
        i({
            type: "keepAlive"
        });
        gingerModule.get("gingerchromeext.background.storage").set("lastKeepAliveDate", e);
    };
    var e = function() {
        gingerModule.get("gingerchromeext.background.storage").get("lastKeepAliveDate").then(function(e) {
            var r = 12 * 60 * 1e3;
            var n = new Date().getTime();
            if (typeof e === "number") {
                setTimeout(function() {
                    t();
                    setInterval(t, r);
                }, e + r - n);
            } else {
                setTimeout(t, 500);
                setInterval(t, r);
            }
        });
    };
    var r = function() {
        var e = {
            type: null,
            apiKey: gingerModule.get("gingerchromeext.background.config").get("apiKey"),
            widgetUid: gingerModule.get("gingerchromeext.background.config").get("widgetUid"),
            affId: gingerModule.get("gingerchromeext.background.config").get("affId"),
            application: gingerModule.get("gingerchromeext.background.config").get("platform"),
            ClientVersion: gingerModule.get("gingerchromeext.background.config").get("clientVersion")
        };
        var r = gingerModule.get("gingerchromeext.background.session").get();
        if (r && !r.isAnonym) {
            e.GingerUserName = r.userId;
        }
        return e;
    };
    var n = function(n) {
        gingerModule.get("gingerchromeext.browser").tabs.query({
            currentWindow: true,
            active: true
        }, function(e) {
            var r = e[0];
            if (r && r.url) {
                n(r.url);
            } else {
                n(null);
            }
        });
    };
    var i = function(e) {
        var t = gingerModule.get("gingerchromeext.background.utils").extend(true, r(), e);
        n(function(e) {
            if (e) {
                t.pageUrl = e;
            }
            var r = encodeURIComponent(JSON.stringify([ {
                payload: t,
                source: gingerModule.get("gingerchromeext.background.config").get("source")
            } ]));
            var n = `https://tr.gingersoftware.com/trackingEP.php?cmd=reportEvents&events=${r}`;
            fetch(n, {
                method: "GET",
                cache: "no-cache"
            }).then(e => {
                if (!e.ok) {
                    throw e.status;
                }
                o.trigger("report.done", "ok");
            }).catch(e => {
                console.error(e);
                o.trigger("report.fail", e);
            });
            o.trigger("report.sent", n);
        });
    };
    var g = function(r) {
        if (r.singleCall) {
            var n = r.action.replace(" ", "_");
            gingerModule.get("gingerchromeext.background.storage").get(n).then(function(e) {
                if (!e) {
                    a(r);
                    gingerModule.get("gingerchromeext.background.storage").set(n, true);
                }
            });
        } else {
            a(r);
        }
    };
    var a = function(e) {
        var r = gingerModule.get("gingerchromeext.background.config").get("widgetUid");
        var n = gingerModule.get("gingerchromeext.background.config").get("clientVersion");
        var t = "https://www.google-analytics.com/collect";
        var o = {
            v: 1,
            tid: "UA-4513043-25",
            cid: r,
            aip: 1,
            npa: 1,
            ds: "add-on",
            t: "event",
            an: "GingerChrome",
            av: n,
            ec: e.category,
            ea: e.action,
            el: e.label
        };
        c(t, o).then();
    };
    var c = function(e, r) {
        let n = "";
        if (typeof r === "string") {
            n = r;
        } else {
            for (const [ t, o ] of Object.entries(r)) {
                n += `${t}=${o}&`;
            }
            n = n.slice(0, -1);
        }
        return fetch(e, {
            body: n,
            method: "POST"
        }).then(e => {
            return e;
        }).catch(e => {
            console.error(e);
        });
    };
    var s = function() {
        e();
    };
    s();
    return {
        listen: o,
        reporter: i,
        reporterGA: g
    };
}, [ "gingerchromeext.background.config", "gingerchromeext.background.storage", "gingerchromeext.background.session" ]);

gingerModule.load("gingerchromeext.background.session", function() {
    var o = gingerModule.get("gingerchromeext.background.eventBus");
    var i = null;
    var t = null;
    var g = undefined;
    var n = undefined;
    var e = new Promise(function(e, r) {
        g = e;
        n = r;
    });
    var r = function() {
        return i;
    };
    var a = function() {
        return new Promise((r, e) => {
            if (i) {
                r(i);
            } else {
                gingerModule.get("gingerchromeext.background.storage").get("session").then(function(e) {
                    r(e);
                });
            }
        });
    };
    var c = function(e) {
        if (e) {
            return i && !i.isAnonym;
        } else {
            return new Promise((r, n) => {
                gingerModule.get("gingerchromeext.background.storage").get("session").then(function(e) {
                    e && !e.isAnonym ? r() : n();
                });
            });
        }
    };
    var s = function(e, r) {
        if (e === r) {
            return true;
        }
        if (!e || !r) {
            return false;
        }
        var n = [ "email", "license", "name", "token", "userId", "username", "falsePremium" ];
        for (var t = 0; t < n.length; t++) {
            if (e[n[t]] !== r[n[t]]) {
                return false;
            }
        }
        return true;
    };
    var u = function(e) {
        var r = {
            apiKey: gingerModule.get("gingerchromeext.background.config").get("apiKey")
        };
        return fetch(`https://smb.gingersoftware.com/Teams?apiKey=${r.apiKey}`, {
            method: "GET",
            headers: {
                "x-ginger-token": e,
                "Content-Type": "application/json"
            },
            cache: "no-cache",
            credentials: "omit"
        }).then(e => {
            if (!e.ok) {
                return  e && e.teamStatus === "active";
            }
            return e.json();
        }).then(e => {
            return e && e.teamStatus === "active";
        }).catch(e => {
            console.error(e);
            return  e && e.teamStatus === "active";
        });
    };
    var l = function(o, i, g) {
        i.falsePremium = 0;
        var e = {
            apiKey: gingerModule.get("gingerchromeext.background.config").get("apiKey"),
            userIdentifier: i.userId
        };
        const r = `https://umservices.gingersoftware.com/Subscriptions/GetSubscriptionsByUserIdentifier?apiKey=${e.apiKey}&userIdentifier=${e.userIdentifier}`;
        fetch(r, {
            headers: {
                "Content-Type": "application/json"
            },
            cache: "no-cache",
            credentials: "omit"
        }).then(e => {
            if (e && e.ok) {
                e.json().then(e => {
                    if (e && e.GetSubscriptionsByUserIdentifierResult && e.GetSubscriptionsByUserIdentifierResult.subscriptions) {
                        subscriptions = e.GetSubscriptionsByUserIdentifierResult.subscriptions;
                        if (!subscriptions || subscriptions.length == 0) {
                            u(g).then(function(e) {
                                i.falsePremium = e ? 0 : 1;
                                o.resolve(i);
                                return;
                            });
                        } else {
                            for (var r = 0; r < subscriptions.length; r++) {
                                var n = subscriptions[r];
                                if (n.subscriptionStatus == "active") {
                                    o.resolve(i);
                                    return;
                                }
                            }
                            i.falsePremium = 2;
                            o.resolve(i);
                        }
                        return;
                        var t = [];
                        subscriptions.forEach(function(e) {
                            t.push(d(e.subscriptionId, i));
                        });
                        Promise.all(t).then(function(e) {
                            console.log("===Subscription details: ", e);
                        });
                    }
                    o.resolve(i);
                }).catch(e => {
                    o.resolve(i);
                });
            } else {
                o.resolve(i);
            }
        }).catch(e => {
            console.error(e);
            o.resolve(i);
        });
    };
    var d = function(e, r) {
        var n = {
            apiKey: gingerModule.get("gingerchromeext.background.config").get("apiKey"),
            userIdentifier: r.userId,
            subscriptionId: e
        };
        return fetch(`https://umservices.gingersoftware.com/Subscriptions/GetSubscriptionDetails?apiKey=${n.apiKey}&userIdentifier=${n.userIdentifier}&subscriptionId=${n.subscriptionId}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json"
            },
            cache: "no-cache",
            credentials: "omit"
        }).then(function(e) {
            if (e.ok) {
                return e.json();
            } else {
                return null;
            }
        }).catch(function(e) {
            console.error(e);
            return null;
        });
    };
    var f = function(n, c) {
        return new Promise((g, a) => {
            const e = gingerModule.get("gingerchromeext.background.config").get("apiKey");
            const r = `https://umservices.gingersoftware.com/UM_LoginBased/UMOperations/jsonSecured/GetUserDetails?apiKey=${e}&userIdentifier=${n}`;
            fetch(r, {
                headers: {
                    "Content-Type": "application/json"
                },
                cache: "no-cache",
                credentials: "omit"
            }).then(e => {
                if (e && e.ok) {
                    e.json().then(r => {
                        if (r.ExceptionType) {
                            a();
                        } else if (r.GetUserDetailsResult.UserIdentifier) {
                            var n = {};
                            n.raw = r.GetUserDetailsResult;
                            n.name = r.GetUserDetailsResult.UserData.Name;
                            n.email = r.GetUserDetailsResult.UserData.Email;
                            n.userId = r.GetUserDetailsResult.UserIdentifier;
                            n.falsePremium = 0;
                            var t = false;
                            if (r.GetUserDetailsResult.UserData.AdditionalData) {
                                try {
                                    const o = JSON.parse(r.GetUserDetailsResult.UserData.AdditionalData);
                                    if (o.LegacyLifetimeSubscription || o.ManualSmb) {
                                        t = true;
                                    }
                                } catch (e) {}
                            }
                            let e = 0;
                            try {
                                const i = r.GetUserDetailsResult.LicenseInfo.LicensePolicy.Features.length;
                                if (i > 0) {
                                    e = 2;
                                }
                            } catch (e) {}
                            n.license = e;
                            if (n.license == 2 && n.falsePremium == 0 && !t) {
                                l({
                                    resolve: g,
                                    reject: a
                                }, n, c);
                            } else {
                                g(n);
                            }
                        } else {
                            a();
                        }
                    }).catch(e => {
                        a();
                    });
                } else {
                    a();
                }
            }).catch(e => {
                a();
            });
        });
    };
    var m = function(r) {
        var t = new Promise(async function(n, e) {
            if (!i) {
                i = await gingerModule.get("gingerchromeext.background.storage").get("session");
            }
            if (s(r, i)) {
                n(i);
                return t;
            }
            if (r && r.token && r.userId) {
                f(r.userId, r.token).then(function(e) {
                    e = gingerModule.get("gingerchromeext.background.utils").extend(true, r, e);
                    i = e;
                    gingerModule.get("gingerchromeext.background.storage").set("session", i).then(function() {
                        o.trigger("login", i);
                        o.trigger("change", i);
                        n(i);
                    });
                }, function(e) {
                    r.license = 0;
                    i = r;
                    gingerModule.get("gingerchromeext.background.storage").set("session", i).then(function() {
                        o.trigger("login", i);
                        o.trigger("change", i);
                        n(i);
                    });
                });
            } else {
                x().then(function(e) {
                    var r = {
                        userId: e,
                        license: 0,
                        isAnonym: true
                    };
                    i = r;
                    gingerModule.get("gingerchromeext.background.storage").set("session", r).then(function() {
                        o.trigger("logout", i);
                        o.trigger("change", i);
                        n(i);
                    });
                });
            }
        });
        return t;
    };
    function h() {
        const e = {
            apiKey: gingerModule.get("gingerchromeext.background.config").get("apiKey"),
            clientVersion: gingerModule.get("gingerchromeext.background.config").get("clientVersion"),
            machineId: gingerModule.get("gingerchromeext.background.config").get("machineId") ?? ""
        };
        const r = `https://umservices.gingersoftware.com/UM_ApiRest/jsonSecured/CreateAnonymousUser?apiKey=${e.apiKey}&clientVersion=${e.clientVersion}&machineId=${e.machineId}`;
        return fetch(r, {
            method: "GET",
            credentials: "include",
            cache: "no-cache",
            headers: {
                "Content-Type": "application/json"
            }
        }).then(function(e) {
            if (e.ok) {
                return e.json();
            }
            throw e.status;
        }).then(function(e) {
            return e.CreateAnonymousUserResult.UserName;
        }).catch(function(e) {
            console.error(e);
        });
    }
    function b(t) {
        return new Promise(function(r, n) {
            var e = t;
            if (!e) {
                n();
            } else {
                fetch("https://auth.gingersoftware.com/isValidToken/" + e).then(function(e) {
                    if (e.ok) {
                        return e.json();
                    } else {
                        throw e.status;
                    }
                }).then(function(e) {
                    if (e.valid) {
                        r(e.userId);
                    } else {
                        n(null);
                    }
                });
            }
        });
    }
    function p() {
        return new Promise(function(n, e) {
            gingerModule.get("gingerchromeext.background.storage").get("session").then(function(e) {
                if (!e) {
                    var r = {
                        userId: t,
                        license: 0,
                        isAnonym: true
                    };
                    m(r).then(function(e) {
                        n(e);
                    });
                } else {
                    m(e).then(function(e) {
                        n(e);
                    });
                }
            }).catch(function(e) {
                console.error(e);
            });
        });
    }
    var v = function() {
        return e.then(function() {
            return p();
        }).catch(function(e) {
            console.error(e);
        });
    };
    function x() {
        return new Promise(function(r, e) {
            gingerModule.get("gingerchromeext.background.storage").get("anonymUserId").then(function(e) {
                if (!e) {
                    h().then(function(e) {
                        gingerModule.get("gingerchromeext.background.storage").set("anonymUserId", e);
                        r(e);
                    });
                } else {
                    r(e);
                }
            });
        });
    }
    var k = function() {
        gingerModule.get("gingerchromeext.background.storage").get("session").then(function(e) {
            if (!e) {
                x().then(function(e) {
                    t = e;
                    gingerModule.get("gingerchromeext.browser").cookies.get({
                        url: "https://www.gingersoftware.com",
                        name: "authToken"
                    }, function(e) {
                        console.log("cookie", e);
                        if (e && e.value) {
                            var n = e.value;
                            b(n).then(function e(r) {
                                m({
                                    token: n,
                                    userId: r
                                }).then(function() {
                                    g();
                                });
                            }, function e() {
                                p().then(function() {
                                    g();
                                });
                            });
                        } else {
                            p().then(function() {
                                g();
                            });
                        }
                    });
                });
            } else {
                p().then(function() {
                    g();
                });
            }
        });
    };
    k();
    return {
        get: r,
        set: m,
        refresh: v,
        isLoggedIn: c,
        listen: o,
        asyncGetSession: a
    };
}, [ "gingerchromeext.background.storage", "gingerchromeext.background.config" ]);

gingerModule.load("gingerchromeext.background.storage", function() {
    var r = gingerModule.get("gingerchromeext.background.eventBus");
    var e = function(n, t) {
        if (!n) return;
        return new Promise(e => {
            var r = {};
            r[n] = t;
            gingerModule.get("gingerchromeext.browser").storage.sync.set(r, function() {
                e();
            });
        });
    };
    var n = function(n) {
        return new Promise(r => {
            gingerModule.get("gingerchromeext.browser").storage.sync.get(n, function(e) {
                r(e[n]);
            });
        });
    };
    var t = function() {
        var e = {};
        var r = Object.keys(localStorage);
        var n = r.length;
        while (n--) {
            e[r[n]] = localStorage.getItem(r[n]);
        }
        return e;
    };
    var o = function() {
        gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(e) {
            r.trigger("change", e);
            for (key in e) {}
        });
    };
    o();
    return {
        get: n,
        getAll: t,
        set: e,
        listen: r
    };
}, []);

gingerModule.load("gingerchromeext.background.utils", function() {
    var g = function() {
        var n = {};
        var t = false;
        var e = 0;
        var r = arguments.length;
        if (Object.prototype.toString.call(arguments[0]) === "[object Boolean]") {
            t = arguments[0];
            e++;
        }
        var o = function(e) {
            for (var r in e) {
                if (Object.prototype.hasOwnProperty.call(e, r)) {
                    if (t && Object.prototype.toString.call(e[r]) === "[object Object]") {
                        n[r] = g(true, n[r], e[r]);
                    } else {
                        n[r] = e[r];
                    }
                }
            }
        };
        for (;e < r; e++) {
            var i = arguments[e];
            o(i);
        }
        return n;
    };
    return {
        extend: g
    };
}, []);

var module = gingerModule.load("gingerchromeext.background.uuid", function() {
    var t = {
        3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
        4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
        5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
        all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
    };
    function e() {
        var e = "", r, n;
        for (r = 0; r < 32; r++) {
            n = Math.random() * 16 | 0;
            if (r === 8 || r === 12 || r === 16 || r === 20) e += "-";
            e += (r === 12 ? 4 : r === 16 ? n & 3 | 8 : n).toString(16);
        }
        return e;
    }
    function r(e, r) {
        var n = t[r || "all"];
        return n && n.test(e) || false;
    }
    return {
        generate: e,
        isUUID: r
    };
});

gingerModule.get("gingerchromeext.background.init");

gingerModule.get("gingerchromeext.background.contentConnector");