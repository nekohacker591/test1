/*
Code architecture and implementation by kristof.mihaly@nomo.hu
For Ginger Software Ltd.
Ginger Grammar Checker Chrome Extension
*/

var $gingerWidgetJquery = $.noConflict(true);

if (!gingerModule) {
    var gingerModule = function(e, t) {
        var o = {};
        var n = function(e) {
            var t = o[e];
            t.module = t.classCache();
            t.isInited = true;
        };
        var r = function(e, t, n) {
            if (o[e]) {
                if (console && console.log) console.log("Module already loaded: " + e, "...overwriting module");
            }
            o[e] = {
                classCache: t,
                isInited: false,
                deps: n
            };
            return o[e];
        };
        var i = function(e) {
            if (e && e.length) {
                var t = true;
                for (var n = 0; n < e.length; n++) {
                    if (!i(e[n])) {
                        t = false;
                        break;
                    }
                }
                return t;
            } else {
                return true;
            }
        };
        var g = function(e, t) {
            if (typeof o[e] === "undefined") {
                throw "Module '" + e + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (!i(e.deps)) {
                throw "Module '" + e + "' doesn't have all dependencies loaded.";
            }
            if (!o[e].isInited) {
                n(e);
            }
            if (t) return o[e].classCache; else return o[e].module;
        };
        var a = function(e) {
            if (!o[e]) {
                console.log(e, "not added to project or has not been loaded");
                return false;
            } else if (!o[e].isInited) {
                console.log("module ", e, "not loaded, because");
                var t = o[e].deps;
                if (t && t.length) {
                    var n = true;
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        n = n && a(i);
                    }
                    return n;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: r,
            get: g,
            debug: a
        };
    }();
}

(function() {
    var e = gingerModule.load("widget.ajaxQueue", function() {
        var c = $gingerWidgetJquery({});
        var e = function() {
            c.clearQueue();
        };
        $gingerWidgetJquery.ajaxQueue = function(r) {
            var i, o = $gingerWidgetJquery.Deferred(), g = o.promise();
            var e = c.queue(a);
            g.abort = function(e) {
                if (i && i.abort) {
                    return i.abort(e);
                }
                var t = c.queue(), n = $gingerWidgetJquery.inArray(a, t);
                if (n > -1) {
                    t.splice(n, 1);
                }
                o.rejectWith(r.context || r, [ g, e, "" ]);
                return g;
            };
            function a(e) {
                i = $gingerWidgetJquery.ajax(r).done(o.resolve).fail(o.reject);
            }
            return g;
        };
        return {
            flush: e
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.api", function() {
        var o = $gingerWidgetJquery({});
        var e = {};
        var g = gingerModule.get("widget.cache");
        var a = {};
        var t = null;
        var n = 600;
        var r = [];
        var i = function() {
            if (r.length) r[0]();
        };
        var c = function(t) {
            var n = $gingerWidgetJquery.Deferred();
            if (t) {
                r.push(function() {
                    var e = this;
                    $gingerWidgetJquery.ajax(t).then(function(e) {
                        r.splice(0, 1);
                        i();
                        n.resolve(e);
                    }, function(e) {
                        r.splice(0, 1);
                        i();
                        n.reject(e);
                    });
                });
            }
            if (r.length === 1) {
                i();
            }
            return n.promise();
        };
        var l = function(n, r) {
            var e = g.get("api.detectLang", n);
            if (e) {
                r(e);
            } else {
                var t = {
                    inputText: n
                };
                var i = c({
                    url: "https://async.reverso.net/WebReferences/WSAJAXInterface.asmx/DetectLanguageWS",
                    data: JSON.stringify(t),
                    method: "POST",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8"
                }).then(function e(t) {
                    g.set("api.detectLang", n, t);
                    r(t);
                }, function e() {});
            }
        };
        var s = function(t, n) {
            var e = g.get("api.wordSpell", t);
            if (e) {
                n(e);
            } else {
                m(true);
                var r = {
                    securedPage: "false",
                    authToken: gingerModule.get("widget.config").get("token"),
                    userIdentifier: gingerModule.get("widget.session").get("userId"),
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    lang: gingerModule.get("widget.config").get("dialect"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: encodeURIComponent(t),
                    isFirstInPhrase: "false"
                };
                c({
                    url: "https://servicesht.gingersoftware.com/Dictionary/jsonSecured/IsUserSpelledCorrectly",
                    data: r,
                    datatype: "jsonp",
                    jsonpCallback: "gingerModuleApi.checkWordSpell"
                }).then(function(e) {
                    m(false);
                    if (e.ExceptionType) {
                        return;
                    }
                    g.set("api.wordSpell", t, e);
                    n(e);
                }, function() {
                    m(false);
                });
            }
        };
        var d = function(e, t) {
            var i = e.text;
            var n = g.get("api.sentence", i);
            if (n) {
                if (n.response !== null) {
                    t(JSON.parse(JSON.stringify(n.response)));
                } else {
                    n.cb.push(t);
                }
            } else {
                g.set("api.sentence", i, {
                    response: null,
                    cb: [ t ]
                });
                if (e.id != null && a.sentenceId === e.id && a.abort) {
                    m(false);
                    a.abort();
                }
                var r = {
                    securedPage: "false",
                    userIdentifier: gingerModule.get("widget.session").get("userId"),
                    lang: gingerModule.get("widget.config").get("dialect"),
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: e.text,
                    isOnTheFly: "false"
                };
                m(true);
                a = c({
                    url: "https://services.gingersoftware.com/Ginger/correct/jsonSecured/GingerTheUserTextFull",
                    data: r,
                    method: "GET"
                }).then(function(e) {
                    m(false);
                    o.trigger("grammarcheck.sent");
                    if (e.ExceptionType) {
                        g.remove("api.sentence", i);
                        return;
                    }
                    var t = g.get("api.sentence", i);
                    if (t && t.cb) {
                        for (var n = 0; n < t.cb.length; n++) {
                            var r = gingerModule.get("widget.utils").clone(e);
                            if (t.cb[n]) t.cb[n](r);
                        }
                    }
                    g.set("api.sentence", i, {
                        response: e
                    });
                }, function() {
                    m(false);
                    g.remove("api.sentence", i);
                });
                a.sentenceId = e.id;
            }
        };
        var u = function(e, t) {
            var n = {
                userIdentifier: gingerModule.get("widget.session").get("userId"),
                apiKey: gingerModule.get("widget.config").get("apiKey"),
                lang: gingerModule.get("widget.config").get("dialect"),
                authToken: gingerModule.get("widget.config").get("token"),
                clientVersion: gingerModule.get("widget.config").get("version")
            };
            n = gingerModule.get("widget.utils").merge(e, n);
            c({
                url: "https://data.gingersoftware.com/clientdata/jsonSecured/UserIgnoredCorrection",
                data: n,
                datatype: "jsonp",
                jsonpCallback: "gingerModuleApi.ignoreCorrection",
                success: function(e) {
                    if (t) t(e);
                },
                error: function() {
                    console.log("error");
                }
            });
        };
        var f = 0;
        var m = function(e) {
            if (t) t = clearTimeout(t);
            if (e) {
                f++;
                if (f == 1) o.trigger("ajax.start");
            } else {
                f--;
                if (f == 0) o.trigger("ajax.end");
            }
        };
        var v = function(t, n) {
            var e = {
                userIdentifier: gingerModule.get("widget.session").get("userId"),
                apiKey: gingerModule.get("widget.config").get("apiKey"),
                lang: gingerModule.get("widget.config").get("dialect"),
                authToken: gingerModule.get("widget.config").get("token"),
                clientVersion: gingerModule.get("widget.config").get("version"),
                word: encodeURIComponent(t),
                securedPage: "false"
            };
            c({
                url: "https://services.gingersoftware.com/Ginger/correct/jsonSecured/AddToPersonalDictionary",
                data: e,
                datatype: "jsonp",
                jsonpCallback: "gingerModuleApi.addToPersonalDictionary",
                success: function(e) {
                    o.trigger("dictionary.added", t);
                    if (n) n(e);
                },
                error: function() {
                    console.log("error");
                }
            });
        };
        var h = function() {
            var e = {};
            var i = g.dump();
            var t = function(e) {
                if (!i[e]) return {};
                var t = {};
                for (var n in i[e]) {
                    var r = i[e][n];
                    if (r.response) t[n] = r;
                }
                return t;
            };
            e["api.wordSpell"] = t("api.wordSpell");
            e["api.sentence"] = t("api.sentence");
            return e;
        };
        var p = function(e) {
            for (var t in e) {
                for (var n in e[t]) {
                    g.set(t, n, e[t][n]);
                }
            }
        };
        var w = function() {};
        w();
        return {
            checkWordSpell: s,
            ignoreMistake: u,
            checkSentence: d,
            addToDictionary: v,
            dumpCorrectionCache: h,
            restoreCorrectionCache: p,
            detectLang: l,
            listen: o
        };
    }, [ "widget.utils", "widget.cache", "widget.ajaxQueue", "widget.session" ]);
})();

(function() {
    var e = gingerModule.load("widget.cache", function() {
        var r = {};
        var e = function(e, t, n) {
            if (!e) e = "default";
            if (!r[e]) r[e] = {};
            r[e][t] = n;
            return n;
        };
        var t = function(e, t) {
            if (r[e] && r[e][t]) return r[e][t]; else return null;
        };
        var n = function() {
            return r;
        };
        var i = function(e) {
            r = e;
        };
        var o = function(e, t) {
            return delete r[e][t];
        };
        var g = function() {
            r = {};
        };
        return {
            set: e,
            get: t,
            remove: o,
            flush: g,
            dump: n,
            restore: i
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.caret", function() {
        var e = function(e, t) {
            e = $gingerWidgetJquery(e).get(0);
            var n = e;
            var r = n && (n.getAttribute("contenteditable") === "" || n.getAttribute("contenteditable") === true || n.getAttribute("contenteditable") == "true");
            if (arguments.length === 1) {
                if (n) {
                    if (window.getSelection) {
                        if (r) {
                            var i = window.getSelection().getRangeAt(0), o = i.cloneRange();
                            o.selectNodeContents(n);
                            o.setEnd(i.endContainer, i.endOffset);
                            return o.toString().length;
                        }
                        return n.selectionStart;
                    }
                    if (n.selectionStart) return n.selectionStart;
                }
                return;
            }
            if (n) {
                if (t == -1) t = e[r ? "text" : "val"]().length;
                if (window.getSelection) {
                    if (r) {
                        n.focus();
                        window.getSelection().collapse(n.firstChild, t);
                    } else n.setSelectionRange(t, t);
                }
                if (!r) n.focus();
            }
        };
        return {
            get: e
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.config", function() {
        var r = $gingerWidgetJquery("<eventScope>");
        var i = {
            userId: null,
            apiKey: null,
            version: "0.0.210",
            widgetUid: null,
            charLimit: null,
            source: null,
            dialect: "US",
            platform: "chrome",
            loggedOutApprovalsLeft: 10
        };
        var e = function(e) {
            return e ? i[e] : i;
        };
        var t = function(e, t) {
            i[e] = t;
            var n = {
                changed: {}
            };
            n.changed[e] = t;
            r.trigger("change", n);
            r.trigger("change/" + e, t);
            return i;
        };
        var n = function(e) {
            i = gingerModule.get("widget.utils").merge(i, e);
        };
        return {
            listen: r,
            get: e,
            set: t,
            merge: n
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.contentManager", function() {
        var s = function(e) {
            e = e.replace(/<style([\s\S]*?)<\/style>/gi, "");
            e = e.replace(/<script([\s\S]*?)<\/script>/gi, "");
            e = e.replace(/<\/div>/gi, "\n");
            e = e.replace(/<\/li>/gi, "\n");
            e = e.replace(/<li>/gi, "  *  ");
            e = e.replace(/<\/ul>/gi, "\n");
            e = e.replace(/<\/p>/gi, "\n");
            e = e.replace(/<br\s*[\/]?>/gi, "\n");
            e = e.replace(/<[^>]+>/gi, "");
            e = $gingerWidgetJquery("<textarea />").html(e).text();
            return e;
        };
        var d = function(r) {
            r = r.replace(new RegExp("<brs*/?>", "g"), "\n");
            var e = document.createElement("div");
            e.innerHTML = r;
            var t = e.querySelectorAll('[data-block="true"]');
            if (t.length > 0) {
                r = "";
                t.forEach(function(e, t, n) {
                    r = r + e.innerText.replace(/\s+$/, "") + (t < n.length - 1 ? "\n" : "");
                });
            } else {
                r = r.replace(/<[^>]+>/gi, "");
                r = $gingerWidgetJquery("<textarea />").html(r).text();
            }
            return r;
        };
        var u = function(e, t) {
            if (!e) e = [];
            if (/textarea/i.test(t.nodeName)) {
                e.push("change");
            }
            for (var n = 0; n < e.length; n++) {
                var r = document.createEvent("CustomEvent");
                r.initCustomEvent(e[n], true, true, null);
                t.dispatchEvent(r);
            }
        };
        var e = function(e, t, n, r, i) {
            var o = gingerModule.get("widget.utils").isRichTextElement(e);
            var g = o && $gingerWidgetJquery(e).find("[data-block='true']").length > 0 || o && $gingerWidgetJquery(e).closest("[data-reactroot]").length;
            var a = gingerModule.get("widget.siteSettings").get(window.location.href, e);
            var c = e.getAttribute("ginger-widget-mode");
            if (c && c === "contenteditable") {
                g = false;
            }
            if (/<[^>]+>|&\w+;/.test(t)) {
                if (g && o) {
                    t = d(t);
                } else if (!o || g) {
                    t = s(t);
                } else {
                    e.innerHTML = t;
                    return $gingerWidgetJquery.Deferred().resolve();
                }
            }
            if (typeof n === "undefined" && typeof r === "undefined") {
                if (o && !g) {} else if (!o && !g) {
                    $gingerWidgetJquery(e).val(t);
                    u(a.postRewriteEvents, e);
                    return $gingerWidgetJquery.Deferred().resolve();
                }
            }
            var l = m(e);
            if (!n) n = 0;
            if (!r) r = l.replace(/\s+$/gm, "").length;
            return gingerModule.get(a.rewriter).rewrite(e, t, n, r, i);
        };
        var g = function(e) {
            var t = $gingerWidgetJquery("<div></div>").html(e.innerHTML).get(0);
            $gingerWidgetJquery(t).find("[data-block='true']").prepend(String.fromCharCode(31));
            value = $gingerWidgetJquery(t).text().replace(/^\x1F/, "");
            return value;
        };
        var o = function(e) {
            var t = e.innerHTML.replace(/(<[^\/][^>]*>|[\.\!\?])/g, "$1" + String.fromCharCode(28));
            e.outerHTML = "<gingerignorepart>" + t + "</gingerignorepart>";
        };
        var l = function(e) {
            var t = document.createElement("div");
            t.innerHTML = e;
            var n = location.hostname;
            if (self != top && (/localhost/.test(n) || !n) && window.parent.location) n = window.parent.location.hostname;
            if (/localhost/.test(n)) {
                var r = t.querySelectorAll(".quoted-part-of-email");
                r.forEach(function(e) {
                    o(e);
                });
            }
            if (/1und1.de|gmx.net|gmx.com|web.de/.test(n)) {
                var r = t.querySelectorAll('[name="quote"]');
                r.forEach(function(e) {
                    o(e);
                });
            }
            if (/mail.aol.com/.test(n)) {
                var r = t.querySelectorAll("div");
                if (r.length) {
                    r.forEach(function(e) {
                        if (e.previousElementSibling && "BR" === e.previousElementSibling.tagName && e.textContent && e.textContent.startsWith("-----")) {
                            o(e);
                        }
                    });
                }
            }
            if (/gmail.com|mail.google.com/.test(n)) {
                var r = t.querySelectorAll('.gmail_quote, .gmail_signature, [data-smartmail="gmail_signature"]');
                r.forEach(function(e) {
                    o(e);
                });
            }
            if (/outlook.live.com|outlook.office365.com|outlook.office.com/.test(n)) {
                var r = $gingerWidgetJquery(t.querySelectorAll('[id="divRplyFwdMsg"]')).nextAll().toArray();
                var i = t.querySelector('[id="divRplyFwdMsg"]');
                if (i) r.push(i);
                r.forEach(function(e) {
                    o(e);
                });
            }
            if (/mail.protonmail.com|old.protonmail.com/.test(n)) {
                var r = t.querySelectorAll(".protonmail_signature_block, blockquote.protonmail_quote");
                r.forEach(function(e) {
                    o(e);
                });
            }
            if (/mail.yahoo.com/.test(n)) {
                var r = t.querySelectorAll('[class*="yahoo_quoted"], [class*="signature"]');
                r.forEach(function(e) {
                    o(e);
                });
            }
            if (/mail.zoho.com|mail.zoho.eu/.test(n)) {
                var r = t.querySelectorAll('[id*="Zm-_Id_-Sgn"], [class*="zmail_extra"]');
                r.forEach(function(e) {
                    o(e);
                });
            }
            if (/icloud.com/.test(n)) {
                var r = t.querySelectorAll('blockquote[type="cite"]');
                r.forEach(function(e) {
                    o(e);
                });
            }
            return t.innerHTML.replace(/gingerignorepart/g, "!");
        };
        var a = function(e) {
            var t = e.innerHTML;
            if (!t) return "";
            function n(e, t) {
                return (t ? "(" : "(?:") + e + ")";
            }
            if (e === document.body) {
                t = t.replace(/<div class="ginger-extension-writer".*$/i, "").replace(/<div class="ginger-module-correctionBubble".*$/i, "");
            }
            var r = "br|p|div|h\\d|table|ol|ul|li|tbody|de|dt|td|th|tr|caption|textarea|button|select|pre|address|body";
            var i = "code|noscript|object|style|template|script|var|img|blockquote|svg|canvas";
            var o = "[^>]*";
            var g = "/?";
            var a = {
                compactBlockTags: {
                    pattern: new RegExp("<" + n(g, true) + n(r) + o + ">", "gi"),
                    replace: "<+>"
                },
                aggregateConsecutiveOpeningBlockTags: {
                    pattern: new RegExp("(?:<" + n(r) + o + ">)+", "gi"),
                    replace: "<ginger-block-elem>"
                },
                aggregateConsecutiveClosingBlockTags: {
                    pattern: new RegExp("(?:</" + n(r) + o + ">)+", "gi"),
                    replace: "</ginger-block-elem>"
                },
                aggregateConsecutiveOpenClosingBlockTags: {
                    pattern: new RegExp("(?:</ginger-block-elem><ginger-block-elem>)", "gi"),
                    replace: "<ginger-block-break/>"
                },
                representBlockElemDifferencesWithNewLineRepresentation: {
                    pattern: new RegExp("(?:<(ginger-block-elem|/ginger-block-elem|ginger-block-break/)>)", "gi"),
                    replace: String.fromCharCode(31)
                },
                removeTrailingAndStartingNewLines: {
                    pattern: new RegExp("(^|$)"),
                    replace: ""
                },
                ignoreTags: {
                    pattern: new RegExp("<(/?)" + n(i) + "([^>]*)>", "gi"),
                    replace: "<$1!>"
                },
                removeNewLines: {
                    pattern: /\n/gi,
                    replace: " "
                }
            };
            t = l(t);
            t = f(t, a.aggregateConsecutiveOpeningBlockTags);
            t = f(t, a.aggregateConsecutiveClosingBlockTags);
            t = f(t, a.compactBlockTags);
            t = f(t, a.aggregateConsecutiveOpenClosingBlockTags);
            t = t.replace(/<(\/?)(code|noscript|object|style|template|script|var|img|blockquote|svg|canvas)([^>]*)>/gi, "<$1!>");
            t = f(t, a.representBlockElemDifferencesWithNewLineRepresentation);
            t = t.replace(/<!>/g, String.fromCharCode(31) + String.fromCharCode(28)).replace(/<\/!>/g, String.fromCharCode(31));
            if ($gingerWidgetJquery(e).css("whiteSpace") !== "pre-wrap") {
                t = f(t, a.removeNewLines);
            }
            t = f(t, a.removeTrailingAndStartingNewLines);
            var c = document.createElement("div");
            c.innerHTML = t;
            $gingerWidgetJquery(c).find(".XjviVd").remove();
            t = c.textContent;
            return t;
        };
        var f = function(e, t) {
            return e.replace(t.pattern, t.replace);
        };
        var m = function(e) {
            var t;
            var n = gingerModule.get("widget.utils").isRichTextElement(e);
            var r = n && $gingerWidgetJquery(e).find("[data-block='true']").length > 0 || n && $gingerWidgetJquery(e).closest("[data-reactroot]").length;
            var i = e.getAttribute("ginger-widget-mode");
            if (i && i === "contenteditable") {
                r = false;
            }
            var o = n && /pluggable-input-body/.test(e.className);
            if (o) {
                t = g(e);
            } else if (n) {
                t = a(e);
            } else {
                t = $gingerWidgetJquery(e).val();
            }
            t = t.replace("^\n+", "");
            return t;
        };
        return {
            setVal: e,
            getVal: m
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.correctionBubble", function() {
        var M = $gingerWidgetJquery({});
        var e;
        var C;
        var W;
        var q;
        var $;
        var n;
        var t;
        var r;
        var J = 28;
        var T = 0;
        var S = null;
        var i = 600;
        var E = null;
        var k = {};
        var L = null;
        var A = null;
        var o = function(e, t, n) {
            if (!C || C.parent().length === 0) N();
            if ($gingerWidgetJquery(C).is(":hover") && $gingerWidgetJquery(C).is(":visible")) return;
            if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                F(true);
            } else {
                F(false);
            }
            R();
            if (S) S = clearTimeout(S);
            if (gingerModule.get("widget.session").isLoggedIn()) {
                _(false);
            } else {
                if (gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft()) {
                    _(false);
                } else {
                    _(true);
                }
            }
            var r = $gingerWidgetJquery(".gwmw-" + e.id).eq(0);
            if (!r) r = $gingerWidgetJquery("#gwmw-" + e.id);
            if (L && L.id === e.id) {
                return;
            }
            L = e;
            A = t;
            E = n;
            k = {
                sentenceId: t.id,
                correctionId: e.id,
                sentence: t,
                correction: e
            };
            $gingerWidgetJquery($).empty();
            var i = [];
            var o = e.UXFrgFrom;
            var g = e.UXFrgTo;
            var a = o;
            var c = gingerModule.get("widget.phraseService").getSentenceFragments(t, o, g);
            for (var l = 0; l < c.length; l++) {
                var s;
                if (c[l].correction) {
                    var d = c[l].correction.Suggestions.length != 0;
                    s = document.createElement("gwbm");
                    s.id = "gwbm-" + c[l].correction.id;
                    s.className = "ginger-module-correctionBubbleService-mistake-type-" + c[l].correction.Type;
                    if (d) {
                        s.appendChild(document.createTextNode(c[l].correction.Suggestions[0].Text));
                    } else {
                        s.appendChild(document.createTextNode(c[l].text));
                        s.className += " ginger-module-correctionBubbleService-mistake-nosuggestion";
                    }
                    (function(t, e) {
                        var n = document.createElement("gwbmo");
                        if (h) {
                            n.className = "ginger-module-correctionBubbleService-mistake-bubble-under";
                        }
                        var r = document.createElement("ga");
                        var i = document.createElement("ga");
                        var o = document.createElement("ga");
                        r.className = "ginger-module-correctionBubbleService-mistake-bubble-approve";
                        i.className = "ginger-module-correctionBubbleService-mistake-bubble-ignore";
                        o.className = "ginger-module-correctionBubbleService-mistake-bubble-add";
                        r.title = "Approve the Suggestion";
                        i.title = "Ignore the Suggestion";
                        o.title = "Add to Personal Dictionary";
                        r.onmousedown = function(e) {
                            M.trigger("approved.mistake", k);
                            if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                                M.trigger("limited.approve");
                            } else {
                                if (!gingerModule.get("widget.session").isLoggedIn()) {
                                    if (!gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft()) {
                                        M.trigger("unauthenticated.approve");
                                        return;
                                    }
                                }
                                I("approve", {
                                    correctionId: t.id
                                }, true);
                                $gingerWidgetJquery("#gwbm-" + t.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + t.id).text()));
                                R();
                            }
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        i.onmousedown = function(e) {
                            M.trigger("ignored.mistake", k);
                            I("ignore", {
                                correctionId: t.id
                            }, true);
                            $gingerWidgetJquery("#gwbm-" + t.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + t.id).text()));
                            R();
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        o.onmousedown = function(e) {
                            if (!gingerModule.get("widget.session").isLoggedIn()) {
                                M.trigger("unauthenticated.addToDictionary");
                            } else {
                                M.trigger("addedtodict.mistake", k);
                                I("addToDictionary", {
                                    correctionId: t.id
                                }, true);
                            }
                            R();
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        if (d) {
                            n.appendChild(r);
                        }
                        if (c[l].correction.Type == 1 && c[l].correction.Mistakes[0].CanAddToDict && !gingerModule.get("widget.config").get("disableAddToDictionary")) {
                            n.appendChild(o);
                        } else {
                            n.appendChild(i);
                        }
                        e.appendChild(n);
                    })(c[l].correction, s);
                } else {
                    s = document.createTextNode(c[l].text);
                }
                $gingerWidgetJquery($).get(0).appendChild(s);
            }
            C.css("z-index", gingerModule.get("widget.utils").findHighestZIndex(r) + 10);
            C.show();
            var u = $gingerWidgetJquery(r).offset();
            var f = $gingerWidgetJquery(window.document.body).offset();
            if (f.left) {
                u.left -= f.left;
            }
            var m = $gingerWidgetJquery(r).height();
            var v = $gingerWidgetJquery(r).width();
            C.css("padding", T);
            var h;
            var p = 22;
            var w = u.top - J;
            if (w - p < 0) {
                h = true;
                w = u.top + J;
            } else if (w - p <= $gingerWidgetJquery("html,body").scrollTop()) {
                h = true;
                w = u.top + J;
            }
            C.css("top", w);
            var b = C.offset();
            var y = C.width();
            M.trigger("show", {
                correction: L,
                sentence: A
            });
            var x = $gingerWidgetJquery(q).is(":visible") ? $gingerWidgetJquery(q).outerWidth() : $gingerWidgetJquery(W).outerWidth();
            if (b.top === w && b.left <= u.left && b.left + y >= u.left + v) {} else {
                C.css("left", u.left);
            }
            if (u.left + x > $gingerWidgetJquery(window).width()) {
                C.css("left", $gingerWidgetJquery(window).width() - x - 10);
            }
            return;
        };
        var g = function(e, t) {
            if (C) {
                if ($gingerWidgetJquery(C).is(":visible")) {
                    M.trigger("hide", {
                        correction: L,
                        sentence: A
                    });
                }
                C.hide();
            }
            L = null;
            A = null;
        };
        var R = function() {
            if (S) S = clearTimeout(S);
        };
        var a = function(e, t) {
            R();
            S = setTimeout(function() {
                c();
            }, i);
        };
        var N = function() {
            var e = document.body.hasAttribute("contenteditable") ? document.body.parentNode : document.body;
            C = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble'></gdiv>").appendTo(e);
            q = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedout'><gdiv class='ginger-module-correctionBubble-login'>Log in</gdiv><gdiv class='ginger-module-correctionBubble-body'>for free to continue using Ginger.</gdiv></gdiv>").appendTo(C);
            W = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedin'></gdiv>").appendTo(C);
            n = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-limited'>Limited mode</gdiv>").appendTo(W);
            n.on("click", function(e) {
                gingerModule.get("widget.licenseLimits").approvalsUsed(0);
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            q.on("click", function(e) {
                M.trigger("unauthenticated.approve.all");
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            $ = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-body'></gdiv>").appendTo(W);
            var t = $gingerWidgetJquery("<ga href='javascript:' class='ginger-module-correctionBubble-close' title='Ignore mistake'>&times;</ga>").appendTo(W);
            t.on("mousedown", function(e) {
                e.stopPropagation();
                e.preventDefault();
                if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    M.trigger("limited.approve");
                } else {
                    M.trigger("ignore.all", k);
                    I("ignoreAll");
                }
                return false;
            });
            $.on("mousedown", function(e) {
                e.stopImmediatePropagation();
                e.preventDefault();
                e.stopPropagation();
                if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    M.trigger("limited.approve.all");
                } else {
                    if (!gingerModule.get("widget.session").isLoggedIn()) {
                        if (!gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft()) {
                            M.trigger("unauthenticatedWithinLimit.approve.all");
                            return;
                        }
                    }
                    M.trigger("approve.all", k);
                    I("approveAll");
                    g();
                }
                return false;
            });
            if (C.closest("[contenteditable]").length) {
                C.attr("contenteditable", false);
            }
            C.hide();
            $gingerWidgetJquery(C).on("mouseleave", function e(t) {
                a();
            });
            $gingerWidgetJquery(C).on("mouseenter", function e(t) {
                setTimeout(R, 60);
            });
            F(false);
        };
        var I = function(e, t, n) {
            if (E) {
                E(e, t ? t : k);
            }
            if (!n) g();
        };
        var c = function() {
            E = null;
            g();
        };
        var _ = function(e) {
            var t = $gingerWidgetJquery(W);
            var n = $gingerWidgetJquery(q);
            if (e) {
                t.hide();
                n.show();
            } else {
                t.show();
                n.hide();
            }
        };
        var F = function(e) {
            if (e) {
                $gingerWidgetJquery(C).addClass("ginger-module-correctionBubble-limitedmode");
            } else {
                $gingerWidgetJquery(C).removeClass("ginger-module-correctionBubble-limitedmode");
            }
        };
        var l = function() {};
        return {
            show: o,
            hide: g,
            gracefulHide: a,
            listen: M,
            setLimitedVisibility: F,
            init: l
        };
    }, [ "widget.utils", "widget.inputFinder", "widget.licenseLimits", "widget.session" ]);
})();

(function() {
    var e = gingerModule.load("widget.correctionService", function(e) {
        var d = [];
        var c = function(a, c) {
            var l = a.words.length;
            var s = [];
            if (a.words.length === 0) {
                c(a);
            }
            for (var e = 0; e < a.words.length; e++) {
                if (d.indexOf(a.words[e]) === -1) (function(e) {
                    var o = a.words[e];
                    var g = gingerModule.get("widget.utils").trimAndMatch(o.text);
                    gingerModule.get("widget.api").checkWordSpell(g.text, function(e) {
                        o.correction = e.IsUserSpelledCorrectlyResult;
                        if (!o.correction.IsCorrect) {
                            var t = o.startsAt + g.pre.length - a.startsAt;
                            var n = t + g.text.length;
                            n = n - 1;
                            if (o.correction.IsCorrect !== true) {
                                var r = a.correction && a.correction.Corrections ? u(a.correction.Corrections, t, n) : null;
                                var i = {
                                    From: t,
                                    To: n,
                                    UXFrgFrom: t,
                                    UXFrgTo: n,
                                    Type: 1,
                                    Suggestions: [],
                                    Mistakes: [ {
                                        From: t,
                                        To: n,
                                        CanAddToDict: true
                                    } ],
                                    id: r ? r.id : gingerModule.get("widget.utils").generateUID()
                                };
                                s.push(i);
                            }
                        }
                        l--;
                        if (l == 0) {
                            if (!a.correction) {
                                a.correction = {
                                    checkType: "shallow"
                                };
                            }
                            a.correction.Corrections = s;
                            c(a);
                        }
                    });
                })(e);
            }
        };
        var l = function(n, r) {
            n = JSON.parse(JSON.stringify(n));
            if (n.words.length) {
                var i = n.words.length - 1;
                var e = n.words[i].text;
                var t = /[\s\n]+$/g;
                var o = e.match(t);
                if (o) {
                    n.text = n.text.replace(t, "");
                    n.words[i].text = e.replace(t, "");
                }
            }
            gingerModule.get("widget.api").checkSentence(n, function(e) {
                try {
                    n.correction = e;
                    if (o) {
                        n.words[i].text += o;
                        n.text += o;
                    }
                    for (var t = 0; t < n.correction.Corrections.length; t++) {
                        var e = n.correction.Corrections[t];
                        if (!e.id) {
                            e.id = gingerModule.get("widget.utils").generateUID();
                        }
                    }
                    r(n);
                } catch (e) {
                    if (window.Sentry) {
                        Sentry.captureException(e);
                    } else {
                        if (console && console.error) console.error(e);
                        throw new Error(e);
                    }
                    r(n);
                }
            });
        };
        var t = function(e, t, n) {
            e.ignored = true;
            if (e.Type === 1) {
                var r = t.text;
                var i = r.substring(e.From, e.To + 1);
                var o = e.Suggestions.length ? e.Suggestions[0].Text : t.text.substring(e.From, e.To + 1);
                var g = r.substring(e.UXFrgFrom, e.UXFrgTo);
                var a = e.TopLrnCatId;
                var c = gingerModule.get("widget.config").get("dialect");
                gingerModule.get("widget.api").ignoreMistake({
                    ignoredWord: i,
                    suggestedCorrection: o,
                    uxFragment: g,
                    originalSentence: r,
                    categoryId: a,
                    dictionaryLanguage: c
                }, function(e) {
                    if (n) n(e);
                });
                d.push(i);
            }
            return e;
        };
        var s = function(e) {
            if (!e.correction.Corrections || !e.correction.Corrections.lenreturngth) {
                e;
            }
            var t = false;
            var n = [];
            for (var r = 0; r < e.correction.Corrections.length; r++) {
                var i = e.correction.Corrections[r];
                if (!i.id) {
                    i.id = gingerModule.get("widget.utils").generateUID();
                }
                var o = e.text.substring(i.From, i.To + 1);
                if (i.Type === 1 && d.indexOf(o) !== -1) {
                    i.ignored = true;
                    t = true;
                }
            }
            return e;
        };
        var n = function(i, o, g) {
            if (!i) return;
            var a = i.length;
            for (var e = 0; e < i.length; e++) {
                (function(n) {
                    if (i[n].ignored || i[n].charLimited) {
                        a--;
                    } else if (i[n].text.length < 4 || i[n].text.match(/^[\s\u200b]*$/)) {
                        a--;
                    } else {
                        var e = !!i[n].activeSentence;
                        if (e) {
                            var t = false;
                            try {
                                if (!i[n].correction.Sentences[0].IsEnglish) {
                                    t = true;
                                }
                            } catch (e) {}
                            if (t) {
                                a--;
                                if (o) o(i);
                                if (a === 0 && g) {
                                    g(i);
                                }
                            } else {
                                c(i[n], function(e) {
                                    e.correction.checkType = "shallow";
                                    var t = s(e);
                                    i[n] = f(i[n], t);
                                    a--;
                                    if (o) o(i);
                                    if (a === 0 && g) {
                                        g(i);
                                    }
                                });
                            }
                        } else {
                            if (!i[n].correction || i[n].correction.checkType !== "deep") {
                                l(i[n], function(e) {
                                    e.correction.checkType = "deep";
                                    var t = s(e);
                                    i[n] = f(i[n], t);
                                    a--;
                                    if (o) o(i);
                                    if (a === 0 && g) {
                                        g(i);
                                    }
                                });
                            } else {
                                var r = s(i[n]);
                                a--;
                                if (r) {
                                    i[n] = r;
                                    if (o) o(i);
                                }
                            }
                        }
                    }
                    if (a === 0 && g) {
                        if (o) o(i);
                        g(i);
                    }
                })(e);
            }
        };
        var r = function() {
            return d;
        };
        var i = function(e) {
            d = e;
        };
        var u = function(e, t, n) {
            for (var r = 0; r < e.length; r++) {
                var i = e[r];
                if (i.From === t && i.To === n) {
                    return i;
                }
            }
            return null;
        };
        var f = function(e, t) {
            try {
                for (var n = 0; n < e.correction.Corrections.length; n++) {
                    var r = e.correction.Corrections[n];
                    var i = u(t.correction.Corrections, r.From, r.To);
                    if (i && i.Type === r.Type) {
                        i.id = r.id;
                    }
                }
            } catch (e) {
                if (false && console && console.warn) {
                    console.warn("grammar check result merge catch", e);
                }
            }
            return t;
        };
        var a = function(e, t) {
            if (!t.correction || !t.correction.Corrections.length) {
                return e;
            }
            var n = gingerModule.get("widget.utils").diffString(t.text, e.text);
            if (n.preCommon == 0 && n.postCommon == 0) {
                return e;
            }
            for (var r = 0; r < t.correction.Corrections.length; r++) {
                var i = t.correction.Corrections[r];
                if (n.to <= i.From) {
                    i.UXFrgFrom += n.diff;
                    i.UXFrgTo += n.diff;
                    i.From += n.diff;
                    i.To += n.diff;
                } else if (n.from >= i.To + 1) {} else {
                    t.correction.Corrections.splice(r, 1);
                    r--;
                }
            }
            e.correction = t.correction;
            return e;
        };
        var o = function(e, t) {
            var n = 0;
            var r = 0;
            if (!t.length || !e.length) {
                return e;
            }
            var i;
            var o;
            for (var g = 0; g < e.length && g < t.length; g++) {
                if (t[g].text === e[g].text) {
                    n = g + 1;
                    e[g].correction = t[g].correction;
                    e[g].id = t[g].id;
                    if (t[g].ignored) e[g].ignored = t[g].ignored;
                    if (e[g].ignored) delete e[g].correction;
                    t[g] = e[g];
                } else {
                    i = gingerModule.get("widget.utils").trimAndMatch(t[g].text);
                    o = gingerModule.get("widget.utils").trimAndMatch(e[g].text);
                    if (i.pre + i.text === o.pre + o.text) {
                        n = g + 1;
                        e[g].correction = t[g].correction;
                        e[g].id = t[g].id;
                        if (t[g].ignored) e[g].ignored = t[g].ignored;
                        if (e[g].charLimited) delete e[g].correction;
                        t[g] = e[g];
                    } else {
                        break;
                    }
                }
            }
            if (e.length <= n) {
                return e;
            }
            for (var g = 0; g < e.length && g < t.length; g++) {
                if (t.length - g - 1 <= n - 1) break;
                if (e.length - g - 1 <= n - 1) break;
                if (t[t.length - g - 1].text === e[e.length - g - 1].text) {
                    r = g + 1;
                    e[e.length - g - 1].correction = t[t.length - g - 1].correction;
                    e[e.length - g - 1].id = t[t.length - g - 1].id;
                    if (t[t.length - g - 1].ignored) e[e.length - g - 1].ignored = t[t.length - g - 1].ignored;
                    if (e[e.length - g - 1].charLimited) delete e[e.length - g - 1].correction;
                } else {
                    i = gingerModule.get("widget.utils").trimAndMatch(t[t.length - g - 1].text);
                    o = gingerModule.get("widget.utils").trimAndMatch(e[e.length - g - 1].text);
                    if (i.pre + i.text === o.pre + o.text) {
                        r = g + 1;
                        e[e.length - g - 1].correction = t[t.length - g - 1].correction;
                        e[e.length - g - 1].id = t[t.length - g - 1].id;
                        if (t[e.length - g - 1].ignored) e[e.length - g - 1].ignored = t[t.length - g - 1].ignored;
                        if (e[e.length - g - 1].charLimited) delete e[e.length - g - 1].correction;
                    } else {
                        break;
                    }
                }
            }
            for (var g = r; g < e.length - n && g < t.length - n; g++) {
                if (t.length - g - 1 < n) {
                    e[e.length - g - 1].id = gingerModule.get("widget.utils").generateUID();
                } else if (e.length - g - 1 < n) {} else {
                    if (e[e.length - g - 1].charLimited) {} else if (t[t.length - g - 1].correction && t[t.length - g - 1].correction.Sentences && !t[t.length - g - 1].correction.Sentences[0].IsEnglish) {
                        e[e.length - g - 1].correction = t[t.length - g - 1].correction;
                        if (t[t.length - g - 1].correction) e[e.length - g - 1].correction.checkType = "shallow";
                    } else if (t[t.length - g - 1].correction && t[t.length - g - 1].correction.Corrections.length) {
                        e[e.length - g - 1] = a(e[e.length - g - 1], t[t.length - g - 1]);
                        if (e[e.length - g - 1].correction) e[e.length - g - 1].correction.checkType = "shallow";
                    } else {}
                }
            }
            return e;
        };
        var g = function() {
            d = [];
        };
        return {
            correct: n,
            flush: g,
            correctSpellingOfSentence: c,
            mergeSentenceCorrections: a,
            mergeCorrections: o,
            ignoreMistake: t,
            getIgnoredWords: r,
            setIgnoredWords: i
        };
    }, [ "widget.phraseService", "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.ghostModifiers", function() {
        var r = function(e) {
            if (!window.location) return null;
            var t = window.location.hostname.split(":")[0];
            return t.indexOf(e) != -1;
        };
        var i = {};
        i.faceBook = {
            domain: "facebook.com",
            modifier: function(e, t) {
                var n = $gingerWidgetJquery(e).closest("._2ihx._i-o").length;
                if (n) {
                    $gingerWidgetJquery(e).css("textAlign", "center");
                }
            }
        };
        i.unitTest = {
            domain: "localhost",
            modifier: function(e, t) {
                return;
            }
        };
        var e = function(e, t) {
            for (var n in i) {
                if (r(i[n].domain)) {
                    i[n].modifier(e, t);
                }
            }
        };
        return {
            process: e
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.highlighters.floating", function() {
        var J;
        var T;
        var v = "gwmw";
        var t = true;
        var s;
        var n;
        var S;
        var e = [];
        var r = function(e) {
            if (!e) return;
            $gingerWidgetJquery(e).html($gingerWidgetJquery(e).html().replace(/<[\/]?gwmw[^>]*>/gi, ""));
            e = $gingerWidgetJquery(e);
            var t = e.parent();
            if (e.contents().length) {
                e.contents().insertBefore(e);
                e.remove();
            } else {
                e.remove();
            }
            t.find("b:empty,i:empty").remove();
        };
        var h = function(e, t) {
            var n = t.From + e.startsAt;
            var r = t.To + 1 + e.startsAt;
            if (!gingerModule.get("widget.utils").isRichTextElement(T)) {
                return [ {
                    node: T.childNodes[0],
                    from: n,
                    to: r
                } ];
            }
            return gingerModule.get("widget.utils").getNodeFragmentsOfIndex(T, n, r);
        };
        var E = 2;
        var p = function(e) {
            var t = gingerModule.get("widget.measure").getPaddingBox(J.element, S);
            var n = gingerModule.get("widget.measure").getScaleRatio(J.element);
            var r = t.height / n;
            var i = gingerModule.get("widget.measure").getElementScroll(T);
            var o = false;
            if (!Array.isArray(e)) {
                e = [ e ];
            }
            var g = [];
            var a = gingerModule.get("widget.measure").getDocumentScroll();
            var c = {
                top: 0,
                left: 0
            };
            if (document && document.body && document.body.contains(T)) {
                c = gingerModule.get("widget.measure").getDocumentGap(S);
            }
            var l = gingerModule.get("widget.measure").getPaddingBox(T, S);
            var s = a.left - c.left - l.left + i.left;
            var d = a.top - c.top - l.top + i.top;
            for (var u = 0; u < e.length; u++) try {
                var f = e[u];
                var m = document.createRange();
                m.setStart(f.node, f.from);
                m.setEnd(f.node, f.to);
                var v = Array.from(m.getClientRects());
                for (var h = 0; h < v.length; h++) {
                    var p = v[h];
                    if (p.width < .1) continue;
                    var w = g[g.length - 1];
                    var b = p.top + d;
                    var y = p.left + s;
                    var x = p.bottom + d + E;
                    var M = p.right + s;
                    var C = p.width;
                    var W = r < p.height + E ? p.height : p.height + E;
                    if (w && w.right === y && w.top === b && w.bottom === x && w.height === W) {
                        w.right = M;
                        w.width = w.width + C;
                    } else {
                        g.push({
                            top: b,
                            left: y,
                            bottom: x,
                            right: M,
                            width: C,
                            height: W
                        });
                    }
                    var q = g[g.length - 1];
                    var $ = g[g.length - 2];
                    if ($ && q) if (q.top === $.top && q.left === $.left && q.width === $.width && q.height === $.height) {
                        g.pop();
                    }
                }
            } catch (e) {
                console.error("Ginger range selection failed.", e);
            }
            return g;
        };
        var i = function(e) {
            return {
                width: Math.min(e.scrollWidth, 32767),
                height: Math.min(e.scrollHeight, 32767)
            };
        };
        var o;
        var g = function(e) {
            if (o) {
                o = clearTimeout(o);
            }
            o = setTimeout(function() {
                a(e);
            }, 10);
        };
        var w;
        var a = function(e, t) {
            if (!e) return;
            w = e;
            if (!J.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            var n = gingerModule.get("widget.measure").getElementScroll(T);
            var r = gingerModule.get("widget.measure").getScaleRatio(T);
            var i = [];
            for (var o = 0; o < e.length; o++) {
                var g = e[o];
                if (g.correction) {
                    for (var a = 0; a < g.correction.Corrections.length; a++) {
                        var c = g.correction.Corrections[a];
                        if (c.ignored) continue;
                        i.push(c.id);
                        var l = h(g, c);
                        var s = p(l);
                        var d = $gingerWidgetJquery(b).find(".gwmw-" + c.id);
                        if (d.length > s.length) {
                            for (var u = Math.max(0, s.length - 1); u < d.length; u++) {
                                d[u].remove();
                            }
                        }
                        for (var f = 0; f < s.length; f++) {
                            var m = d.filter(".gwmwi-" + f);
                            if (c.Suggestions.length !== 0 || !c.Confidence) {
                                m.removeClass("no-suggestion");
                            } else {
                                m.addClass("no-suggestion");
                            }
                            if (!m.length) {
                                m = $gingerWidgetJquery(document.createElement(v));
                                m.css("position", "absolute");
                                m.addClass("ginger-module-highlighter-mistake-type-" + c.Type);
                                m.addClass("gwmw-" + c.id);
                                m.addClass("gwmwi-" + f);
                                m.data("cid", c.id);
                                m.addClass("ginger-module-highlighter-mistake-anim");
                                $gingerWidgetJquery(b).append(m);
                            }
                            m.css("top", s[f].top);
                            m.css("width", s[f].width);
                            m.css("height", s[f].height);
                            m.css("left", s[f].left);
                        }
                    }
                }
            }
            $gingerWidgetJquery(b).find("gwmw").each(function(e, t) {
                var n = $gingerWidgetJquery(t).data("cid");
                if (i.indexOf(n) === -1) {
                    $gingerWidgetJquery(t).remove();
                }
            });
            x();
        };
        var c = function() {
            return $gingerWidgetJquery(b).find(v);
        };
        var l = function(e) {
            if (!e) {
                $gingerWidgetJquery(f).hide();
            } else {
                $gingerWidgetJquery(f).show();
            }
            t = e;
            J.events.listen.trigger("mutation");
        };
        var d = function() {
            $gingerWidgetJquery(f).remove();
            if (q) {
                clearInterval(q);
            }
        };
        var u = function(e) {
            var t = document.styleSheets, n = [];
            if (!t) return;
            e.matches = e.matches || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector || e.oMatchesSelector;
            try {
                for (var r in t) {
                    var i = t[r].rules || t[r].cssRules;
                    for (var o in i) {
                        if (e.matches(i[o].selectorText)) {
                            n.push(i[o].cssText);
                            if (/[+]/.test(i[o].selectorText)) {
                                return true;
                            }
                        }
                    }
                }
            } catch (e) {}
            return false;
        };
        var f = $gingerWidgetJquery("<gdiv class='ginger-module-highlighter ginger-module-highlighter-float'></gdiv>");
        var b = $gingerWidgetJquery("<gdiv class='ginger-module-highlighter-float-content'></gdiv>");
        var m = function(e) {
            if (L()) {
                return y(e);
            }
            var t = $gingerWidgetJquery(T).css("position");
            if (s) {
                f.insertAfter($gingerWidgetJquery(T));
            } else if (t == "static" || t == "relative" || t == "absolute") {
                f.insertBefore($gingerWidgetJquery(T));
            } else {
                f.insertAfter($gingerWidgetJquery(T));
            }
            f.append(b);
            n = $gingerWidgetJquery(T).css("background");
            S = $gingerWidgetJquery(T).css("position");
            $gingerWidgetJquery(T).css("background", "transparent");
            $gingerWidgetJquery(f).css("background", n);
            if (A(T)) {
                $gingerWidgetJquery(T).css("overflowY", "auto");
            }
            if (R()) {
                $gingerWidgetJquery(f).css({
                    backgroundColor: "transparent",
                    zIndex: "2",
                    pointerEvents: "none"
                });
            }
        };
        var y = function(e) {
            if ($gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float")) {
                $gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float").remove();
            }
            f.appendTo($gingerWidgetJquery(document.querySelector("html")));
            f.append(b);
            if (!e) {
                n = $gingerWidgetJquery(T).css("background");
                S = $gingerWidgetJquery(T).css("position");
                $gingerWidgetJquery(f).css("background", "transparent");
                $gingerWidgetJquery(f).data("overridedZIndex", gingerModule.get("widget.measure").findHighestZIndex() + 25);
            }
            if (R()) {
                $gingerWidgetJquery(f).css({
                    backgroundColor: "transparent",
                    zIndex: "2",
                    pointerEvents: "none"
                });
            }
        };
        var x = function() {
            var e = M(T);
            f.get(0).scrollTop = e.top;
            f.get(0).scrollLeft = e.left;
        };
        var M = function(e) {
            var t = e === window.document.body && "BackCompat" === window.document.compatMode;
            var n = t ? 0 : e.scrollTop;
            var r = t ? 0 : e.scrollLeft;
            return {
                top: n,
                left: r
            };
        };
        var C = function() {
            if (!$gingerWidgetJquery(T).is(":visible")) {
                return;
            }
            var e = parseInt($gingerWidgetJquery(T).css("z-index"));
            if (!e) e = 1;
            if (e < 2) e = 2;
            var t = $gingerWidgetJquery(T).data("gingerPositionCache");
            if (!t) {
                t = $gingerWidgetJquery(T).css("position");
                $gingerWidgetJquery(T).data("gingerPositionCache", t);
            }
            var n = $gingerWidgetJquery(T).data("gingerZindexCache");
            if (!n) {
                n = $gingerWidgetJquery(T).css("z-index");
                $gingerWidgetJquery(T).data("gingerZindexCache", n);
            }
            var r = t;
            if (r == "fixed") {
                $gingerWidgetJquery(f).css("position", "fixed");
                $gingerWidgetJquery(f).css("z-index", e - 1);
                $gingerWidgetJquery(T).css("z-index", e);
            } else if (r == "relative") {
                $gingerWidgetJquery(f).css("position", "absolute");
                if (s) {
                    $gingerWidgetJquery(f).css("z-index", e - 1);
                    $gingerWidgetJquery(T).css("z-index", e);
                }
            } else if (r == "absolute") {
                $gingerWidgetJquery(f).css("position", "absolute");
                $gingerWidgetJquery(f).css("z-index", e - 1);
                $gingerWidgetJquery(T).css("z-index", e);
            } else {
                $gingerWidgetJquery(T).css("position", "relative");
                $gingerWidgetJquery(f).css("position", "absolute");
                if (s) {
                    $gingerWidgetJquery(f).css("z-index", e - 1);
                    $gingerWidgetJquery(T).css("z-index", e);
                }
            }
            if ($gingerWidgetJquery(f).data("overridedZIndex")) {
                f.css("pointer-events", "none");
                $gingerWidgetJquery(f).css("z-index", $gingerWidgetJquery(f).data("overridedZIndex"));
            }
            var i = gingerModule.get("widget.measure").getPaddingBox(J.element, S);
            var o = gingerModule.get("widget.measure").getPaddingBox(f.get(0), S);
            var g = gingerModule.get("widget.measure").getScaleRatio(J.element);
            var a = getComputedStyle(f.get(0));
            var c = i.top - o.top;
            if (Math.abs(c) > .1) {
                f.css("marginTop", parseFloat(a["margin-top"]) + c);
            }
            var l = i.left - o.left;
            if (Math.abs(l) > .1) {
                f.css("marginLeft", parseFloat(a["margin-left"]) + l);
            }
            f.css("height", i.height / g);
            f.css("width", i.width / g);
            b.css("height", i.height + T.scrollHeight);
        };
        var b;
        var W = undefined;
        var q = undefined;
        var $ = function(e) {
            J = e;
            T = J.element;
            s = u(T);
            m();
            C();
            $gingerWidgetJquery(T).on("scroll", function() {
                x();
            });
            if (L()) {
                J.events.listen.on("focus", function() {
                    m(true);
                    C();
                });
            }
            J.events.listen.on("mutation", function(e) {
                if (!J.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
                C();
                a(w, true);
            });
        };
        var k = function(e) {
            if (!e || !e.parentNode) {
                return;
            }
            var t = new MutationObserver(function(e) {});
            t.observe(e.parentNode, {
                childList: true
            });
        };
        var L = function() {
            var e = window.location.hostname.split(".");
            return e && e.length && e[e.length - 2] === "qualtrics";
        };
        var A = function(e) {
            if (/facebook.com/.test(location.hostname)) {
                var t = document.querySelectorAll('[data-pagelet="ChatTab"]');
                if (t && t.length) {
                    for (var n = 0; n < t.length; n++) {
                        if (t[n].contains(e)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        var R = function() {
            return /outlook.live.com|outlook.office365.com|outlook.office.com/.test(location.hostname);
        };
        var N = function(t) {
            if (!t) {
                return;
            }
            var n = t.getBoundingClientRect();
            q = setInterval(function() {
                var e = t.getBoundingClientRect();
                if (e.x !== n.x || e.y !== n.y) {
                    C();
                    n = e;
                }
            }, 5);
        };
        return {
            refresh: g,
            init: $,
            setVisibility: l,
            getMistakeElements: c,
            destroy: d
        };
    }, [ "widget.utils", "widget.selectionManager" ]);
})();

(function() {
    var e = gingerModule.load("widget.highlighters.ghost", function() {
        var l;
        var s;
        var d;
        var u = "gwsw";
        var f = "gwmw";
        var g = true;
        var c = false;
        var a = [];
        var t = function(e) {
            var t = document.styleSheets, n = [];
            if (!t) return;
            e.matches = e.matches || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector || e.oMatchesSelector;
            try {
                for (var r in t) {
                    var i = t[r].rules || t[r].cssRules;
                    for (var o in i) {
                        if (e.matches(i[o].selectorText)) {
                            n.push(i[o].cssText);
                            if (/[+]/.test(i[o].selectorText)) {
                                return true;
                            }
                        }
                    }
                }
            } catch (e) {}
            return false;
        };
        var m = function() {
            if (!$gingerWidgetJquery(s).is(":visible")) {
                return;
            }
            var e = $gingerWidgetJquery(s).position();
            var t = gingerModule.get("widget.measure").getPaddingBox(s);
            var n = window.devicePixelRatio || 1;
            if ($gingerWidgetJquery(d).css("box-sizing") === "border-box") {
                $gingerWidgetJquery(d).css("height", t.height + t.border.top + t.border.bottom);
                $gingerWidgetJquery(d).css("width", t.width + t.border.left + t.border.right);
            } else {
                var r = window.getComputedStyle(s);
                $gingerWidgetJquery(d).css("height", t.height - parseInt(r["padding-top"]) - parseInt(r["padding-bottom"]));
                $gingerWidgetJquery(d).css("width", t.width - parseInt(r["padding-right"]) - parseInt(r["padding-left"]));
            }
            var i = parseInt($gingerWidgetJquery(s).css("z-index"));
            if (!i) i = 1;
            if (i < 2) i = 2;
            var o = $gingerWidgetJquery(s).data("gingerPositionCache");
            if (!o) {
                o = $gingerWidgetJquery(s).css("position");
                $gingerWidgetJquery(s).data("gingerPositionCache", o);
            }
            var g = $gingerWidgetJquery(s).data("gingerZindexCache");
            if (!g) {
                g = $gingerWidgetJquery(s).css("z-index");
                $gingerWidgetJquery(s).data("gingerZindexCache", g);
            }
            var a = o;
            if (a == "fixed") {
                $gingerWidgetJquery(d).css("position", "fixed");
                $gingerWidgetJquery(d).css("z-index", i - 1);
                $gingerWidgetJquery(s).css("z-index", i);
                $gingerWidgetJquery(d).css("top", e.top);
                $gingerWidgetJquery(d).css("left", e.left);
            } else if (a == "relative") {
                $gingerWidgetJquery(d).css("position", "absolute");
                $gingerWidgetJquery(d).css("top", e.top);
                $gingerWidgetJquery(d).css("left", e.left);
                if (c) {
                    $gingerWidgetJquery(d).css("top", e.top);
                    $gingerWidgetJquery(d).css("left", e.left);
                    $gingerWidgetJquery(d).css("z-index", i - 1);
                    $gingerWidgetJquery(s).css("z-index", i);
                }
            } else if (a == "absolute") {
                $gingerWidgetJquery(d).css("position", "absolute");
                $gingerWidgetJquery(d).css("z-index", i - 1);
                $gingerWidgetJquery(s).css("z-index", i);
                $gingerWidgetJquery(d).css("top", e.top);
                $gingerWidgetJquery(d).css("left", e.left);
            } else {
                $gingerWidgetJquery(s).css("position", "relative");
                $gingerWidgetJquery(d).css("position", "absolute");
                $gingerWidgetJquery(d).css("top", e.top);
                $gingerWidgetJquery(d).css("left", e.left);
                if (c) {
                    $gingerWidgetJquery(d).css("top", e.top);
                    $gingerWidgetJquery(d).css("left", e.left);
                    $gingerWidgetJquery(d).css("z-index", i - 1);
                    $gingerWidgetJquery(s).css("z-index", i);
                }
            }
        };
        var v = function(e) {
            return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        };
        var h = function(e, t) {
            var n = $gingerWidgetJquery("<" + u + " />").get(0);
            n.id = "gws-" + e.id;
            var r = e.preLineBreakCount ? new Array(e.preLineBreakCount + 1).join("\n") : "";
            var i = e.postLineBreakCount ? new Array(e.postLineBreakCount + 1).join("\n") : "";
            if (!e.correction || !e.correction.Corrections.length) {
                n.innerHTML = r + v(e.text) + i;
                return n;
            }
            n.innerHTML += r;
            var o = gingerModule.get("widget.phraseService").getSentenceFragments(e);
            var g = "";
            for (var a = 0; a < o.length; a++) {
                var c;
                if (o[a].correction && !o[a].correction.ignored) {
                    var l = false;
                    if (t.indexOf(o[a].correction.id) === -1 && !$gingerWidgetJquery(d).find("#" + f + "-" + o[a].correction.id).length) {
                        l = true;
                    }
                    c = document.createElement(f);
                    c.className = "ginger-module-highlighter-mistake-type-" + o[a].correction.Type;
                    c.className += " gwmw-" + o[a].correction.id;
                    $gingerWidgetJquery(c).data("cid", o[a].correction.id);
                    $gingerWidgetJquery(c).attr("id", "gwmw-" + o[a].correction.id);
                    if (l) {
                        c.className += " ginger-module-highlighter-mistake-anim";
                    }
                    if (o[a].correction.Suggestions.length !== 0 || !o[a].correction.Confidence) {
                        $gingerWidgetJquery(c).removeClass("no-suggestion");
                    } else {
                        c.className += " no-suggestion";
                    }
                    c.appendChild(document.createTextNode(o[a].text));
                } else {
                    c = document.createTextNode(o[a].text);
                }
                n.appendChild(c);
            }
            n.innerHTML += i;
            return n;
        };
        function e() {
            var e = document.createElement("div");
            e.style.visibility = "hidden";
            e.style.overflow = "scroll";
            e.style.msOverflowStyle = "scrollbar";
            document.body.appendChild(e);
            var t = document.createElement("div");
            e.appendChild(t);
            var n = e.offsetWidth - t.offsetWidth;
            e.parentNode.removeChild(e);
            return n;
        }
        var p = function() {
            if (!l.isEnabled()) return;
            var e = $gingerWidgetJquery(s).css("background");
            var t = $gingerWidgetJquery(s).css("background-image");
            var n = $gingerWidgetJquery(s).css("background-color");
            var r = t == "none" && n == "rgba(0, 0, 0, 0)" ? true : false;
            if (!r) {
                $gingerWidgetJquery(s).get(0).style.setProperty("background", "none", "important");
                $gingerWidgetJquery(s).data("gingerBackgroundCache", e);
            }
            var i = s;
            if (s.childNodes.length && /mentions-texteditor__content/.test(s.childNodes[0].className)) {
                i = s.childNodes[0];
            }
            var o = [ "color", "borderRadius", "border", "borderColor", "boxSizing", "paddingTop", "paddingLeft", "paddingRight", "paddingBottom", "marginTop", "marginLeft", "marginRight", "marginBottom", "fontFamily", "direction", "fontSize", "textAlign", "letterSpacing", "fontWeight", "whiteSpace", "overflowWrap" ];
            for (var g = 0; g < o.length; g++) {
                $gingerWidgetJquery(d).css(o[g], $gingerWidgetJquery(s).css(o[g]));
            }
            var a = $gingerWidgetJquery(i).css("lineHeight");
            $gingerWidgetJquery(d).css("lineHeight", a);
            $gingerWidgetJquery(i).css("lineHeight", a);
            var c = $gingerWidgetJquery(i).data("gingerBackgroundCache");
            if (c) {
                $gingerWidgetJquery(d).css("background", c);
            }
            $gingerWidgetJquery(d).css({
                color: "rgba(0,0,0,0)"
            });
            $gingerWidgetJquery(d).css({
                display: "block"
            });
            if (gingerModule.get("widget.utils").isRichTextElement(i)) {
                $gingerWidgetJquery(d).css("white-space", "pre-wrap");
            } else {
                $gingerWidgetJquery(d).css("white-space", $gingerWidgetJquery(i).css("white-space"));
            }
            gingerModule.get("widget.ghostModifiers").process(i, d);
        };
        var n = function(e) {
            if (!l.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            if (!g) return;
            var t = gingerModule.get("widget.utils").clone(e);
            try {
                if (t[t.length - 1].text.match(/\n$/)) {
                    t[t.length - 1].text += "\n";
                }
            } catch (e) {}
            p();
            m();
            var n = $gingerWidgetJquery(d).find(f).map(function() {
                return this.id.substring((f + "-").length);
            }).get();
            var r = $gingerWidgetJquery(d).find(u);
            for (var i = 0; i < t.length || i < r.length; i++) {
                var o = !a[i] || JSON.stringify(t[i]) !== JSON.stringify(a[i]);
                if (!t[i]) {
                    $gingerWidgetJquery(r[i]).remove();
                } else if (!r[i]) {
                    $gingerWidgetJquery(d).append(h(t[i], n));
                } else if (o) {
                    $gingerWidgetJquery(r[i]).replaceWith(h(t[i], n));
                } else {}
            }
            a = t;
            w();
        };
        var w = function() {
            var e = gingerModule.get("widget.measure").getElementScroll(s);
            d.scrollTop(e.top);
            d.scrollLeft(e.left);
        };
        var r = function() {
            var e = $gingerWidgetJquery(s).css("position");
            if (c) {
                d = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(s));
            } else if (e == "static" || e == "relative") {
                d = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertBefore($gingerWidgetJquery(s));
            } else {
                d = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(s));
            }
        };
        var i = function() {
            return $gingerWidgetJquery(d).find(f);
        };
        var o = function(e) {
            if (e) {
                $gingerWidgetJquery(d).show();
            } else {
                $gingerWidgetJquery(d).hide();
                var t = $gingerWidgetJquery(s).data("gingerBackgroundCache");
                if (t) {
                    $gingerWidgetJquery(s).css("background", t);
                }
            }
            g = !!e;
        };
        var b = function() {
            var e = $gingerWidgetJquery(s).data("gingerBackgroundCache");
            if (e) {
                $gingerWidgetJquery(s).css("background", e);
            }
            $gingerWidgetJquery(s).css("position", $gingerWidgetJquery(s).data("gingerPositionCache") || "");
            $gingerWidgetJquery(s).css("z-index", $gingerWidgetJquery(s).data("gingerZindexCache") || "");
            l.events.listen.off("mutation.ghostUpdate");
            $gingerWidgetJquery(s).off("blur", m);
            $gingerWidgetJquery(s).off("scroll", w);
            $gingerWidgetJquery(d).remove();
        };
        var y = function(e) {
            l = e;
            s = l.element;
            c = t(s);
            $gingerWidgetJquery(s).blur(m);
            $gingerWidgetJquery(s).scroll(w);
            s.addEventListener("scroll", w);
            l.events.listen.on("mutation.ghostUpdate", function() {
                if (!l.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
                var e = window.devicePixelRatio || 1;
                if (e < 1) {
                    b();
                } else {
                    d.show();
                }
                p();
                m();
            });
            r();
            m();
        };
        return {
            refresh: n,
            refreshPosition: m,
            init: y,
            setVisibility: o,
            scrollUpdate: w,
            getMistakeElements: i,
            destroy: b
        };
    }, [ "widget.utils", "widget.phraseService", "widget.ghostModifiers", "widget.measure" ]);
})();

(function() {
    var e = gingerModule.load("widget.highlighters.inline", function() {
        var h;
        var p;
        var w = "gwmw";
        var b = true;
        var y = false;
        var x = function() {
            var e = /emailauthorframe\.jsp\?email_type=html/.test(window.location.href);
            if (e) {
                w = "span";
            }
        };
        var e = function(e, t) {
            var n = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (e === t) return false;
            var r = $gingerWidgetJquery(e).parents().has(t).first();
            var i = $gingerWidgetJquery(e).parentsUntil(r, n).length;
            var o = $gingerWidgetJquery(t).parentsUntil(r, n).length;
            return i || o ? true : false;
        };
        var M = function(e, t, n) {
            var r = n.From + t.startsAt;
            var i = n.To + 1 + t.startsAt;
            var o = gingerModule.get("widget.utils").getNodeOffsetOfIndex(e, r, i);
            if (!o.startNode || !o.endNode) {
                return;
            }
            var g = a(w, o.startNode, o.startNodeOffset, o.endNode, o.endNodeOffset);
            $gingerWidgetJquery(e).find("b:empty,i:empty").remove();
            e.normalize();
            return g;
        };
        var C = function() {
            return gingerModule.get("widget.selectionManager").saveSelection(p);
        };
        var W = function() {
            return gingerModule.get("widget.selectionManager").restoreSelection(p);
        };
        var a = function(e, t, n, r, i) {
            var o = document.createRange();
            try {
                o.setStart(t, n);
                o.setEnd(r, i);
            } catch (e) {
                console.error(e);
            }
            var g = document.createElement(e);
            g.appendChild(o.extractContents());
            o.insertNode(g);
            return g;
        };
        var q = function(e) {
            if (!e) return;
            $gingerWidgetJquery(e).html($gingerWidgetJquery(e).html().replace(/<[\/]?gwmw[^>]*>/gi, ""));
            e = $gingerWidgetJquery(e);
            var t = e.parent();
            if (e.contents().length) {
                e.contents().insertBefore(e);
                e.remove();
            } else {
                e.remove();
            }
            t.find("b:empty,i:empty").remove();
        };
        var $ = function() {
            var e = $gingerWidgetJquery(p).find("span[style]");
            e.each(function(e, t) {
                var n = $gingerWidgetJquery(t).css("background-color");
                if (n) {
                    n = n.toLowerCase().replace(/ /g, "");
                    if (n === "rgba(255,115,115,0.3)" || n === "rgba(87,131,204,0.3)") {
                        $gingerWidgetJquery(t).css("background-color", "");
                    }
                }
            });
        };
        var J = function() {
            $gingerWidgetJquery(p).find(".XjviVd").slice(1).remove();
        };
        var t = function(e, t) {
            for (var n = 0; n < t.length; n++) {
                if (t[n].id === e) return t[n];
            }
            return null;
        };
        var T = function(e, t) {
            var n = document.getElementById("gwmw-" + e.id);
            if (!t || !e || n.innerText !== t.text.substring(e.From, e.To + 1) || n.querySelectorAll(w).length) {
                return false;
            }
            return true;
        };
        var S = function(e, t, n, r) {
            if (window.location.hostname.indexOf("lightning.force.com") != -1) {
                if (n.id === t[t.length - 1].id && r.id === n.correction.Corrections[n.correction.Corrections.length - 1].id) {
                    var i = n.words[n.words.length - 1];
                    if (i.startsAt - n.startsAt === r.From && i.endsAt - n.startsAt === r.To + 1) {
                        if (!$gingerWidgetJquery("gwcphb").next().length) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        var n = function(e) {
            y = e;
        };
        var r = null;
        var i = function(e) {
            if (y) {
                o(e);
                return;
            }
            if (r) {
                clearTimeout(r);
                r = setTimeout(function() {
                    o(e);
                }, 20);
            } else {
                o(e);
                r = setTimeout(function() {});
            }
        };
        var o = function(e) {
            if (!y && p !== document.activeElement) return;
            if (!h.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            x();
            $();
            if (!b) return;
            var t = gingerModule.get("widget.utils").cloneRepresentation(e);
            if (p.innerHTML == "") {
                $gingerWidgetJquery(p).html($gingerWidgetJquery(p).text());
            }
            var n = E(t);
            var r = false;
            var i = p.querySelectorAll(w);
            for (var o = 0; o < i.length; o++) {
                var g = i[o];
                var a = g.id.replace("gwmw-", "");
                if (!g.id || n.indexOf(a) === -1) {
                    if (!r) {
                        r = true;
                        C();
                    }
                    q(g);
                }
            }
            for (var c = 0; c < t.length; c++) {
                var l = t[c];
                if (l.correction && l.correction.Corrections.length) {
                    for (var s = 0; s < l.correction.Corrections.length; s++) {
                        var d = l.correction.Corrections[s];
                        var u = d && d.ignored;
                        var f = p.querySelector("#gwmw-" + d.id);
                        var m = S(p, e, l, d);
                        if (!f && !u && !m) {
                            if (!r) {
                                r = true;
                                C();
                            }
                            var v = M(p, l, d);
                            if (v) {
                                v.className = "ginger-module-highlighter-mistake-anim ginger-module-highlighter-mistake-type-" + d.Type;
                                v.id = "gwmw-" + d.id;
                                v.addEventListener("animationend", function(t) {
                                    return function(e) {
                                        $gingerWidgetJquery(t).removeClass("ginger-module-highlighter-mistake-anim");
                                    };
                                }(v), {
                                    once: true
                                }, true);
                            } else {
                                if (window.Sentry) {
                                    Sentry.setContext("extra", {
                                        innerHTML: p.innerHTML,
                                        sentence: l,
                                        correction: d
                                    });
                                    Sentry.captureMessage("Couldn't wrap mistakeNode #1 (handled .className bug)");
                                }
                            }
                        } else if (m) {} else if (d.ignored) {
                            if (!r) {
                                r = true;
                                C();
                            }
                            q(f);
                        } else if (l.activeSentence && !T(d, l)) {
                            if (!r) {
                                r = true;
                                C();
                            }
                            q(f);
                            var v = M(p, l, d);
                            if (v) {
                                v.className = "ginger-module-highlighter-mistake-type-" + d.Type;
                                v.id = "gwmw-" + d.id;
                            } else {
                                if (window.Sentry) {
                                    Sentry.setContext("extra", {
                                        innerHTML: p.innerHTML,
                                        sentence: l,
                                        correction: d
                                    });
                                    Sentry.captureMessage("Couldn't wrap mistakeNode #2 (handled .className bug)");
                                }
                            }
                        }
                    }
                }
            }
            p.normalize();
            if (r) W();
            setTimeout(J, 150);
        };
        var g = function() {
            return $gingerWidgetJquery(p).find(w);
        };
        var c = function(e) {
            if (!e) {
                l();
            }
            b = e;
        };
        var l = function() {
            g().each(function(e, t, e) {
                q(t);
            });
        };
        var E = function(e) {
            var t = [];
            for (var n = 0; n < e.length; n++) {
                if (e[n].correction && e[n].correction.Corrections && e[n].correction.Corrections.length) {
                    for (var r = 0; r < e[n].correction.Corrections.length; r++) {
                        t.push(e[n].correction.Corrections[r].id);
                    }
                }
            }
            return t.sort();
        };
        var s = function(e) {
            h = e;
            p = h.element;
        };
        return {
            refresh: i,
            init: s,
            setVisibility: c,
            getMistakeElements: g,
            destroy: l,
            unit: {
                createMistakeTag: M,
                removeMistakeTag: q,
                saveSelection: C,
                restoreSelection: W,
                wrapSelection: a,
                isThereBlockElemDifference: e,
                setAntiCollision: n
            }
        };
    }, [ "widget.utils", "widget.selectionManager" ]);
})();

(function() {
    var e = gingerModule.load("widget.injector.draft", function() {
        var e = function() {
            var i = {};
            var g = function(e) {
                for (var t in e) {
                    if (t.indexOf("__reactInternalInstance") === 0 || t.indexOf("__reactProps")) {
                        return e[t].memoizedProps || e[t]._currentElement.props;
                    }
                }
                return null;
            };
            var a = function(e) {
                e.defaultPrevented = false;
                e.target = document.activeElement;
                e.preventDefault = function() {};
                return e;
            };
            document.addEventListener("gingerModule-hasReactProp", function(e) {
                var t = e.detail;
                var n = !!g(t.element);
                t.cb(n);
            });
            document.addEventListener("gingerModule-eventEmitter-react-fire", function(e) {
                var t = g(document.activeElement);
                if (e.detail.event) {
                    var n = e.detail.event;
                    var r = e.detail.params ? a(e.detail.params) : {};
                    if (t && n && t[n]) {
                        t[n](r);
                    }
                } else if (e.detail.prop) {
                    if (t) {
                        t[e.detail.prop] = e.detail.value;
                    }
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onpaste", function(e) {
                var t = g(document.activeElement);
                var n = a({
                    clipboardData: {
                        getData: function() {
                            return e.detail || "";
                        },
                        items: [ "text/plain" ]
                    }
                });
                if (t && t.onPaste) {
                    t.onPaste(n);
                } else if (t && t.onChange) {
                    var r = document.activeElement;
                    var i = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
                    i.call(r, e.detail);
                    var o = new Event("input", {
                        bubbles: true
                    });
                    r.dispatchEvent(o);
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onkeydown", function(e) {
                var t = g(document.activeElement);
                var n = a(e.detail);
                if (t) {
                    t.onKeyDown(n);
                }
            });
            var e = function(e, t) {
                if (!i[e]) return;
                for (var n = 0; n < i[e].length; n++) {
                    var r = i[e][n];
                    r(new CustomEvent(e), t);
                }
            };
            var o = document.addEventListener.bind(document);
            document.addEventListener = function(e, t, n) {
                var r = i[e] || [];
                r.push(t);
                i[e] = r;
                o(e, t, n);
            };
        };
        return e;
    });
})();

(function() {
    var e = gingerModule.load("widget.injector", function() {
        var t = function(e, t, n) {
            if (!n) n = [];
            var r = e.createElement("script");
            var i = t.toString();
            r.innerHTML = "(function(){(" + i + ")(" + n.join(",") + ") })()";
            e.documentElement.appendChild(r);
        };
        var n = {};
        var e = function(e) {
            if (!n[e]) {
                n[e] = true;
                if (document.body) {
                    t(document, gingerModule.get(e), []);
                }
            }
        };
        return {
            injectOnce: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.injector.quill", function() {
        var e = function() {
            var a = function(e, t, n, r) {
                if (!n) n = 0;
                if (!r) r = [];
                if (n > 5) return null;
                for (var i in e) {
                    if (i === "CSSStyleSheet") break;
                    if (i === t) {
                        return e[i];
                    }
                    if (typeof e[i] === "object") {
                        var o = r.slice(0);
                        o.push(i);
                        var g = a(e[i], t, n + 1, o);
                        if (g) {
                            return g;
                        }
                    }
                }
                return null;
            };
            var r = function(t) {
                function n(e, t) {
                    if (typeof t !== "function" && t !== null) {
                        throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                    }
                    e.prototype = Object.create(t && t.prototype, {
                        constructor: {
                            value: e,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (t) Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t;
                }
                function r(e, t) {
                    if (!e) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return t && (typeof t === "object" || typeof t === "function") ? t : e;
                }
                var i = function() {
                    n(e, t.imports["blots/inline"]);
                    function e() {
                        return r(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
                    }
                    return e;
                }();
                i.tagName = "GWMW";
                i.blotName = "ginger-inline";
                i.formats = function(e) {
                    return e.id;
                };
                t.register("formats/ginger-inline", i);
                var e = function() {
                    n(e, t.imports["blots/inline"]);
                    function e() {
                        return r(this, (i.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
                    }
                    return e;
                }();
                e.tagName = "GWCPHB";
                e.blotName = "ginger-inline-ph";
                t.register("formats/ginger-inline-ph", e);
            };
            var i = false;
            var o = function() {
                if (i) return;
                try {
                    var e = a(window.Aura, "ComponentService.indexComponent");
                    var t = a(e, "lightning/quillLib");
                    var n = a(t, "Quill");
                    r(n);
                    i = true;
                    window.removeEventListener("click", o);
                } catch (e) {
                    console.error("ginger injection failed", e);
                }
            };
            window.addEventListener("click", o);
            o();
        };
        return e;
    });
})();

(function() {
    var e = gingerModule.load("widget.inputFinder", function() {
        var i = {
            selector: "textarea, *[contenteditable]"
        };
        var n = $gingerWidgetJquery({});
        var r = [];
        var t = 5e3;
        var o = null;
        var g = function(e) {
            $field = $gingerWidgetJquery(e);
            var t = {};
            t.id = gingerModule.get("widget.utils").generateUID();
            $field.data("gingerWidgetFieldId", t.id);
            $field.gingerWidgetFieldId = t.id;
            r.push(e);
            n.trigger("new", $field.get(0));
        };
        var a = function(e) {
            var t = $gingerWidgetJquery(e);
            var n = location.hostname;
            if (self != top && /localhost/.test(n) && window.parent.location) n = window.parent.location.hostname;
            if (window.location.hostname === "www.linkedin.com") {
                if (t.attr("id") === "jobs-description") {
                    return true;
                } else if (t.hasClass("mentions-texteditor__contenteditable")) {
                    return true;
                } else if (/rich-text-editor/.test(t.parent().attr("id"))) {
                    return true;
                }
            }
            if (window.location.hostname === "mail.google.com") {
                t[0].setAttribute("data-ginger-wrap", "gmail");
                return true;
            }
            if (/outlook.live.com|outlook.office365.com|outlook.office.com/.test(n)) {
                return true;
            }
            if (/1und1.de|gmx.net|gmx.com|web.de/.test(n)) {
                return true;
            }
            if (window.location.hostname === "localhost") {
                if (t.attr("id") === "unittest-input-field-that-matches-override-criteria") {
                    return true;
                }
            }
            if (t.is(".cke_editable")) {
                return true;
            }
            return false;
        };
        var c = function(n) {
            if (i.selector === null) return;
            if (gingerModule.get("widget").isEnabled()) {
                var r = $gingerWidgetJquery(document.activeElement);
                var e = gingerModule.get("widget.siteSettings").get(window.location.href, document.activeElement);
                var t = r && (r.attr("contenteditable") === "" || r.attr("contenteditable") === true || r.attr("contenteditable") == "true");
                if (r && !r.data("gingerWidgetFieldId") && r.attr("disableGinger") !== "true" && r.attr("data-ginger") !== "false" && (r.is(i.selector) || t) && !e.disabled) {
                    if (r.attr("spellcheck") !== "false" || a(document.activeElement)) {
                        gingerModule.get("widget.preFlightProbe").run(document.activeElement).then(function e() {
                            g(r);
                            if (n) n();
                        }, function e(t) {
                            g(r);
                            if (n) n();
                        });
                    }
                }
            } else {
                console.log("widget is disabled");
            }
        };
        var l = false;
        var e = function(e) {
            if (l) return;
            i = gingerModule.get("widget.utils").merge(i, e);
            c();
            o = setInterval(c, t);
            document.addEventListener("click", function() {
                setTimeout(c, 400);
            });
            l = true;
        };
        var s = function(e) {
            g(e);
            return e;
        };
        return {
            listen: n,
            refresh: c,
            feed: s,
            init: e
        };
    }, [ "widget.utils", "widget.siteSettings" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler", function() {
        var m;
        var v = [];
        var g = null;
        var t = null;
        var n = null;
        var r = 1500;
        var e = null;
        var o = 50;
        var i = null;
        var a = true;
        var c = false;
        var l = {};
        var s = null;
        var h = [];
        var d = {};
        var u = function() {
            var e = gingerModule.get("widget.utils").isRichTextElement(m.element);
            var t = e ? m.element.innerHTML : m.element.value;
            if (d.raw && d.raw === t) {
                return d.value;
            }
            d.raw = t;
            d.value = gingerModule.get("widget.contentManager").getVal(m.element);
            return d.value;
        };
        var f = function() {
            var e = gingerModule.get("widget.utils").isRichTextElement(m.element);
            if (e) {
                if ($gingerWidgetJquery(m.element).text() === $gingerWidgetJquery(m.element).attr("data-placeholder-default")) {
                    return "";
                } else {
                    return $gingerWidgetJquery(m.element).html().replace(/<[\/]?gwmw[^>]*>/gi, "");
                }
            } else {
                return $gingerWidgetJquery(m.element).val();
            }
        };
        var p = function(e, t, n, r) {
            gingerModule.get("widget.contentManager").setVal(m.element, e, t, n, r).then(function() {
                P();
                G(true);
            });
        };
        var w = function(e) {
            var t = b(e);
            return t !== null ? v[t] : null;
        };
        var b = function(e) {
            for (var t = 0; t < v.length; t++) {
                if (v[t].id === e) {
                    return t;
                }
            }
            return null;
        };
        var y = function(e) {
            for (var t = 0; t < v.length; t++) {
                if (v[t].correction && v[t].correction.Corrections) {
                    for (var n = 0; n < v[t].correction.Corrections.length; n++) {
                        var r = v[t].correction.Corrections[n];
                        if (r.id === e) {
                            return v[t];
                        }
                    }
                }
            }
            return null;
        };
        var x = function(e) {
            for (var t = 0; t < v.length; t++) {
                if (v[t].correction && v[t].correction.Corrections) {
                    for (var n = 0; n < v[t].correction.Corrections.length; n++) {
                        var r = v[t].correction.Corrections[n];
                        if (r.id === e) {
                            return r;
                        }
                    }
                }
            }
            return null;
        };
        var M = function(e) {
            return e.replace("gwmw-", "");
        };
        var C = function(e, t, n, r) {
            return gingerModule.get("widget.contentManager").setVal(m.element, e, t, n);
        };
        var W = function(e) {
            var t = y(e);
            var n = 0;
            for (var r = 0; r < t.correction.Corrections.length; r++) {
                if (t.correction.Corrections[r].id === e) {
                    t.correction.Corrections.splice(r, 1);
                    r--;
                }
            }
            return t;
        };
        var q = function(e) {
            var t = v;
            var n = $gingerWidgetJquery.Deferred();
            var r = y(e);
            var i = x(e);
            var o = r.startsAt;
            var g = N(r, i.From, i.To + 1);
            var a = g.length - (i.To + 1 - i.From);
            W(i.id);
            C(g, o + i.From, o + i.To + 1).then(function() {
                P();
                n.resolve();
            });
            return n.promise();
        };
        var $ = function(e, t) {
            try {
                h.push({
                    result: e,
                    bubbleResultData: t,
                    representation: v
                });
                var n, r;
                if (e === "ignoreAll") {
                    r = w(t.sentenceId);
                    n = x(t.correctionId);
                    var i = r.correction.Corrections.length;
                    var o = [];
                    for (var g = 0; g < r.correction.Corrections.length; g++) {
                        var a = r.correction.Corrections[g];
                        if (a.From >= n.UXFrgFrom && a.To <= n.UXFrgTo) {
                            o.push(a);
                        }
                    }
                    for (var g = 0; g < o.length; g++) {
                        gingerModule.get("widget.correctionService").ignoreMistake(o[g], r, function() {});
                    }
                    G(true);
                } else if (e === "approve") {
                    q(t.correctionId).then(function() {
                        m.stats.update(v);
                    });
                    gingerModule.get("widget.licenseLimits").approvalsUsed(1);
                } else if (e === "ignore") {
                    r = y(t.correctionId);
                    n = x(t.correctionId);
                    W(t.correctionId);
                    gingerModule.get("widget.correctionService").ignoreMistake(n, r);
                    G(true);
                } else if (e === "addToDictionary") {
                    r = y(t.correctionId);
                    n = x(t.correctionId);
                    var c = r.text.substring(n.From, n.To + 1);
                    gingerModule.get("widget.api").addToDictionary(c, function(e) {});
                    gingerModule.get("widget.cache").remove("api.sentence", r.text.trim());
                    for (var g = 0; g < v.length; g++) {
                        if (v[g].correction && v[g].correction.Corrections) {
                            for (var l = 0; l < v[g].correction.Corrections.length; l++) {
                                var s = v[g].text.substring(v[g].correction.Corrections[l].From, v[g].correction.Corrections[l].To + 1);
                                if (s === c) {
                                    W(v[g].correction.Corrections[l].id);
                                }
                            }
                        }
                    }
                    G(true);
                } else if (e === "approveAll") {
                    r = w(t.sentenceId);
                    n = x(t.correctionId);
                    var d = N(r, n.UXFrgFrom, n.UXFrgTo + 1);
                    var u = 0;
                    for (var g = 0; g < r.correction.Corrections.length; g++) {
                        if (r.correction.Corrections[g].From >= n.UXFrgFrom && r.correction.Corrections[g].To <= n.UXFrgTo) {
                            u++;
                            r.correction.Corrections.splice(g, 1);
                            g--;
                        }
                    }
                    var f = {
                        From: n.UXFrgFrom,
                        To: n.UXFrgTo,
                        UXFrgFrom: n.UXFrgFrom,
                        UXFrgTo: n.UXFrgTo,
                        Suggestions: [ {
                            Text: d
                        } ],
                        id: gingerModule.get("widget.utils").generateUID()
                    };
                    r.correction.Corrections.push(f);
                    q(f.id).then(function() {});
                    gingerModule.get("widget.licenseLimits").approvalsUsed(u);
                }
            } catch (e) {
                if (window.Sentry) {
                    Sentry.captureException(e);
                } else {
                    if (console && console.error) console.error(e);
                    throw new Error(e);
                }
            }
        };
        var J = null;
        var T = function(e) {
            if (J) {
                if (gingerModule.get("widget.utils").isMouseEventOverElement(e, J)) {
                    return J;
                }
            }
            var t = m.highlighter.getMistakeElements();
            var n = null;
            for (var r = 0; r < t.length && n === null; r++) {
                if (gingerModule.get("widget.utils").isMouseEventOverElement(e, t[r])) {
                    n = t[r];
                    return n;
                }
            }
            return null;
        };
        var S = function(i) {
            if (e) e = clearTimeout(e);
            e = setTimeout(function() {
                var e = T(i);
                if (e) {
                    var t;
                    J = e;
                    if ($gingerWidgetJquery(e).attr("id")) {
                        t = M($gingerWidgetJquery(e).attr("id"));
                    } else {
                        t = $gingerWidgetJquery(e).data("cid");
                    }
                    var n = x(t);
                    if (!n) return;
                    var r = y(n.id);
                    if (r.correction.checkType === "shallow") {
                        G(true, function() {
                            S(i);
                        });
                    } else {
                        gingerModule.get("widget.correctionBubble").show(n, r, $);
                    }
                } else {
                    if (J) {
                        gingerModule.get("widget.correctionBubble").gracefulHide();
                    }
                    J = null;
                }
            }, o);
        };
        var E = function() {
            $gingerWidgetJquery(m.element).on("mousemove", S);
        };
        var k = function() {
            $gingerWidgetJquery(m.element).off("mousemove", S);
        };
        var L = function(e) {
            t = e;
            if (e) {
                E();
            } else {
                k();
            }
        };
        var A = function() {
            if (n !== null) {
                n = clearTimeout(n);
            }
        };
        var R = function(e) {
            A();
            n = setTimeout(function() {
                G(true);
            }, e || r);
        };
        var N = function(e, t, n) {
            var r = e.text;
            var i = 0;
            for (var o = 0; o < e.correction.Corrections.length; o++) {
                if (e.correction.Corrections[o].From >= t && e.correction.Corrections[o].To <= n - 1) {
                    var g = e.correction.Corrections[o].From;
                    var a = e.correction.Corrections[o].To + 1;
                    var c = e.correction.Corrections[o].Suggestions.length ? e.correction.Corrections[o].Suggestions[0].Text : e.text.substring(g, a);
                    r = r.substring(0, g + i) + c + r.substring(a + i);
                    i += c.length - (a - g);
                }
            }
            return r.substring(t, n + i);
        };
        var I = {};
        var _ = function(e, t) {
            if (!I[e]) {
                I[e] = [];
            }
            var n = I[e];
            n.push(t);
            m.events.listen.on(e, t);
        };
        var F = function(e) {
            if (!I[e]) return;
            for (var t = 0; t < I[e].length; t++) {
                m.events.listen.off(e, I[e][t]);
            }
        };
        var O = function() {
            gingerModule.get("widget.correctionBubble").hide();
            $gingerWidgetJquery(m.element).attr("spellcheck", "true");
            $gingerWidgetJquery(m.element).data("gingerWidgetFieldId", null);
            m.highlighter.destroy();
            L(false);
            for (var e in I) {
                F(e);
            }
        };
        var B = function() {
            _("focus", function() {
                R();
            });
            _("blur", function() {
                setTimeout(function() {
                    gingerModule.get("widget.correctionBubble").hide();
                }, 1e3);
            });
            _("delete", function() {
                s = "delete";
                setTimeout(function() {
                    m.events.listen.trigger("inputchange");
                }, 50);
            });
            _("mouseover", function() {
                L(true);
            });
            _("mouseout", function() {
                L(false);
            });
            _("paste", function() {
                setTimeout(function() {
                    P();
                    G(true);
                }, 50);
            });
            _("inputchange", function(e) {
                P();
                var t = gingerModule.get("widget.utils").isRichTextElement(m.element);
                var n = t ? $gingerWidgetJquery(m.element).text() : $gingerWidgetJquery(m.element).val();
                if (/^\s*$/.test(n)) {
                    v = [];
                    m.stats.update([]);
                    m.highlighter.refresh([]);
                    if (c) V(false);
                } else {
                    if (s == "sentence.end") {
                        G(true);
                    } else if (s == "word.end") {
                        G();
                        R();
                    } else if (s == "delete") {
                        m.highlighter.refresh(v);
                        m.stats.update(v);
                        R();
                    } else {
                        setTimeout(function() {
                            m.highlighter.refresh(v);
                            m.stats.update(v);
                            R();
                        }, 10);
                    }
                }
                s = null;
                m.stats.update(v);
            });
            _("sentence.end", function() {
                s = "sentence.end";
            });
            _("click", function() {
                if (window.location.hostname === "mail.google.com") {
                    Z();
                }
                s = "sentence.end";
                setTimeout(function() {
                    m.events.listen.trigger("inputchange");
                }, 50);
            });
            _("enter", function() {
                s = "sentence.end";
                setTimeout(function() {
                    m.events.listen.trigger("inputchange");
                }, 50);
            });
            _("word.end", function() {
                s = "word.end";
            });
            _("visibility.change", function(e, t) {
                if (a) {
                    m.highlighter.setVisibility(t);
                }
            });
        };
        var P = function() {
            var e = gingerModule.get("widget.phraseService").getRepresentation(m.element);
            var t = gingerModule.get("widget.utils").cloneRepresentation(v);
            var n = gingerModule.get("widget.correctionService").mergeCorrections(e, t);
            v = n;
            m.highlighter.refresh(v);
            m.stats.update(v);
            return v;
        };
        var G = function(e, r) {
            if (!a) {
                return r && r([]);
            }
            if (!v.length) {
                m.highlighter.refresh(v);
                m.stats.update(v);
                if (r) r([]);
                return;
            }
            A();
            if (e) {
                for (var t = 0; t < v.length; t++) {
                    v[t].activeSentence = null;
                }
            }
            var n = gingerModule.get("widget.utils").cloneRepresentation(v);
            var i = new Date().getTime();
            g = i;
            var o = null;
            gingerModule.get("widget.correctionService").correct(n, function e(t) {
                if (g !== i) {
                    return;
                }
                v = t;
                if (!o) {
                    P();
                } else {
                    o = clearTimeout(o);
                }
                o = setTimeout(function() {
                    o = clearTimeout(o);
                    P();
                }, 10);
            }, function e() {
                if (g !== i) {
                    return;
                }
                l = {};
                for (var t = 0; t < v.length; t++) {
                    var n = v[t];
                    if (n.correction && n.correction.Sentences && n.correction.Sentences.length && !n.correction.Sentences[0].IsEnglish && n.words.length >= 8) {
                        V(true);
                    } else if (!X() && n.correction && n.correction.Corrections && n.correction.Corrections.length && n.words.length >= 8) {
                        gingerModule.get("widget.api").detectLang(n.text, function(e) {
                            if (e && e.d !== "en") V(true);
                        });
                    }
                }
                gingerModule.get("widget.correctionBubble").hide();
                if (r) r(v);
            });
        };
        var D = function() {
            m.element.focus();
        };
        var j = function() {
            p("");
            v = [];
            m.stats.update([]);
            m.highlighter.refresh([]);
        };
        var H = function() {
            if (!a) return;
            a = false;
            gingerModule.get("widget.correctionBubble").hide();
            $gingerWidgetJquery(m.element).attr("spellcheck", "true");
            m.highlighter.setVisibility(false);
            m.events.listen.trigger("enable.change", {
                enabled: false
            });
            m.events.listen.trigger("disabled");
        };
        var U = function() {
            if (a) return;
            a = true;
            $gingerWidgetJquery(m.element).attr("spellcheck", "false");
            m.highlighter.setVisibility(true);
            m.events.listen.trigger("enable.change", {
                enabled: true
            });
            m.events.listen.trigger("enabled");
            G(true);
        };
        var z = false;
        var V = function(e, t) {
            if (t) z = true;
            if (c === e) return;
            if (z && !t) return;
            c = e;
            if (e && a) {
                H();
            } else if (!a) {
                U();
            }
            m.events.listen.trigger("markedForeign.change", e);
        };
        var K = function() {
            return c;
        };
        var X = function() {
            return z;
        };
        var Z = function() {
            var e = document.querySelectorAll("[data-overlay-action=spellreplace]");
            e = Array.from(e);
            if (e && Array.isArray(e) && e.length > 0) {
                e.forEach(function(e) {
                    var t = e.closest(".pl");
                    if (t) {
                        t.remove();
                    }
                });
            }
        };
        var Q = function(e) {
            if (!e) return;
            e.setAttribute("spellcheck", "false");
            try {
                m = {
                    element: $gingerWidgetJquery(e).get(0),
                    id: $gingerWidgetJquery(e).data("gingerWidgetFieldId"),
                    events: null,
                    highlighter: null,
                    rewriter: null,
                    stats: null,
                    empty: j,
                    focus: D,
                    setVal: p,
                    getVal: u,
                    enable: U,
                    disable: H,
                    getFormattedVal: f,
                    markForeign: V,
                    getIsForeign: K,
                    setRepresentation: function(e) {
                        v = e;
                    },
                    getRepresentation: function() {
                        return v;
                    },
                    isEnabled: function() {
                        return a;
                    },
                    destroy: O,
                    unit: {
                        replaceInTextarea: C,
                        recheck: G,
                        updateRepresentation: P,
                        handleCorrectionBubbleResult: $,
                        flush: j
                    }
                };
                m.settings = gingerModule.get("widget.siteSettings").get(window.location.href, e);
                if (!m.settings) return;
                m.highlighter = new gingerModule.get(m.settings.highlighter, true)();
                m.stats = new gingerModule.get("widget.inputHandler.stats", true)();
                m.events = new gingerModule.get("widget.inputHandler.events", true)();
                m.events.init(m);
                m.highlighter.init(m);
                m.stats.init(e);
                gingerModule.get("widget.config").listen.on("change/dialect", function(e, t) {
                    gingerModule.get("widget.cache").flush();
                    v = [];
                    P();
                    G(true);
                });
                if (m.settings.injection) {
                    gingerModule.get("widget.injector").injectOnce(m.settings.injection);
                }
                gingerModule.get("widget.onlinestatus").listen.on("online", function() {
                    G(true);
                    console.log("widget is back online");
                });
                gingerModule.get("widget.onlinestatus").listen.on("offline", function() {
                    console.warn("Ginger Widget is offline");
                });
                B();
                v = gingerModule.get("widget.phraseService").getRepresentation(m.element);
                m.stats.update(v);
                if (v.length) {
                    G(true);
                }
            } catch (e) {
                console.error(e);
            }
            return m;
        };
        return {
            init: Q
        };
    }, [ "widget.utils", "widget.api", "widget.phraseService", "widget.correctionService", "widget.correctionBubble", "widget.inputHandler.events", "widget.inputHandler.stats", "widget.onlinestatus" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler.events", function() {
        var r = $gingerWidgetJquery({});
        var a;
        var c = function(e) {
            var t = String.fromCharCode(e);
            var n = "?!.";
            return e === 13 || n.indexOf(t) !== -1;
        };
        var i = function(e) {
            var t = String.fromCharCode(e);
            var n = /\s/;
            var r = t.match(n) !== null;
            var i = $gingerWidgetJquery(a);
            var o = gingerModule.get("widget.caret").get(i);
            var g = i.val().substr(o - 1, 1);
            return c(g.charCodeAt(0)) || g.match(n) ? false : r;
        };
        var o = {};
        var g = 800;
        var l = null;
        var s = function() {
            var e = g;
            if (l) l = clearTimeout(l);
            var t = gingerModule.get("widget.mutationDetectorService").getLayout(a);
            if (t.isVisible !== o.isVisible) {
                e = g;
                r.trigger("visibility.change", t.isVisible);
                if (t.isVisible) {
                    r.trigger("mutation", {
                        input: a
                    });
                }
            } else {
                var n = gingerModule.get("widget.mutationDetectorService").compareLayouts(t, o);
                if (n) {
                    r.trigger("mutation", {
                        input: a
                    });
                    e = 80;
                }
            }
            o = t;
            l = setTimeout(s, e);
        };
        var e = function(e) {
            a = e.element;
            var t = $gingerWidgetJquery(a);
            t.on("keypress", function(e) {
                if (c(e.which)) {
                    r.trigger("sentence.end", {
                        input: t
                    });
                } else if (i(e.which)) {
                    r.trigger("word.end", {
                        input: t
                    });
                }
            });
            t.bind("paste", function() {
                r.trigger("paste", {
                    input: t
                });
            });
            t.on("keyup", function(e) {
                if (e.which === 13) {
                    r.trigger("enter", {
                        input: t
                    });
                }
            });
            t.on("keydown", function(e) {
                if ([ 8, 46 ].indexOf(e.which) !== -1) {
                    r.trigger("delete", {
                        input: t
                    });
                } else if ([ 37, 38, 39, 40 ].indexOf(e.which) !== -1) {
                    r.trigger("inputchange", {
                        input: t
                    });
                } else if (e.which === 89 && e.ctrlKey) {
                    r.trigger("paste");
                } else if (e.which === 90 && e.ctrlKey) {
                    r.trigger("paste");
                }
            });
            t.focus(function() {
                r.trigger("focus", {
                    input: t
                });
            });
            t.blur(function() {
                r.trigger("blur", {
                    input: t
                });
            });
            t.scroll(function() {
                r.trigger("scroll", {
                    input: t
                });
            });
            t.mouseover(function() {
                r.trigger("mouseover", {
                    input: t
                });
            });
            t.mouseout(function() {
                r.trigger("mouseout", {
                    input: t
                });
            });
            t.keydown(function() {
                r.trigger("keydown", {
                    input: t
                });
            });
            s();
            var n = gingerModule.get("widget.utils").isRichTextElement(a);
            document.addEventListener("click", function() {
                mutationIntervals = [ 0, 50, 100, 200, 500 ];
                mutationIntervals.forEach(function(e) {
                    setTimeout(s, mutationIntervals);
                });
                r.trigger("click");
            });
            a.addEventListener("input", function() {
                r.trigger("inputchange", {
                    input: a
                });
            });
            t.on("paste", function(e) {
                if (e.which === 8 || e.which === 46) {
                    return true;
                }
                r.trigger("paste");
            });
        };
        return {
            listen: r,
            checkMutation: s,
            init: e
        };
    }, [ "widget.utils", "widget.caret", "widget.mutationDetectorService" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler.stats", function() {
        var n = $gingerWidgetJquery({});
        var o;
        var e = Math.random();
        var r;
        var i = function(e) {
            var t = {
                grammar: 0,
                spelling: 0
            };
            if (e && e.length) {
                for (var n = 0; n < e.length; n++) {
                    if (e[n].correction) {
                        for (var r = 0; r < e[n].correction.Corrections.length; r++) {
                            var i = e[n].correction.Corrections[r];
                            if (!i.ignored) {
                                if (i.Type === 3 || i.Type === 2) {
                                    t.grammar++;
                                } else {
                                    t.spelling++;
                                }
                            }
                        }
                    }
                }
            }
            return t;
        };
        var g = function(e) {
            var t = {
                words: 0,
                characters: 0,
                charactersWithSpace: 0,
                sentences: 0
            };
            var n = gingerModule.get("widget.contentManager").getVal(o);
            if (n && !n.match(/^\s+$/)) {
                var r = n.replace(/\d+/g, "").replace(/(^\s*|\s*$)/g, "").match(/([^\x00-\x7F]|\w)+/g);
                if (!r) r = [];
                if (r.length === 1 && r[0] == "") r = [];
                var i = n.replace(/\s+/g, "");
                t.words = r.length;
                t.characters = i.length;
                t.charactersWithSpace = n.length;
            }
            if (e && e.length) {
                t.sentences = e.length;
                if (e[e.length - 1].text.match(/^\s*$/)) {
                    t.sentences--;
                }
            }
            return t;
        };
        var t = function(e) {
            if (!e) return;
            try {
                var t = {};
                t.mistakes = i(e);
                t.count = g(e);
                r = t;
                n.trigger("changed", r);
            } catch (e) {
                console.error(e);
            }
        };
        var a = function() {
            return r;
        };
        var c = function(e) {
            o = e;
            t();
        };
        return {
            listen: n,
            update: t,
            init: c,
            get: a
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.licenseLimits", function() {
        var i = null;
        var t = $gingerWidgetJquery({});
        var o = function(e) {
            var t = i;
            i = e;
            r(t);
            g(e);
        };
        var g = function(n, r) {
            var r = typeof r == "boolean" ? r : true;
            var i = 1e3 * 60 * 60;
            try {
                if (chrome && chrome.storage && chrome.storage.sync) {
                    chrome.storage.sync.get("approvalsUsed", function(e) {
                        var t = e.approvalsUsed;
                        if (!t) {
                            t = {
                                time: new Date().getTime() + i * 3,
                                value: n
                            };
                        } else {
                            t.value = n;
                            t.time = r ? new Date().getTime() + i * 3 : t.time;
                        }
                        chrome.storage.sync.set({
                            approvalsUsed: t
                        });
                    });
                }
            } catch (e) {
                console.error(e);
            }
        };
        var e = function() {
            return new Promise(function(n, e) {
                try {
                    if (chrome && chrome.storage && chrome.storage.sync) {
                        chrome.storage.sync.get("approvalsUsed", function(e) {
                            var t = e.approvalsUsed;
                            if (t && t.time && t.time > new Date().getTime() && typeof t.value == "number") {
                                n(t.value);
                            } else {
                                n(null);
                            }
                        });
                    } else {
                        n(null);
                    }
                } catch (e) {
                    console.error(e);
                    n(null);
                }
            });
        };
        var n = function(t) {
            var n = $gingerWidgetJquery.Deferred();
            var r = gingerModule.get("widget.session").get();
            if (r.license === 2) {
                g(-1);
                return n.promise();
            }
            if (!gingerModule.get("widget.session").isLoggedIn()) {
                n.reject();
            } else {
                e().then(function(e) {
                    if (e !== null) {
                        if (t) {
                            i = e;
                        } else {
                            o(e);
                        }
                        n.resolve(e);
                        return;
                    }
                    $gingerWidgetJquery.ajax({
                        url: "https://corsproxy.io/?https://raw.githubusercontent.com/nekohacker591/test1/main/weekly?",
                        data: {
                            apiKey: gingerModule.get("widget.config").get("apiKey"),
                            lang: gingerModule.get("widget.config").get("dialect"),
                            clientVersion: gingerModule.get("widget.config").get("clientVersion"),
                            userIdentifier: r.userId,
                            authToken: r.token
                        },
                        dataType: "json",
                        success: function(e) {
                            g(e.WeeklyApprovalsLeft, true);
                            if (t) {
                                i = e.WeeklyApprovalsLeft;
                            } else {
                                o(e.WeeklyApprovalsLeft);
                            }
                            n.resolve(e.WeeklyApprovalsLeft);
                        }
                    });
                    return n.promise();
                });
            }
        };
        var r = function(e) {
            if (e === null) return;
            if (i === -1) return;
            if (e >= 5 && i < 5 && i >= 1) {
                t.trigger("triggered.approaching");
            } else if (i < 1) {
                if (e > 0) {
                    t.trigger("triggered.exceeded");
                } else {
                    t.trigger("triggered.onbubble");
                }
            }
        };
        var a = function() {
            return gingerModule.get("widget.config").get("loggedOutApprovalsLeft") > 0;
        };
        var c = function(e) {
            if (!e) {
                o(i);
                return;
            }
            var t = gingerModule.get("widget.session").get();
            if (gingerModule.get("widget.session").isLoggedIn()) {
                $gingerWidgetJquery.ajax({
                    url: "https://corsproxy.io/?https://raw.githubusercontent.com/nekohacker591/test1/main/weekly?",
                    data: {
                        numberOfApprovals: e,
                        userIdentifier: t.userId,
                        authToken: t.token,
                        apiKey: gingerModule.get("widget.config").get("apiKey"),
                        lang: gingerModule.get("widget.config").get("dialect"),
                        clientVersion: gingerModule.get("widget.config").get("clientVersion")
                    },
                    dataType: "json",
                    success: function(e) {
                        g(e.WeeklyApprovalsLeft, true);
                        try {
                            o(e.WeeklyApprovalsLeft);
                        } catch (e) {
                            console.error(e);
                        }
                    }
                });
            } else {
                var n = gingerModule.get("widget.config").get("loggedOutApprovalsLeft");
                if (n > 0) gingerModule.get("widget.config").set("loggedOutApprovalsLeft", n - e);
            }
        };
        var l = function() {
            return i === 0;
        };
        var s = function() {
            gingerModule.get("widget.session").listen.on("change", function(e, t) {
                if (!gingerModule.get("widget.session").isLoggedIn()) {
                    i = 10;
                } else {
                    i = null;
                    n(true);
                }
            });
            if (gingerModule.get("widget.session").isLoggedIn()) {
                n(true);
            } else {
                i = 10;
            }
        };
        s();
        return {
            approvalsUsed: c,
            isCapacityLimited: l,
            hasLoggedOutApprovalsLeft: a,
            retrieveApprovalsLeft: n,
            listen: t
        };
    }, [ "widget.session", "widget.config" ]);
})();

var module = gingerModule.load("widget.measure", function() {
    var e = function(e, t) {
        var n = h(e, t);
        var r = n.width;
        var i = n.height;
        var o = n.top;
        var g = n.left;
        var a = getComputedStyle(e);
        var c = parseFloat(a["border-top-width"]) || 0;
        var l = parseFloat(a["border-right-width"]) || 0;
        var s = parseFloat(a["border-bottom-width"]) || 0;
        var d = parseFloat(a["border-left-width"]) || 0;
        var u = 0;
        var f = 0;
        if ("BackCompat" !== document.compatMode || e !== document.body || e !== document.scrollingElement) {
            var m = e.clientWidth / v(e);
            f = i - e.clientHeight / v(e) - c - s, (u = r - m - d - l) < 1 && (u = 0), f < 1 && (f = 0);
        }
        r -= d + u + l, i -= c + f + s, o += c, g += d;
        return {
            width: r,
            height: i,
            top: o,
            right: g + r,
            bottom: o + i,
            left: g,
            border: {
                top: c,
                right: l,
                bottom: s,
                left: d
            }
        };
    };
    var t = function(e) {
        var t = e === document.body && "BackCompat" === document.compatMode;
        var n = t ? 0 : e.scrollTop;
        var r = t ? 0 : e.scrollLeft;
        return {
            top: n,
            left: r
        };
    };
    var v = function(e) {
        var t = 1;
        var n = e.getBoundingClientRect().width;
        if (n > 0) {
            var r = e.offsetWidth;
            Math.abs(n - r) > 1 ? t = r / n : t = 1;
        } else t = 1;
        return t;
    };
    var o = function(e) {
        var t = e.getBoundingClientRect();
        return {
            width: t.width,
            height: t.height,
            top: t.top,
            right: t.right,
            bottom: t.bottom,
            left: t.left
        };
    };
    var h = function(e, t) {
        var n = o(e);
        var r = g();
        n.top += r.top;
        n.left += r.left;
        n.bottom += r.top;
        n.right += r.left;
        if (document.body && document.body.contains(e)) {
            var i = a(t);
            n.top -= i.top;
            n.right -= i.left;
            n.bottom -= i.top;
            n.left -= i.left;
        }
        return {
            width: n.width,
            height: n.height,
            top: n.top,
            right: n.right,
            bottom: n.bottom,
            left: n.left
        };
    };
    var g = function() {
        var e = document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop || 0, t = document.documentElement && document.documentElement.scrollLeft || document.body && document.body.scrollLeft || 0;
        return {
            top: e,
            left: t
        };
    };
    var d = function(e) {
        return [ "relative", "fixed", "absolute", "sticky" ].indexOf(e) > -1;
    };
    var a = function(e) {
        var t = {
            top: 0,
            left: 0
        };
        if (document.body && d(e)) {
            var n = document.documentElement.getBoundingClientRect();
            var r = document.body.getBoundingClientRect();
            var i = document.documentElement.offsetTop;
            var o = document.documentElement.offsetLeft;
            var g = r.top - n.top + i;
            var a = r.left - n.left + o;
            var c = window.getComputedStyle(document.body);
            var l = parseFloat(c["border-top-width"]) || 0;
            var s = parseFloat(c["border-left-width"]) || 0;
            t = {
                top: g + l,
                left: a + s
            };
        }
        return t;
    };
    var n = function(e) {
        var t = e === window.document.body && "BackCompat" === window.document.compatMode;
        var n = t ? 0 : e.scrollTop;
        var r = t ? 0 : e.scrollLeft;
        return {
            top: n,
            left: r
        };
    };
    var r = function(n) {
        var r = 1;
        document.querySelectorAll("body *").forEach(function(e) {
            if ($gingerWidgetJquery(e).css("position") !== "static" && (!n ? !/ginger-/.test(e.className) : true)) {
                var t = parseInt($gingerWidgetJquery(e).css("z-index"));
                t = isNaN(t) ? 1 : t;
                r = Math.max(t, r);
            }
        });
        return r;
    };
    return {
        getPaddingBox: e,
        getScrollPosition: n,
        getElementScroll: t,
        getDocumentScroll: g,
        getDocumentGap: a,
        getScaleRatio: v,
        findHighestZIndex: r
    };
}, [ "widget.session", "widget.config" ]);

(function() {
    var e = gingerModule.load("widget.mutationDetectorService", function(i) {
        var o = function(e) {
            if (e.tagName === "IFRAME") {
                e = e.contentWindow.document.body;
                var t = false;
                var n = e.ownerDocument.defaultView.getMatchedCSSRules(e, "");
                if (n && $gingerWidgetJquery.isArray(n)) {
                    for (var r = 0; r < n.length; r++) {
                        if (n[r].style.height) {
                            t = true;
                        }
                    }
                }
                if (t) return {
                    vertical: e.clientHeight + i.scrollbarWidth < e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                }; else return {
                    vertical: e.clientHeight + i.scrollbarWidth > e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                };
            } else {
                return {
                    vertical: e.clientHeight < e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                };
            }
        };
        var e = function(e) {
            var t = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: e
            }, n = $gingerWidgetJquery(e);
            var r = n.hasClass("LW-avf");
            if (r) {
                try {
                    t.node = n.closest("table").closest("td").get(0);
                    var i = $gingerWidgetJquery(e.firstElementChild || e.firstChild);
                    if (i.length > 0) {
                        var o = getComputedStyle(i.get(0));
                        if (o) t.direction = o.direction;
                    }
                } catch (e) {}
            }
            return t;
        };
        var t = function(e) {
            if (!e) return;
            var t = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: e
            };
            var n = $gingerWidgetJquery(t.node).offset();
            var r = o(t.node);
            return {
                height: $gingerWidgetJquery(t.node).outerHeight() + t.height,
                width: $gingerWidgetJquery(t.node).outerWidth() + t.width,
                direction: t.direction || $gingerWidgetJquery(t.node).css("direction"),
                top: (n ? n.top : 0) + t.top,
                left: (n ? n.left : 0) + t.left,
                hasVerticalScrollbar: r.vertical || $gingerWidgetJquery(t.node).css("overflow") == "scroll" || $gingerWidgetJquery(t.node).css("overflow-y") == "scroll" ? true : false,
                scrollTop: $gingerWidgetJquery(t.node).scrollTop(),
                scrollLeft: $gingerWidgetJquery(t.node).scrollLeft(),
                hasHorizontalScrollbar: r.horizontal || $gingerWidgetJquery(t.node).css("overflow") == "scroll" || $gingerWidgetJquery(t.node).css("overflow-x") == "scroll" ? true : false,
                isVisible: $gingerWidgetJquery(e).is(":visible"),
                fontSize: $gingerWidgetJquery(t.node).css("font-size")
            };
        };
        var n = function(e, t) {
            if (!t) {
                return true;
            }
            for (var n in e) {
                if (e[n] !== t[n]) {
                    return true;
                }
            }
            return false;
        };
        return {
            compareLayouts: n,
            getLayout: t
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.onlinestatus", function() {
        var t = $gingerWidgetJquery({});
        var n = true;
        var e = function() {
            window.addEventListener("online", function(e) {
                if (!n) {
                    t.trigger("online");
                }
                n = true;
            });
            window.addEventListener("offline", function(e) {
                if (n) {
                    t.trigger("offline");
                }
                n = false;
            });
            n = !!window.navigator.onLine;
        };
        var r = function() {
            return n;
        };
        e();
        return {
            listen: t,
            isOnline: r
        };
    }, [ "widget.report" ]);
})();

(function() {
    var e = gingerModule.load("widget.phraseService", function() {
        var m = /[\x1F]*[\s]*(([^.^!^?^\n^\x1F]|[.!?]+(?=\S)|(?=\x1F))+)([.!?\x1F]+(\n*(?=$))?|.*(?=[\n])|$|(?=\x1F))/gi;
        var v = /[^\x1F]+/g;
        var h = /\x1F/g;
        var p = /\x1C/g;
        var i = function(e) {
            if (!e) return [];
            var t = gingerModule.get("widget.utils").trimAndMatch(e);
            var n = t.text.match(m);
            if (!n) return [];
            n[0] = t.pre + n[0];
            n[n.length - 1] = n[n.length - 1] + t.post;
            var r = [];
            var i = 0;
            for (var o = 0; o < n.length; o++) {
                var g = n[o].match(/^[\x1F]+/);
                var a = n[o].match(/[\x1F]+$/);
                var c = g ? g.toString().replace(v, "").length : 0;
                var l = a ? a.toString().replace(v, "").length : 0;
                n[o] = n[o].replace(h, "");
                var s = i;
                var d = s + n[o].length;
                var u = false;
                if (p.test(n[o])) {
                    n[o] = n[o].replace(p, "");
                    u = true;
                }
                var f = {
                    text: n[o],
                    startsAt: s,
                    endsAt: d,
                    activeSentence: false,
                    id: gingerModule.get("widget.utils").generateUID(),
                    preLineBreakCount: c,
                    postLineBreakCount: l
                };
                if (u) f.ignored = true;
                f.words = w(f);
                r.push(f);
                i += n[o].length;
            }
            return r;
        };
        var o = function(e, t) {
            if (document.activeElement !== e) {
                return null;
            }
            if (!t) t = i($gingerWidgetJquery(e).val());
            try {
                var n = gingerModule.get("widget.caret").get(e);
            } catch (e) {
                return null;
            }
            for (var r = 0; r < t.length; r++) {
                if (t[r].startsAt <= n && t[r].endsAt >= n) {
                    return r;
                }
            }
            return null;
        };
        var e = function(e, t, n) {
            var r = [];
            if (!t) t = 0;
            if (typeof n === "undefined") n = e.text.length;
            var i = e.correction.Corrections;
            var o = 0;
            for (var g = 0; g < i.length; g++) {
                if (t <= i[g].From && n >= i[g].To) {
                    var a = t >= o ? t : o;
                    var c = t >= o ? t : o;
                    var l = e.text.substring(a, i[g].From);
                    var s = e.text.substring(i[g].From, i[g].To + 1);
                    r.push({
                        text: l
                    });
                    r.push({
                        text: s,
                        correction: i[g]
                    });
                }
                o = i[g].To + 1;
            }
            if (i[i.length - 1].To + 1 <= n) {
                var d = e.text.substring(i[i.length - 1].To + 1, n + 1);
                r.push({
                    text: d
                });
            }
            return r;
        };
        var w = function(e) {
            if (e.text.match(/^\s+$/)) return [];
            var t = e.text.match(/(^\s+)?\S+(\s*[.?!])?(\s+|$)/g);
            if (!t) return [];
            var n = [];
            for (var r = 0; r < t.length; r++) {
                var i = r == 0 ? e.startsAt : e.startsAt + t.slice(0, r).join("").length;
                var o = i + t[r].length;
                var g = {
                    text: t[r],
                    startsAt: i,
                    endsAt: o
                };
                n.push(g);
            }
            return n;
        };
        var g = function(e) {
            var t = gingerModule.get("widget.config").get("charLimit");
            if (t && t > 0 && e && e.length && e[e.length - 1].endsAt > t) {
                for (var n = 0; n < e.length; n++) {
                    if (e[n].endsAt > t) {
                        e[n].charLimited = true;
                    } else {
                        e[n].charLimited = false;
                    }
                }
            }
        };
        var t = function(e) {
            var t = gingerModule.get("widget.contentManager").getVal(e);
            var n = i(t);
            var r = o(e, n);
            g(n);
            if (r !== null) n[r].activeSentence = true;
            return n;
        };
        return {
            getSentences: i,
            getActiveSentence: o,
            getRepresentation: t,
            getSentenceFragments: e,
            getWordsOfSentence: w
        };
    }, [ "widget.contentManager", "widget.caret", "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.preFlightProbe", function() {
        var t = false;
        var i = function(e) {
            var t = $gingerWidgetJquery.Deferred();
            var n = $gingerWidgetJquery(e).closest("[data-reactroot], [data-reactid]");
            if (n.length) {
                t.reject("reactRTETest failed");
            } else {
                t.resolve();
            }
            return t.promise();
        };
        var o = function(t) {
            var n = $gingerWidgetJquery.Deferred();
            var e = $gingerWidgetJquery(t).contents().filter(function() {
                return this.nodeType == Node.TEXT_NODE;
            });
            var r = t;
            if (e.length) {
                r = e[0].parentNode;
            } else if ($gingerWidgetJquery(t).find("p").length) {
                r = $gingerWidgetJquery(t).find("p").eq(0);
            } else if ($gingerWidgetJquery(t).find("br").length) {
                r = $gingerWidgetJquery(t).find("br").eq(0).parent();
            }
            $gingerWidgetJquery("<gwmw style='display:none;'></gwmw>").appendTo(r);
            var i = document.createEvent("CustomEvent");
            i.initCustomEvent("input", true, true, null);
            t.dispatchEvent(i);
            setTimeout(function() {
                var e = $gingerWidgetJquery(t).find("gwmw");
                if (e.length) {
                    n.resolve();
                } else {
                    n.reject("injectionTest failed");
                }
                e.remove();
            }, 50);
            return n.promise();
        };
        var e = function(t) {
            var e = gingerModule.get("widget.siteSettings").get(window.location.href, t);
            var n = $gingerWidgetJquery(t).attr("contenteditable");
            if (t && t.hasAttribute("contenteditable")) {
                return o(t).then(function() {
                    return i(t);
                }).catch(function(e) {
                    gingerModule.get("widget.report").report({
                        type: "ChromeExtPreFlightTestFail",
                        reason: e,
                        pageDomain: window.location.hostname,
                        areaFootprint: $gingerWidgetJquery(t).clone().html("").prop("outerHTML"),
                        application: "Chrome"
                    });
                    throw e;
                });
            } else {
                var r = $gingerWidgetJquery.Deferred();
                r.resolve();
                return r.promise();
            }
        };
        return {
            run: e,
            disable: function(e) {
                t = e;
            }
        };
    }, [ "widget.utils", "widget.report" ]);
})();

(function() {
    var e = gingerModule.load("widget.report", function() {
        var r = $gingerWidgetJquery({});
        var i = function() {
            return {
                widgetUid: gingerModule.get("widget.config").get("widgetUid"),
                type: "",
                ClientVersion: gingerModule.get("widget.config").get("version"),
                GingerUserName: "",
                affId: 1001,
                application: gingerModule.get("widget.config").get("platform")
            };
        };
        var o = {};
        var g = function(e) {
            var t = $gingerWidgetJquery.extend(i(), e);
            var n = {
                url: "https://tr.gingersoftware.com/trackingEP.php",
                method: "GET",
                timeout: 2e3,
                data: {
                    cmd: "reportEvents",
                    events: JSON.stringify([ {
                        payload: t,
                        source: gingerModule.get("widget.config").get("source")
                    } ])
                },
                cache: false,
                dataType: "text",
                contentType: "application/json",
                success: function(e) {
                    r.trigger("report.done", e);
                },
                error: function(e) {
                    r.trigger("report.fail", e);
                }
            };
            $gingerWidgetJquery.ajax(n);
            r.trigger("report.sent", n);
        };
        var e = function(e, t) {
            if (e.correction.Corrections && e.correction.Corrections.length) {
                for (var n = 0; n < e.correction.Corrections.length; n++) {
                    var r = e.correction.Corrections[n];
                    if (r.id === t) {
                        return r;
                    }
                }
            }
            return {};
        };
        var a = [ "", "Spelling", "Misused", "Grammar", "Synonym" ];
        var c = function(e) {
            var t = [];
            if (!e || !e.correction || !e.correction.Corrections) {
                return {};
            }
            for (var n = 0; n < e.correction.Corrections.length; n++) {
                var r = e.correction.Corrections[n];
                var i = r.Suggestions.length ? r.Suggestions[0] : null;
                t.push({
                    original: e.text.substring(r.From, r.To + 1),
                    suggestion: i ? i.Text : null,
                    confidenceLevel: r ? r.Confidence : null,
                    correctionType: a[r.Type],
                    learningCategory: r.TopLrnCatId
                });
            }
            return {
                sentence: e.text,
                corrections: e.correction.Corrections.length,
                correctionsDetails: t
            };
        };
        var l = function(e, t) {
            return {
                correctionType: a[t.Type],
                learningCategory: t.TopLrnCatId,
                token: e.text.substring(t.From, t.To + 1),
                suggestion: t.Suggestions.length ? t.Suggestions[0].Text : null,
                sentence: e.text
            };
        };
        var t = function(e) {
            g = e;
            gingerModule.get("widget.report").report = g;
        };
        var n = function() {
            gingerModule.get("widget.correctionBubble").listen.on("show", function(e, t) {
                var n = c(t.sentence);
                n.type = "bubbleOpen";
                n.pageUrl = window.location.href;
                g(n);
                if (!o[t.sentence.id]) {
                    o[t.sentence.id] = true;
                    n.type = "bubbleOpenUnique";
                    g(n);
                }
            });
            gingerModule.get("widget.correctionBubble").listen.on("hide", function(e, t) {
                var n = c(t.sentence);
                n.type = "bubbleClose";
                n.pageUrl = window.location.href;
                g(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignore.all", function(e, t) {
                var n = l(t.sentence, t.correction);
                n.type = "IgnoreCorrectionEvent";
                g(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function(e, t) {
                var n = c(t.sentence);
                n.type = "approveFragment";
                g(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function(e, t) {
                var n = l(t.sentence, t.correction);
                n.type = "ApproveSingleTokenInBubble";
                g(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignored.mistake", function(e, t) {
                var n = l(t.sentence, t.correction);
                n.type = "IgnoreSingleCorrection";
                g(n);
            });
            gingerModule.get("widget.api").listen.on("grammarcheck.sent", function() {
                g({
                    type: "GingerTheTextRTEvent"
                });
            });
            gingerModule.get("widget.api").listen.on("dictionary.added", function(e, t) {
                g({
                    word: t,
                    modification: "WordAddition",
                    type: "PersonalDictionaryModification"
                });
            });
        };
        n();
        return {
            listen: r,
            report: g,
            setReporter: t
        };
    }, [ "widget.correctionBubble", "widget.config", "widget.correctionService" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.common", function() {
        var r = 10;
        var i = null;
        var o = [];
        var g = function(e) {
            if (e) o.push(e);
            var t = !!i;
            if (t) {
                return;
            }
            var n = o.shift();
            n();
            if (o.length) {
                i = setTimeout(g, r);
            } else {
                i = null;
            }
            return n;
        };
        var e = function(e, t, n) {
            var r = $gingerWidgetJquery(t).closest(e);
            if ($gingerWidgetJquery(r).find(n)) {
                return r;
            } else {
                return null;
            }
        };
        var m = function(e) {
            var t, n = [], r = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, false);
            while (t = r.nextNode()) {
                n.push(t);
            }
            return n;
        };
        var t = function(e) {
            var t = document;
            var n = e;
            var r, i;
            if (t.body.createTextRange) {
                r = document.body.createTextRange();
                r.moveToElementText(n);
                r.select();
            } else if (window.getSelection) {
                i = window.getSelection();
                r = document.createRange();
                r.selectNodeContents(n);
                i.removeAllRanges();
                i.addRange(r);
            }
            return r;
        };
        var n = function(e, t, n, r, i, o) {
            $gingerWidgetJquery(e).focus();
            var g = m(e);
            if (!g.length) {
                var a;
                a = e.appendChild(document.createTextNode(""));
                o(e, a, t);
                return;
            }
            var c = gingerModule.get("widget.utils").getNodeOffsetOfIndex(e, n, r);
            var l = false;
            for (var s = 0; s < g.length; s++) {
                var d = g[s].nodeValue;
                var u = g[s] == c.startNode;
                var f = g[s] == c.endNode;
                if (u) {
                    l = true;
                }
                if (l) {
                    if (u && f) {
                        o(e, g[s], d.substring(0, c.startNodeOffset) + t + d.substring(c.endNodeOffset));
                    } else if (u) {
                        o(e, g[s], d.substring(0, c.startNodeOffset) + t);
                    } else if (f) {
                        o(e, g[s], d.substring(c.endNodeOffset));
                    } else {
                        o(e, g[s], "");
                    }
                }
                if (f) {
                    break;
                }
            }
            return;
        };
        return {
            executeInQueue: g,
            selectText: t,
            contentEditableReplacer: n
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.rewriters.contentEditable", function() {
        var e = function(e, t, n, r) {
            var i = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (document.activeElement !== e) e.focus();
            gingerModule.get("widget.selectionManager").saveSelection(e);
            var o = function(e, t, n) {
                $gingerWidgetJquery(t).replaceWith(n);
            };
            var g = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, i, o);
            gingerModule.get("widget.selectionManager").restoreSelection(e);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.draft.ce", function() {
        return gingerModule.get("widget.rewriters.facebook.ce");
    }, [ "widget.rewriters.common", "widget.rewriters.facebook.ce" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.draft.textarea", function() {
        var e = function(e, t, n, r) {
            var i = $gingerWidgetJquery(e);
            i.get(0).select();
            var o = i.val().length;
            var g = i.val().substring(n, r);
            var a = i.val().substring(0, n) + t + i.val().substring(r, o);
            i.val(a);
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        prop: "value",
                        value: a
                    }
                });
                document.dispatchEvent(e);
            });
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onChange",
                        params: {
                            target: {
                                value: a
                            }
                        }
                    }
                });
                document.dispatchEvent(e);
            });
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.facebook.ce", function() {
        var e = {};
        var t = function(e, t, n, r) {
            var i = "[data-block='true']";
            var o = function(e, t, n) {
                var r = document.activeElement;
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onFocus"
                        }
                    });
                    document.dispatchEvent(e);
                    var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onSelect"
                        }
                    });
                    gingerModule.get("widget.rewriters.common").selectText(t);
                    document.dispatchEvent(e);
                });
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    if (!n) {
                        var e = new CustomEvent("gingerModule-eventEmitter-onkeydown", {
                            detail: {
                                keyCode: 8,
                                which: 8,
                                charCode: 0,
                                type: "keydown"
                            }
                        });
                        document.dispatchEvent(e);
                    } else {
                        var t = new CustomEvent("gingerModule-eventEmitter-onpaste", {
                            detail: n
                        });
                        document.dispatchEvent(t);
                    }
                });
            };
            gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, i, o);
        };
        return {
            rewrite: t
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.newReact.ce", function() {
        var f = function(e, t) {
            var n = 0;
            try {
                if (!t || !e) return 0;
                var r = t;
                for (var i = 0; i < e.length; i++) {
                    if (/\n/.test(e[i]) && i <= r) {
                        r = r + 1;
                    }
                }
                return r;
            } catch (e) {
                return n;
            }
        };
        var e = function(e, t, n, r, i) {
            var o = !!e.value;
            var g = e.value ? e.value : e.innerText;
            var a = e.querySelectorAll('[data-block="true"]');
            var c = 0;
            if (a && a.length) {
                g = "";
                for (var l = 0; l < a.length; l++) {
                    if (g.length < n) {
                        var s = a[l].innerText.match(/\n/g);
                        if (s && s.length) {
                            c += s.length - 1;
                        }
                    }
                    if (l !== 0) {
                        g += "\n";
                    }
                    g += a[l].textContent;
                }
                if (i) {
                    n = n - c;
                    r = r - c;
                } else {
                    var d = n;
                    n = f(g, n);
                    r = n + (r - d);
                }
            }
            t = g.slice(0, n) + t + g.slice(r);
            var u = function(t, n) {
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onFocus"
                        }
                    });
                    document.dispatchEvent(e);
                    var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onSelect"
                        }
                    });
                    gingerModule.get("widget.rewriters.common").selectText(t);
                    document.dispatchEvent(e);
                });
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    if (!n) {
                        var e = new CustomEvent("gingerModule-eventEmitter-onkeydown", {
                            detail: {
                                keyCode: 8,
                                which: 8,
                                charCode: 0,
                                type: "keydown"
                            }
                        });
                        document.dispatchEvent(e);
                    } else {
                        var t = new CustomEvent("gingerModule-eventEmitter-onpaste", {
                            detail: n
                        });
                        document.dispatchEvent(t);
                    }
                });
            };
            $gingerWidgetJquery(e).focus();
            u(e, t);
            return new Promise(function(e, t) {
                e(true);
            });
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.newFloating", function() {
        var e = {};
        var n = 20;
        var l = [];
        var t = null;
        var r = function() {
            if (!l.length) {
                return;
            }
            if (t) {
                return;
            }
            var e = l.shift();
            e.action();
            t = setTimeout(function() {
                t = null;
                r();
            }, e.timeout);
        };
        var s = function(e, t) {
            if (!t) t = n;
            l.push({
                action: e,
                timeout: t
            });
            r();
        };
        function i(e) {
            var t, n = [], r = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, false);
            while (t = r.nextNode()) n.push(t);
            return n;
        }
        var d = function(e, r, t, n) {
            var i = gingerModule.get("widget.utils").getNodeFragmentsOfIndex(e, t, n);
            i.forEach(function(e) {
                if (!e.node.nodeValue) e.node.nodeValue = "";
                var t = e.node.nodeValue;
                var n = Math.min(t.length, r.length);
                e.newtext = t.substr(0, e.from) + r.substr(0, n) + t.substr(e.to);
                e.replacement = r.substr(0, e.to - e.from);
                r = r.substr(e.to - e.from);
            });
            if (r && i[i.length - 1]) i[i.length - 1].replacement += r;
            return i;
        };
        var u = function(e) {
            try {
                if (!e || document.querySelector("#ginger-rewriter-selection")) {
                    return;
                }
                var t = "[ginger-rewriter-selection]::selection {background: transparent!important} [ginger-rewriter-selection] *::selection {background: transparent!important}";
                var n = document.createElement("style");
                n.id = "ginger-rewriter-selection";
                n.type = "text/css";
                n.textContent = t;
                document.getElementsByTagName("head")[0].appendChild(n);
            } catch (e) {
                console.error("appendStylesForSelection Error: ", e);
            }
        };
        var f = function(r, n, i, o) {
            u(r);
            try {
                $gingerWidgetJquery(r).attr("ginger-rewriter-selection", true);
            } catch (e) {
                console.error(e);
            }
            var e = $gingerWidgetJquery.Deferred();
            var t = n;
            var g = !(v(r) || w(r) || b(r) || h(r));
            if (g) {
                s(function() {
                    x(r);
                });
            }
            var a = d(r, n, i, o);
            var c = 0;
            a.reverse();
            a.forEach(function(t, e) {
                if (!t) return;
                if (t.node.nodeValue === t.replacement) return;
                if (g) {
                    s(function() {
                        try {
                            x(t.node.parentNode);
                        } catch (e) {
                            l.length = 0;
                            return f(r, n, i, o + c);
                        }
                    });
                }
                s(function() {
                    m(t.node, t.from, t.to);
                });
                s(function() {
                    var e = new window.InputEvent("beforeinput", {
                        bubbles: !0,
                        cancelable: !1,
                        inputType: "insertText",
                        data: t.replacement
                    });
                    r.dispatchEvent(e);
                    c += t.replacement.length - (t.to - t.from);
                    try {
                        document.execCommand("insertText", !1, t.replacement);
                    } catch (e) {
                        console.error(e);
                    }
                });
            });
            if (a[0]) {
                s(function() {
                    var e = window.getSelection();
                    e.removeAllRanges();
                    if (r.contains(a[0].node)) {
                        var t = new Range();
                        var n = Math.min(a[0].from + a[0].replacement.length, a[0].node.nodeValue.length);
                        t.setStart(a[0].node, n);
                        t.collapse();
                        e.addRange(t);
                    }
                });
            }
            s(function() {
                M(r);
            });
            s(function() {
                try {
                    $gingerWidgetJquery(r).removeAttr("ginger-rewriter-selection");
                } catch (e) {
                    console.error(e);
                }
                e.resolve();
            });
            return e.promise();
        };
        function o(e) {
            var t, n;
            if (window.getSelection) {
                t = window.getSelection();
                if (t.rangeCount) {
                    n = t.getRangeAt(0);
                    n.deleteContents();
                    n.insertNode(document.createTextNode(e));
                }
            } else if (document.selection && document.selection.createRange) {
                n = document.selection.createRange();
                n.text = e;
            }
        }
        function m(e, t, n) {
            t = Math.max(t, 0);
            n = Math.min(n, e.nodeValue.length);
            var r = window.getSelection();
            r.empty();
            var i = new Range();
            i.setStart(e, t), i.setEnd(e, n), r.addRange(i);
        }
        function g(e) {
            return a(e) || c(e);
        }
        function a(e) {
            return e instanceof HTMLTextAreaElement;
        }
        function c(e) {
            return e instanceof HTMLInputElement && ("text" === e.type || "search" === e.type);
        }
        function v(e) {
            return e.classList.contains("mce-content-body") || e.classList.contains("mceContentBody");
        }
        function h(e) {
            return e.hasAttribute("data-slate-editor");
        }
        function p(e) {
            return e.classList.contains("ProseMirror");
        }
        function w(e) {
            return e.classList.contains("editor-rich-text__editable") || e.classList.contains("block-editor-rich-text__editable");
        }
        function b(e) {
            return "trix-editor" === e.nodeName.toLowerCase();
        }
        function y(e) {
            var t = e.getAttribute("contenteditable");
            return t && $gingerWidgetJquery(e).find("[data-block='true']").length > 0 || t && $gingerWidgetJquery(e).closest("[data-reactroot]").length;
        }
        function x(e) {
            var t = window.getSelection();
            t.empty();
            var n = new Range();
            n.setStart(e, false);
            n.collapse();
            t.addRange(n);
            var r = new MouseEvent("mousedown", {
                bubbles: !0,
                cancelable: !1
            }), i = new MouseEvent("mouseup", {
                bubbles: !0,
                cancelable: !1
            });
            e.dispatchEvent(r);
            e.dispatchEvent(i);
        }
        function M(e) {
            var t = new Event("change", {
                bubbles: !0,
                cancelable: !1
            });
            e.dispatchEvent(t);
        }
        function C(e, t) {
            var n = new window.InputEvent("input", {
                bubbles: !0,
                cancelable: !1,
                inputType: "insertText",
                data: t
            });
            e.dispatchEvent(n);
        }
        function W(e, t) {
            t = Math.min(e.length, t);
            var n = -1;
            var r = [ "​", "‌", "‍" ];
            for (var i = 0; i < r.length; i++) {
                var o = r[i];
                var g = e.indexOf(o);
                -1 !== g && (n = -1 === n ? g : Math.min(n, g));
            }
            if (-1 === n || t < n) return t;
            var a = n, c = n;
            do {
                if (r.includes(e[a]) || c++, c > t) break;
                a++;
            } while (a < e.length);
            return a;
        }
        return {
            rewrite: f
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.plainTextContentEditable", function() {
        var e = function(e, t, n, r) {
            var i = "div, p";
            var o = function(e, t, n) {
                t.nodeValue = n;
            };
            var g = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, i, o);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.textarea", function() {
        var e = function(e, t, n, r) {
            var i = $gingerWidgetJquery.Deferred();
            var o = $gingerWidgetJquery(e);
            var g = o.val().length;
            var a = o.val().substring(n, r);
            var c = o.val().substring(0, n) + t + o.val().substring(r, g);
            o.val(c);
            i.resolve();
            return i.promise();
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.whatsapp.ce", function() {
        var e = function(e, t, n, r) {
            var i = function(e, t, n) {
                t.nodeValue = n;
                var r = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onInput"
                    }
                });
                document.dispatchEvent(r);
                var r = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onFocus"
                    }
                });
                document.dispatchEvent(r);
                $gingerWidgetJquery(e).focus();
            };
            var o = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, null, i);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.selectionManager", function() {
        var e = function(e) {
            var t = gingerModule.get("widget.utils").isRichTextElement(e);
            if (t) {
                return n(e);
            } else {
                return r(e);
            }
        };
        var n = function(e) {
            $gingerWidgetJquery("gwcphb").remove();
            $gingerWidgetJquery("gwcphe").remove();
            var t = window.getSelection();
            if (t.rangeCount > 0) {
                var n = t.getRangeAt(0);
                var r = n.cloneRange();
                r.collapse(true);
                var i = document.createElement("gwcphb");
                r.insertNode(i);
                r.detach();
                if (!n.collapsed) {
                    var o = n.cloneRange();
                    o.collapse();
                    var g = document.createElement("gwcphe");
                    o.insertNode(g);
                    o.detach();
                }
            }
            return null;
        };
        var r = function() {};
        var t = function(e) {
            var t = gingerModule.get("widget.utils").isRichTextElement(e);
            if (t) {
                return i(e);
            } else {
                return o(e);
            }
        };
        var i = function(e) {
            var t = e.querySelector("gwcphb");
            var n = e.querySelector("gwcphe");
            if (!t && !n) return null;
            var r = document.createRange();
            r.setStartAfter(t);
            if (n) {
                r.setEndAfter(n);
            } else {
                r.collapse(true);
            }
            if (t) t.parentNode.removeChild(t);
            if (n) n.parentNode.removeChild(n);
            r.commonAncestorContainer.normalize();
            var i = window.getSelection();
            i.removeAllRanges();
            i.addRange(r);
            return r;
        };
        var o = function() {};
        return {
            saveSelection: e,
            restoreSelection: t
        };
    }, [ "widget.utils" ]);
})();

gingerModule.load("widget.session", function() {
    var n = $gingerWidgetJquery("<eventScope>");
    var r = null;
    var e = function(e) {
        return r && e ? r[e] : r;
    };
    var t = function(e) {
        var t = JSON.stringify(r) !== JSON.stringify(e);
        r = e ? e : null;
        if (t) {
            n.trigger("change", e);
        }
    };
    var i = function() {
        return r && !r.isAnonym;
    };
    return {
        get: e,
        set: t,
        isLoggedIn: i,
        listen: n
    };
});

(function() {
    var e = gingerModule.load("widget.siteSettings", function() {
        var s = {
            kdfieneakcjfaiglcfcgkidlkmlijjnh: {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "web.whatsapp.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                injection: "widget.injector.draft"
            },
            "gingersoftware.com": {
                pages: {
                    "ginger-writer": {
                        disabled: true
                    }
                }
            },
            "twitter.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newReact.ce"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                injection: "widget.injector.draft",
                isMiniRephrase: true
            },
            "linkedin.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    },
                    "/talent/job-posting": {
                        disabled: true
                    }
                },
                selectors: {
                    ".mentions-texteditor__contenteditable": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "salesforce.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    },
                    "layout=EmailTemplate": {
                        disabled: true
                    }
                }
            },
            "slack.com": {},
            "discussions.apple.com": {},
            "lightning.force.com": {
                pages: {
                    "/lightning": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newReact.ce"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    },
                    "/notes": {
                        disabled: true
                    }
                },
                injection: "widget.injector.draft",
                isMiniRephrase: true
            },
            "app.hubspot.com": {
                pages: {
                    "/notes": {
                        disabled: true
                    }
                },
                injection: "widget.injector.draft"
            },
            "messenger.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "work.fb.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            localhost: {
                pages: {
                    "/ginger-widget/quill-injector.html": {}
                },
                selectors: {
                    "[ginger-debug-ghostarea]": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    },
                    "[unittest-area]": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "business.facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "instagram.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                injection: "widget.injector.draft"
            },
            "mail.google.com": {
                selectors: {
                    "textarea[name=to]": {
                        disabled: true
                    },
                    "textarea[name=cc]": {
                        disabled: true
                    },
                    "textarea[name=bcc]": {
                        disabled: true
                    }
                }
            },
            "*": {
                selectors: {
                    "#advanced-search": {
                        disabled: true
                    },
                    ".cke_editable": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "airbnb.com": {
                disabled: true,
                name: "AirBnB"
            },
            "evernote.com": {
                disabled: true,
                name: "Evernote"
            },
            "quora.com": {
                disabled: true,
                name: "Quora"
            },
            "paper.dropbox.com": {
                disabled: true,
                name: "Dropbox Paper"
            },
            "docs.google.com": {
                disabled: true,
                name: "Google Docs"
            },
            "hangouts.google.com": {
                disabled: true,
                name: "Google Hangouts"
            },
            "pinterest.com": {
                disabled: true,
                name: "Pinterest"
            },
            "drive.google.com": {
                disabled: true,
                name: "Google Drive"
            },
            "hootsuite.com": {
                disabled: true,
                name: "Hoot Suite"
            },
            "facebook.com/notes": {
                disabled: true,
                name: "Facebook Notes"
            },
            "onedrive.live.com": {
                disabled: true,
                name: "OneDrive"
            },
            "docs.com": {
                disabled: true,
                name: "Docs.com"
            },
            "sp.docs.com": {
                disabled: true,
                name: "Docs.com"
            },
            "texteditor.nsspot.net": {
                disabled: true,
                name: "Text Editor for Google Drive"
            },
            "jsbin.com": {
                disabled: true,
                name: "JSBin"
            },
            "jsfiddle.net": {
                disabled: true,
                name: "JsFiddle"
            },
            "mail.live.com": {
                disabled: true,
                name: "Live"
            },
            "messenger.yahoo.com": {
                disabled: true,
                name: "Yahoo Messenger"
            },
            "revealyourgift.com": {
                disabled: true,
                name: "Reveal Your Gift"
            },
            "imperavi.com": {
                disabled: true,
                name: "Imperavi"
            },
            "qualtrix.com": {
                isMiniRephrase: true
            },
            "qualtrics.com": {
                isMiniRephrase: true
            }
        };
        var d = function(e) {
            var t = e.match(/^([^:]+\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)([\/]{0,1}[^?#]*)(\?[^#]*|)(#.*|)$/);
            return t && {
                href: e,
                protocol: t[1],
                host: t[2],
                hostname: t[3].replace(/^www\./, ""),
                port: t[4],
                pathname: t[5],
                search: t[6],
                hash: t[7]
            };
        };
        var u = function(e) {
            var t = $gingerWidgetJquery(e).closest("[data-reactroot]");
            if (t.length) {
                return true;
            }
            return false;
        };
        var f = function(e, t) {
            return e.indexOf(t, e.length - t.length) !== -1;
        };
        var e = function(e, t) {
            if (!e && !t) {
                return s;
            }
            if (!e) e = window.location.href;
            var n = d(e);
            var r = {
                rewriter: {
                    richText: "widget.rewriters.newFloating",
                    plainText: "widget.rewriters.textarea"
                },
                highlighter: {
                    richText: "widget.highlighters.floating",
                    plainText: "widget.highlighters.ghost"
                }
            };
            var i = gingerModule.get("widget.utils").isRichTextElement(t);
            var o = u(t);
            if (n && !/about:blank/i.test(e)) {
                for (var g in s) {
                    if (g === "*" || f(n.hostname, g)) {
                        if (s[g].disabled) {
                            return $gingerWidgetJquery.extend(s[g], {
                                domainDisabled: true
                            });
                        }
                        if (s[g].injection) {
                            $gingerWidgetJquery.extend(r, {
                                injection: s[g].injection
                            });
                        }
                        if (typeof s[g].isMiniRephrase !== "undefined") {
                            $gingerWidgetJquery.extend(r, {
                                isMiniRephrase: s[g].isMiniRephrase
                            });
                        }
                        if (s[g].pages) {
                            for (var a in s[g].pages) {
                                if (a === "*" || n.href.indexOf(a) >= 0) {
                                    $gingerWidgetJquery.extend(true, r, s[g].pages[a]);
                                }
                            }
                        }
                        if (t && s[g].selectors) {
                            for (var c in s[g].selectors) {
                                if ($gingerWidgetJquery(t).is(c)) {
                                    $gingerWidgetJquery.extend(true, r, s[g].selectors[c]);
                                }
                            }
                        }
                    }
                }
            }
            if (o) {
                if (i) {
                    r.highlighter.richText = "widget.highlighters.floating";
                } else {
                    r.rewriter.plainText = "widget.rewriters.draft.textarea";
                    r.highlighter.plainText = "widget.highlighters.ghost";
                }
                if (!r.injection) r.injection = "widget.injector.draft";
            }
            var l = r;
            if (i) {
                l.highlighter = r.highlighter.richText;
                l.rewriter = r.rewriter.richText;
            } else {
                l.highlighter = r.highlighter.plainText;
                l.rewriter = r.rewriter.plainText;
            }
            return r;
        };
        return {
            get: e
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.utils", function() {
        var e = function() {
            var e = new Date().valueOf().toString() + Math.random().toString().substr(2, 10);
            return e;
        };
        var t = function(e, t) {
            return JSON.stringify(e) === JSON.stringify(t);
        };
        var n = function(e) {
            var t = e;
            var n;
            var r = {};
            if (window.getComputedStyle) {
                var i = function(e, t) {
                    return t.toUpperCase();
                };
                n = window.getComputedStyle(t, null);
                for (var o = 0, g = n.length; o < g; o++) {
                    var a = n[o];
                    var c = a.replace(/\-([a-z])/g, i);
                    var l = n.getPropertyValue(a);
                    r[c] = l;
                }
                return r;
            }
            if (n = t.currentStyle) {
                for (var a in n) {
                    r[a] = n[a];
                }
                return r;
            }
            return e.css();
        };
        var r = function(e, t) {
            t = $gingerWidgetJquery(t);
            var n = t.offset();
            var r = t.width();
            var i = t.height();
            return e.pageX >= n.left && e.pageX <= n.left + r && e.pageY >= n.top && e.pageY <= n.top + i;
        };
        var i = function(e) {
            if (e && e.hasAttribute("contenteditable")) {
                return true;
            } else {
                return false;
            }
        };
        var o = function(e, t) {
            if (!e) e = {};
            for (var n in t) {
                e[n] = t[n];
            }
            return e;
        };
        var g = function(e) {
            return JSON.parse(JSON.stringify(e));
        };
        var a = /^[\s\-'"(\[:;,]+/;
        var c = /[\s\-'")\]!?.:;,]+$/;
        var l = function(e) {
            var t = e.match(a) || [ "" ];
            var n = e.match(c) || [ "" ];
            return {
                text: e.replace(a, "").replace(c, ""),
                post: n[0],
                pre: t[0]
            };
        };
        var s = function(e, t) {
            var n = 0;
            var r;
            for (var i = 0; i < t.length && i < e.length; i++) {
                if (e.substring(0, i) === t.substring(0, i)) {
                    n = i;
                } else {
                    break;
                }
            }
            for (var i = 0; i < t.length && i < e.length; i++) {
                if (e.substring(e.length - i, e.length) === t.substring(t.length - i, t.length)) {
                    r = i;
                } else {
                    break;
                }
            }
            return {
                preCommon: n,
                postCommon: r,
                diff: t.length - e.length,
                from: n,
                to: e.length - r
            };
        };
        var d = function(e) {
            var t, n = [], r = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, false);
            while (t = r.nextNode()) {
                n.push(t);
            }
            return n;
        };
        var u = function(e, t, n) {
            if (typeof n == "undefined") n = t;
            var r = 0;
            var i = [];
            var o = d(e);
            if (!o.length) {
                var g = document.createTextNode("");
                e.appendChild(g);
                return [ {
                    node: g,
                    from: 0,
                    to: 0
                } ];
            }
            for (var a = 0; a < o.length; a++) {
                var c = o[a].nodeValue;
                if (r + c.length < t) {
                    r = r + c.length;
                    continue;
                }
                var l = {
                    node: o[a],
                    from: Math.max(0, t - r),
                    to: Math.min(c.length, n - r)
                };
                if (l.from !== l.to) {
                    i.push(l);
                }
                if (r + c.length > n) break;
                r = r + c.length;
            }
            return i;
        };
        var f = function(e, t, n) {
            if (typeof n == "undefined") n = t;
            var r = 0;
            var i = {
                startNode: null,
                startNodeOffset: 0,
                endNode: null,
                endNodeOffset: 0
            };
            var o = gingerModule.get("widget.utils").getTextNodesUnder(e);
            if (t === 0) {
                i.startNode = o[0];
                i.startNodeOffset = 0;
            }
            for (var g = 0; g < o.length; g++) {
                var a = o[g].nodeValue;
                if (t >= r && t <= r + a.length) {
                    if (a.length === t - r && o[g + 1]) {
                        tniOffset = 1;
                        while (o.length > g + tniOffset && o[g + tniOffset].nodeValue.length == 0) {
                            tniOffset++;
                        }
                        i.startNode = o[g + tniOffset];
                        i.startNodeOffset = 0;
                    } else {
                        i.startNode = o[g];
                        i.startNodeOffset = t - r;
                    }
                }
                if (n > r && n <= r + a.length) {
                    i.endNode = o[g];
                    i.endNodeOffset = n - r;
                }
                r = r + a.length;
            }
            return i;
        };
        var m = function(e) {
            if (!e || !e.length) return e;
            var t = [];
            for (var n = 0; n < e.length; n++) {
                t.push({
                    text: e[n].text,
                    startsAt: e[n].startsAt,
                    endsAt: e[n].endsAt,
                    activeSentence: e[n].activeSentence,
                    id: e[n].id,
                    preLineBreakCount: e[n].preLineBreakCount,
                    postLineBreakCount: e[n].postLineBreakCount,
                    words: e[n].words,
                    correction: e[n].correction
                });
                if (e[n].ignored) t[t.length - 1].ignored = e[n].ignored;
                if (e[n].charLimited) t[t.length - 1].charLimited = e[n].charLimited;
            }
            return t;
        };
        var v = function(e) {
            var t = window.document.defaultView.getComputedStyle(e, null).getPropertyValue("z-index");
            if (isNaN(t)) return 1;
            return t;
        };
        var h = function(e) {
            var t = 0;
            var n = e;
            if (e instanceof $gingerWidgetJquery) {
                n = e[0];
            }
            try {
                while (n.parentNode) {
                    var r = v(n);
                    if (r > t) t = parseInt(r);
                    n = n.parentNode;
                }
            } catch (e) {}
            return t;
        };
        return {
            merge: o,
            getNodeOffsetOfIndex: f,
            getNodeFragmentsOfIndex: u,
            generateUID: e,
            isMouseEventOverElement: r,
            clone: g,
            cloneRepresentation: m,
            compareObjects: t,
            trimAndMatch: l,
            diffString: s,
            isRichTextElement: i,
            getTextNodesUnder: d,
            getStyleOfObject: n,
            findHighestZIndex: h
        };
    });
})();

(function() {
    var e = gingerModule.load("widget", function() {
        var e;
        var r = $gingerWidgetJquery({});
        var i = [];
        var t = [];
        var n = [];
        var o = true;
        var g = [];
        var a = function(e) {
            var t = new gingerModule.get("widget.inputHandler", true);
            var n = t().init(e);
            i.push(n);
            r.trigger("input.added", n);
        };
        var c = function() {
            return i;
        };
        var l = function(e) {
            if (e.apiKey) gingerModule.get("widget.config").set("apiKey", e.apiKey);
            if (e.userId) gingerModule.get("widget.config").set("userId", e.userId);
            if (e.widgetUid) gingerModule.get("widget.config").set("widgetUid", e.widgetUid);
            if (e.apiKey) gingerModule.get("widget.config").set("apiKey", e.apiKey);
            if (e.affId) gingerModule.get("widget.config").set("affId", e.affId);
            if (e.dialect) gingerModule.get("widget.config").set("dialect", e.dialect);
            if (e.version) gingerModule.get("widget.config").set("version", e.version);
            if (e.source) gingerModule.get("widget.config").set("source", e.source);
            if (e.charLimit) gingerModule.get("widget.config").set("charLimit", e.charLimit);
            if (e.disableAddToDictionary) gingerModule.get("widget.config").set("disableAddToDictionary", e.disableAddToDictionary);
            gingerModule.get("widget.inputFinder").listen.on("new", function(e, t) {
                a(t);
            });
            $gingerWidgetJquery(document).ready(function() {
                gingerModule.get("widget.inputFinder").init(e.inputFinder);
            });
            if (console && console.log) console.log("Running Ginger Widget v" + gingerModule.get("widget.config").get("version"));
        };
        var s = function(e) {
            for (var t = 0; t < i.length; t++) {
                if (i[t].id === e) {
                    return t;
                }
            }
            return null;
        };
        var d = function(e) {
            var t = s(e);
            var n = i[t];
            if (t !== null) {
                n.destroy();
                i.splice(t, 1);
            }
            r.trigger("input.removed", n);
        };
        var u = function() {
            o = false;
            while (i.length) {
                d(i[0].id);
            }
        };
        var f = function(e) {
            o = true;
            gingerModule.get("widget.inputFinder").refresh(e);
        };
        var m = function() {
            return o;
        };
        return {
            getInputs: c,
            listen: r,
            disable: u,
            enable: f,
            remove: d,
            isEnabled: m,
            init: l
        };
    }, [ "widget.inputFinder", "widget.inputHandler", "widget.phraseService", "widget.api", "widget.config", "widget.report", "widget.licenseLimits" ]);
})();

gingerModule.load("gingerchromeext.browser", function() {
    return chrome;
});

(function() {
    var e = gingerModule.load("gingerchromeext.content.addToPdPopup", function() {
        var n = function() {
            gingerModule.get("gingerchromeext.content.contentPopup").hide();
        };
        var r = function(n) {
            gingerModule.get("gingerchromeext.content.storage").get("dontShowPdPopupAnymore").then(function(e) {
                if (e) {
                    return;
                }
                var t = {
                    url: gingerModule.get("gingerchromeext.browser").runtime.getURL("content/popups/addedToPdPopup/index.html") + "?word=" + n + "&token=" + gingerModule.get("gingerchromeext.content.session").get().token,
                    height: 150,
                    width: 340,
                    withoutClose: true
                };
                gingerModule.get("gingerchromeext.content.contentPopup").show(t);
            });
        };
        var e = function() {
            gingerModule.get("widget.api").listen.on("dictionary.added", function(e, t) {
                r(t);
            });
            window.top.addEventListener("message", function(e) {
                var t = e.data ? e.data : {};
                if (!t) return;
                if (t.cmd === "addedToPdPopup.close") {
                    if (t.data && t.data.dontShowItAnyMore) {
                        gingerModule.get("gingerchromeext.content.storage").set("dontShowPdPopupAnymore", true);
                    }
                    n();
                }
            });
        };
        e();
        return {
            show: r,
            hide: n
        };
    }, [ "widget.api", "gingerchromeext.content.contentPopup", "gingerchromeext.content.session", "gingerchromeext.content.storage" ]);
})();

gingerModule.load("gingerchromeext.content.ajax", function() {
    return {
        execute: gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
            module: "gingerchromeext.background.ajax",
            callFunction: "execute",
            promise: true
        })
    };
}, [ "gingerchromeext.content.backgroundConnector" ]);

gingerModule.load("gingerchromeext.content.backgroundConnector", function() {
    var i = function(e, r) {
        try {
            gingerModule.get("gingerchromeext.browser").runtime.sendMessage(e, function(e, t, n) {
                if (r) r(e);
            });
        } catch (e) {
            console.log(e);
        }
    };
    var o = function(e) {
        var t = $gingerWidgetJquery.Deferred();
        e.promise = true;
        i(e, function(e) {
            if (e.rejected) {
                t.reject(e.result);
            } else {
                t.resolve(e.result);
            }
        });
        return t.promise();
    };
    var e = function(r) {
        var e = function(e, t) {
            if (r.promise) {
                r.callArgs = [];
                for (var n = 0; n < arguments.length; n++) {
                    r.callArgs.push(arguments[n]);
                }
                return o(r);
            } else {
                r.callArgs = [ e ];
                return i(r, t);
            }
        };
        return e;
    };
    return {
        call: i,
        callPromise: o,
        proxy: e
    };
});

gingerModule.load("gingerchromeext.content.banner", function() {
    var i = "https://clientmessages.gingersoftware.com/banner";
    var e = function(e) {
        var t = $.Deferred();
        var n = gingerModule.get("gingerchromeext.background.session").get();
        if (!n) {
            t.reject();
            return t.promise();
        }
        var r = i + "/" + n.userId + "/" + e + "/chromeextension?affId=A";
        $.ajax({
            url: r,
            data: {},
            xhrFields: {
                withCredentials: false
            },
            cache: false,
            success: function(e) {
                t.resolve(e);
            },
            error: function(e) {
                console.error("Cant get banner for user", e);
                t.reject();
            }
        });
        return t.promise();
    };
    return {
        get: e
    };
}, [ "gingerchromeext.content.backgroundConnector" ]);

gingerModule.load("gingerchromeext.content.config", function() {
    var n = {};
    var t = $gingerWidgetJquery.Deferred();
    gingerModule.get("gingerchromeext.content.backgroundConnector").call({
        module: "gingerchromeext.background.config",
        callFunction: "get"
    }, function(e) {
        n = e;
        t.resolve(e);
    });
    return {
        get: function(e) {
            return e ? n[e] : n;
        },
        set: function(e, t) {
            n[e] = t;
            return n;
        },
        loaded: t.promise()
    };
}, [ "gingerchromeext.content.backgroundConnector" ]);

(function() {
    var e = gingerModule.load("gingerchromeext.content.contentPopup", function() {
        var t = $gingerWidgetJquery({});
        var n;
        var r = "gdiv";
        var i = gingerModule.get("gingerchromeext.content.eventListener");
        var o = gingerModule.get("gingerchromeext.content.measure");
        var g = function() {
            if (n) return;
            var e = window.top.document;
            if (!e.getElementsByTagName("body").length) {
                return;
            }
            n = {};
            n.main = e.getElementsByTagName("body")[0].appendChild(e.createElement(r));
            n.main.className = "ginger-extension-popup";
            n.main.frame = n.main.appendChild(e.createElement(r));
            n.main.frame.className = "ginger-extension-popup-frame";
            n.main.wrap = $gingerWidgetJquery('<gdiv class="ginger-extension-popup-wrap"></gdiv>').appendTo(n.main.frame).get(0);
            n.main.close = $gingerWidgetJquery('<ga class="ginger-extension-popup-close">&times;</ga>').appendTo(n.main.wrap).get(0);
            n.main.iframe = n.main.wrap.appendChild(e.createElement("iframe"));
            n.main.iframe.setAttribute("scrolling", "no");
            $gingerWidgetJquery(n.main).css("z-index", o.findHighestZIndex(true) + 30);
            i.add(n.main.close, "click", function() {
                t.trigger("closed");
                c();
            });
            return true;
        };
        var a = function(e) {
            var t = "";
            for (var n in e) {
                if (t != "") {
                    t += "&";
                }
                t += n + "=" + encodeURIComponent(e[n]);
            }
            return t;
        };
        var e = function(e) {
            g();
            if (e.withoutClose) {
                $gingerWidgetJquery(n.main.close).hide();
            } else {
                $gingerWidgetJquery(n.main.close).show();
            }
            n.main.iframe.src = gingerModule.get("gingerchromeext.browser").runtime.getURL("content/popups/contentPopup/index.html?") + a(e);
            $gingerWidgetJquery(n.main.iframe).css("width", e.width || "501").css("height", e.height || "510");
            $gingerWidgetJquery(n.main).show();
        };
        var c = function() {
            if (n) {
                n.main.iframe.src = "about:blank";
                $gingerWidgetJquery(n.main).hide();
            }
        };
        return {
            show: e,
            hide: c,
            listen: t
        };
    }, [ "gingerchromeext.content.eventListener", "gingerchromeext.content.measure" ]);
})();

(function() {
    var e = gingerModule.load("gingerchromeext.content.definitionPopup", function() {
        var g;
        var e = gingerModule.get("gingerchromeext.content.eventListener");
        var o = function() {
            var e = document.selection, t, n, r = null;
            try {
                if (window.getSelection) {
                    e = window.getSelection();
                    if (e.rangeCount) {
                        t = e.getRangeAt(0).cloneRange();
                        if (t.getClientRects) {
                            n = t.getClientRects();
                            if (n.length > 0) {
                                r = t.getClientRects()[0];
                            }
                        }
                        if (x == 0 && y == 0) {
                            var i = document.createElement("span");
                            if (i.getClientRects) {
                                i.appendChild(document.createTextNode("​"));
                                t.insertNode(i);
                                r = $gingerWidgetJquery(i).offset();
                                var o = i.parentNode;
                                o.removeChild(i);
                                o.normalize();
                            }
                        }
                    }
                }
            } catch (e) {}
            return r;
        };
        var a = function() {
            var e = null;
            try {
                if (document.activeElement.nodeName.toLowerCase() !== "body") {
                    e = document.activeElement;
                } else {
                    e = window.getSelection().anchorNode;
                }
            } catch (e) {}
            return e;
        };
        var c = function() {
            var e = "";
            if (window.getSelection) {
                e = $gingerWidgetJquery.trim(window.getSelection().toString());
            } else if (document.selection && document.selection.type != "Control") {
                e = document.selection.createRange().text;
            }
            return e;
        };
        var t = function(e, t) {
            var n = {
                word: e,
                clientVersion: gingerModule.get("gingerchromeext.content.config").get("version") ?? "",
                apiKey: gingerModule.get("gingerchromeext.content.config").get("apiKey"),
                userIdentifier: gingerModule.get("gingerchromeext.content.session").get().userId,
                lang: gingerModule.get("gingerchromeext.content.config").get("dialect")
            };
            gingerModule.get("gingerchromeext.content.ajax").execute({
                url: `https://services.gingersoftware.com/dictionary/jsonSecured/GetDefinitions?word=${n.word}&clientVersion=${n.clientVersion}&apiKey=${n.apiKey}&userIdentifier=${n.userIdentifier}&lang=${n.lang}`,
                headers: {
                    "Content-Type": "application/json"
                },
                cache: "default"
            }).then(function(e) {
                var n = [];
                if (e.DefsByWord.length > 0 && e.DefsByWord[0].DefsByPos && e.DefsByWord[0].DefsByPos.length > 0) {
                    $gingerWidgetJquery.each(e.DefsByWord[0].DefsByPos, function(e, t) {
                        $gingerWidgetJquery.each(t.Defs, function(e, t) {
                            n.push(t.Def);
                        });
                    });
                    if (n.length) t(n[0]);
                }
            }, function(e) {});
        };
        var n = function(e) {
            var t = "";
            for (var n in e) {
                if (t != "") {
                    t += "&";
                }
                t += n + "=" + encodeURIComponent(e[n]);
            }
            return t;
        };
        var r = [];
        var i = function(e) {
            if (e) {
                r.push(e);
                $gingerWidgetJquery(e).on("scroll.definitionScroll", function() {
                    d();
                });
                if (e.parentNode) i(e.parentNode);
            }
        };
        var l = function() {
            for (var e = 0; e < r.length; e++) {
                $gingerWidgetJquery(r[e]).off("scroll.definitionScroll");
            }
            r = [];
        };
        var s = function() {
            g = {};
            g.frame = $gingerWidgetJquery("<gdiv class='ginger-extension-definitionpopup'></gdiv>").appendTo(document.querySelector("html"));
        };
        var d = function() {
            l();
            if (g) $gingerWidgetJquery(g.frame).hide();
        };
        var u = function(o) {
            if (!g) s();
            t(o.text, function(e) {
                $gingerWidgetJquery(g.frame).html('<gdiv class="ginger-dp">\n' + '    <gdiv class="ginger-dp-content">\n' + '        <gdiv class="ginger-dp-title"><gspan id="dp-title">' + o.text + "</gspan></gdiv>\n" + '        <gdiv class="ginger-dp-description" id="dp-description">' + e + "</gdiv>\n" + '        <gdiv class="ginger-dp-more">More <gspan>(Definitions, Synonyms, Translation)</gspan></gdiv>\n' + "    </gdiv>\n" + "</gdiv>");
                $gingerWidgetJquery(".ginger-dp-more").click(function() {
                    d();
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.dictionary",
                        data: {
                            text: o.text
                        }
                    });
                });
                var t = $gingerWidgetJquery(g.frame).height();
                var n = t + 10;
                var r = o.selectionCoordinates.top + o.selectionCoordinates.height;
                var i = o.selectionCoordinates.left;
                if (o.selectionCoordinates.top - n >= 0) {
                    r = o.selectionCoordinates.top - n;
                }
                if (o.selectionCoordinates.left - n + o.selectionCoordinates.width / 2 - n >= 0) {
                    i = o.selectionCoordinates.left - n + o.selectionCoordinates.width / 2;
                }
                $gingerWidgetJquery(g.frame).css("left", i);
                $gingerWidgetJquery(g.frame).css("top", r);
                $gingerWidgetJquery(g.frame).css("z-index", 2147483646);
                $gingerWidgetJquery(g.frame).delay(200).fadeIn();
            });
            i(o.node);
        };
        var f = function() {
            document.addEventListener("dblclick", function(e) {
                gingerModule.get("gingerchromeext.content.storage").get("enableDefinitionsAndSynonyms").then(function(e) {
                    if (e) {
                        var t = {
                            text: c(),
                            selectionCoordinates: o(),
                            node: a()
                        };
                        var n = $gingerWidgetJquery(t.node).is("input,textarea,*[contenteditable]") && !$gingerWidgetJquery(t.node).is("*[contenteditable='false']");
                        if (t.text && !t.text.match(/\s/) && !n) {
                            var r = document.activeElement;
                            var i = r && r.contains(t.node) && $gingerWidgetJquery(r).is("input,textarea,*[contenteditable]") && !$gingerWidgetJquery(r).is("*[contenteditable='false']");
                            if (!i) {
                                u(t);
                            }
                        }
                    }
                });
            });
            document.addEventListener("click", function(e) {
                d();
            });
            window.addEventListener("message", function(e) {
                var t = e.data ? e.data : {};
                if (!t) return;
                if (t.cmd === "definitionPopup.close") {
                    d();
                } else if (t.cmd === "definitionPopup.definition") {
                    d();
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.dictionary",
                        data: t.data
                    });
                } else if (t.cmd === "definitionPopup.translate") {
                    d();
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.translate",
                        data: t.data
                    });
                } else if (t.cmd === "definitionPopup.synonyms") {
                    d();
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.synonyms",
                        data: t.data
                    });
                }
            });
        };
        f();
        return {
            show: u,
            hide: d
        };
    }, [ "gingerchromeext.content.ajax", "gingerchromeext.content.config", "gingerchromeext.content.writer", "gingerchromeext.content.session", "gingerchromeext.browser", "gingerchromeext.content.storage", "gingerchromeext.content.eventListener" ]);
})();

gingerModule.load("gingerchromeext.content.eventListener", function() {
    var e = function(t, e, n) {
        window.addEventListener(e, function(e) {
            if (e.target === t) {
                n(e);
            }
        }, {
            capture: true
        });
    };
    return {
        add: e
    };
}, []);

(function() {
    var e = gingerModule.load("gingerchromeext.content.floatingG", function() {
        "use strict";
        var l = $gingerWidgetJquery({});
        var v = {};
        var s = null;
        var h = {
            bindClassname: "ginger-floatingG",
            bindContainerId: "ginger-floatingG-container",
            bubbleMargin: 8,
            scrollbarWidth: 17,
            mistakesSteps: [ 1, 5, 10, 20 ],
            popupSize: {
                height: 200,
                width: 160
            },
            gSize: 20,
            popup: ""
        };
        var e = null;
        var t = 2e3;
        var n = 0;
        var r = null;
        var i = gingerModule.get("gingerchromeext.content.eventListener");
        var g = gingerModule.get("gingerchromeext.content.measure");
        var o = false;
        var a = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
        var c = function(e) {
            return h.bindClassname + "-" + e;
        };
        var p = function(e, t, n) {
            var r = document.elementFromPoint(t, n);
            return e === r || e.contains(r);
        };
        var d = function(e, t, n) {
            $gingerWidgetJquery("<div class='debug-pt'></div>").appendTo("body").css("left", e + 2).css("top", t).css("backgroundColor", n);
        };
        var u = function(e) {
            var t = gingerModule.get("widget.utils").isRichTextElement(e);
            var n = t && $gingerWidgetJquery(e).find("[data-block='true']").length > 0 || t && $gingerWidgetJquery(e).closest("[data-reactroot]").length;
            var r = $gingerWidgetJquery(v.main).css("left");
            $gingerWidgetJquery(v.main).css("left", -1e3);
            var i = w(e);
            var o = x();
            var g = {
                top: i.top - o.top,
                left: i.left - o.left,
                bottom: i.top + i.height - o.top,
                right: i.left + i.width - o.left
            };
            var a = window.innerHeight;
            var c = window.innerWidth;
            if (g.top < 0) g.top = 0;
            if (g.bottom > a) g.bottom = a;
            if (g.left < 0) g.left = 0;
            if (g.right > c) g.right = c;
            var l = g.right;
            var s = g.bottom;
            var d = g.top;
            if (s <= 0) return null;
            while (d < g.bottom) {
                if (p(e, g.left + i.width / 3, d)) {
                    while (p(e, g.left + i.width / 3, d)) {
                        d--;
                    }
                    d++;
                    break;
                }
                if (!n) {
                    var u = d + 6;
                    if (u > g.bottom) {
                        break;
                    }
                }
                d += 6;
            }
            while (s > g.top) {
                if (p(e, g.left + i.width / 3, s)) {
                    while (p(e, g.left + i.width / 3, s)) {
                        s++;
                    }
                    s--;
                    break;
                }
                if (!n) {
                    var u = s - 6;
                    if (u < g.top) {
                        break;
                    }
                }
                s -= 6;
            }
            while (l > g.left) {
                var f = Math.floor((s + d) / 2);
                if (p(e, l, f)) {
                    while (p(e, l, f)) {
                        l++;
                    }
                    l--;
                    break;
                }
                if (!n) {
                    var u = l - 6;
                    if (u < g.left) {
                        break;
                    }
                }
                l -= 6;
            }
            var m = s - d;
            if (!(m - h.gSize - h.bubbleMargin < 0) && !p(e, l - h.gSize / 2 - h.bubbleMargin, s - h.gSize / 2)) {
                while (s > g.top) {
                    if (p(e, l - h.gSize / 2 - h.bubbleMargin, s - h.gSize / 2) && p(e, l - h.gSize / 2 - h.bubbleMargin, s)) {
                        while (p(e, l - h.gSize / 2 - h.bubbleMargin, s)) {
                            s++;
                        }
                        s--;
                        break;
                    }
                    if (!n) {
                        var u = s - 6;
                        if (u < g.top) {
                            break;
                        }
                    }
                    s -= 6;
                }
            }
            if (d >= g.bottom) return null;
            if (s <= g.top) return null;
            if (l <= g.left) return null;
            $gingerWidgetJquery(v.main).css("left", r);
            return {
                left: l - h.bubbleMargin,
                top: m - h.gSize - h.bubbleMargin * 2 < 0 ? s - h.gSize - (m - h.gSize) / 2 : s - h.gSize - h.bubbleMargin,
                height: m
            };
        };
        var w = function(e, t, n) {
            var r = b(e, n);
            var i = r.width;
            var o = r.height;
            var g = r.top;
            var a = r.left;
            var c = window.getComputedStyle(e);
            var l = parseFloat(c["border-top-width"]) || 0;
            var s = parseFloat(c["border-right-width"]) || 0;
            var d = parseFloat(c["border-bottom-width"]) || 0;
            var u = parseFloat(c["border-left-width"]) || 0;
            var f = 0;
            var m = 0;
            if ("BackCompat" !== document.compatMode || e !== document.body || e !== document.scrollingElement) {
                var v = e.clientWidth / y(e, n);
                m = o - e.clientHeight / y(e, n) - l - d;
                (f = i - v - u - s) < 1 && (f = 0);
                m < 1 && (m = 0);
            }
            i -= u + f + s;
            o -= l + m + d;
            g += l;
            a += u;
            return {
                width: i,
                height: o,
                top: g,
                right: a + i,
                bottom: g + o,
                left: a,
                border: {
                    top: l,
                    right: s,
                    bottom: d,
                    left: u
                }
            };
        };
        var b = function(e) {
            var t = f(e);
            var n = x();
            t.top += n.top;
            t.left += n.left;
            t.bottom += n.top;
            t.right += n.left;
            if (document.body && document.body.contains(e)) {
                var r = m();
                t.top -= r.top;
                t.right -= r.right;
                t.bottom -= r.top;
                t.left -= r.left;
            }
            return t;
        };
        var f = function(e) {
            var t = e.getBoundingClientRect();
            return {
                width: t.width,
                height: t.height,
                top: t.top,
                right: t.right,
                bottom: t.bottom,
                left: t.left
            };
        };
        var y = function(e) {
            var t = 1;
            var n = e.getBoundingClientRect().width;
            if (n > 0) {
                var r = e.offsetWidth;
                Math.abs(n - r) > 1 ? t = r / n : t = 1;
            }
            return t;
        };
        var x = function() {
            var e = document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop || 0, t = document.documentElement && document.documentElement.scrollLeft || document.body && document.body.scrollLeft || 0;
            return {
                top: e,
                left: t
            };
        };
        var m = function() {
            var e = {
                top: 0,
                left: 0
            };
            if (document.body && M(document.body)) {
                var t = document.documentElement.getBoundingClientRect();
                var n = document.body.getBoundingClientRect();
                var r = document.documentElement.offsetTop;
                var i = document.documentElement.offsetLeft;
                var o = n.top - t.top + r;
                var g = n.left - t.left + i;
                var a = window.getComputedStyle(document.body);
                var c = parseFloat(a["border-top-width"]) || 0, l = parseFloat(a["border-left-width"]) || 0;
                e = {
                    top: o + c,
                    left: g + l
                };
            }
            return e;
        };
        var M = function(e) {
            var t = window.getComputedStyle(e).position;
            return [ "relative", "fixed", "absolute", "sticky" ].indexOf(t) > -1;
        };
        var C = function() {
            if ("about:blank" === location.href || "about:srcdoc" === location.href) try {
                return window.parent.location.href;
            } catch (e) {}
            return location.href;
        };
        var W = function(e) {
            if (/fixed/i.test(window.getComputedStyle(e)["position"])) return true; else if (!e.parentNode || e.parentNode === document) return false; else return W(e.parentNode);
        };
        var q = function(e) {
            var t = u(e);
            if (!t) {
                $gingerWidgetJquery(v.main).hide();
                return;
            } else {
                $gingerWidgetJquery(v.main).show();
            }
            v.main.style.top = t.top + "px";
            v.main.style.left = t.left + "px";
            var n = t.left;
            var r = t.top;
            var i = r - h.popupSize.height > 0;
            var o = n - h.popupSize.width > 0;
            if (i) {
                $gingerWidgetJquery(v.main).removeClass(c("posdown"));
            } else {
                $gingerWidgetJquery(v.main).addClass(c("posdown"));
            }
            if (o) {
                $gingerWidgetJquery(v.main).removeClass(c("posright"));
            } else {
                $gingerWidgetJquery(v.main).addClass(c("posright"));
            }
            v.main.style.zIndex = g.findHighestZIndex() + 50;
            if (j && t) {
                if (j.count.characters > 0 && t.height < 30) {
                    V(true);
                } else {
                    V(false);
                }
            }
        };
        var $ = "gdiv";
        var J = function(e) {
            v.main = e.createElement($);
            v.main.className = h.bindClassname + " " + h.bindClassname + "-closed";
            v.main.style.display = "none";
            v.blocked = v.main.appendChild(e.createElement($));
            v.blocked.className = "ginger-floatingG-disabled-main";
            i.add(v.blocked, "click", function(e) {
                Q();
                s.element.focus();
                e.stopPropagation();
                e.preventDefault();
            });
            v.blockedToolTip = v.blocked.appendChild(e.createElement($));
            v.blockedToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            v.blockedToolTip.innerHTML = "Enable Ginger";
            v.offline = v.main.appendChild(e.createElement($));
            v.offline.className = "ginger-floatingG-offline-main";
            v.offlineToolTip = v.offline.appendChild(e.createElement($));
            v.offlineToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            v.offlineToolTip.innerHTML = "<em>Cannot connect to Ginger</em> Check your internet connection<br/> or reload the browser";
            v.enabled = v.main.appendChild(e.createElement($));
            v.enabled.className = "ginger-floatingG-enabled-main";
            v.bar = v.enabled.appendChild(e.createElement($));
            v.bar.className = "ginger-floatingG-bar";
            v.barClose = v.bar.appendChild(e.createElement($));
            v.barClose.className = "ginger-floatingG-bar-tool ginger-floatingG-bar-tool-disable";
            v.barCloseLink = v.barClose.appendChild(e.createElement("ga"));
            v.barCloseLink.innerHTML = "";
            i.add(v.barCloseLink, "click", function(e) {
                Q();
                s.element.focus();
                e.stopPropagation();
            });
            v.barCloseToolTip = v.barClose.appendChild(e.createElement($));
            v.barCloseToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            v.barCloseToolTip.innerHTML = "Disable in this text field";
            if (false) {
                v.barEdit = v.bar.appendChild(e.createElement($));
                v.barEdit.className = "ginger-floatingG-bar-tool";
                v.barEditLink = v.barEdit.appendChild(e.createElement("ga"));
                v.barEditLink.className = "ginger-floatingG-bar-tool-edit";
                i.add(v.barEditLink, "click", function(e) {
                    if (!o) {
                        gingerModule.get("gingerchromeext.content.report").reporterGA({
                            category: "Login",
                            action: "Click on Login",
                            label: "From FloatingG",
                            value: null
                        });
                    }
                    O({
                        trigger: "FloatingGEdit"
                    });
                    e.stopPropagation();
                    e.preventDefault();
                });
                v.barEditLink.innerHTML = "Edit";
                v.barEditToolTip = v.barEdit.appendChild(e.createElement($));
                v.barEditToolTip.className = "ginger-floatingG-bar-tool-tooltip";
                v.barEditToolTip.innerHTML = "Edit in Ginger";
            }
            if (true) {
                v.barRephrase = v.bar.appendChild(e.createElement($));
                v.barRephrase.className = "ginger-floatingG-bar-tool ginger-floatingG-bar-tool-rephrase";
                v.barRephraseLink = v.barRephrase.appendChild(e.createElement("ga"));
                v.barRephraseLink.className = "ginger-floatingG-bar-tool-rephrase__btn";
                v.barRephraseLink.id = "ginger__floatingG-bar-tool-rephrase__btn";
                v.barRephraseLink.innerHTML = "Rephrase";
                v.barRephraseToolTip = v.barRephrase.appendChild(e.createElement($));
                v.barRephraseToolTip.className = "ginger-floatingG-bar-tool-tooltip ginger-floatingG-bar-tool-tooltip_rephrase";
                v.barRephraseToolTip.innerHTML = "Rephrase current sentence";
                var t = gingerModule.get("widget.siteSettings").get(window.location.href);
                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                    module: "gingerchromeext.background.rephraseLimits",
                    callFunction: "getNewQuantity"
                }).then(function(e) {
                    if (t.isMiniRephrase && (!e || e <= 8)) {
                        v.barRephrase.classList.add("ginger-floatingG-bar-tool-rephrase_small-circle_priority");
                    } else {
                        if (!t.isMiniRephrase && (!e || e <= 3)) {
                            v.barRephrase.classList.add("ginger-floatingG-bar-tool-rephrase_big-circle");
                        } else if (e > 3 && e <= 8) {
                            v.barRephrase.classList.remove("ginger-floatingG-bar-tool-rephrase_big-circle");
                            v.barRephrase.classList.add("ginger-floatingG-bar-tool-rephrase_small-circle");
                        }
                    }
                });
            }
            v.barOpen = v.bar.appendChild(e.createElement($));
            v.barOpen.className = "ginger-floatingG-bar-tool ginger-floatingG-bar-tool-mistakes";
            v.barOpenLink = v.barOpen.appendChild(e.createElement("ga"));
            v.mistakesCount = v.barOpenLink.appendChild(e.createElement("span"));
            v.mistakesCount.className = "ginger-floatingG-bar-tool-mistakes-count";
            i.add(v.barOpenLink, "click", function(e) {
                O({
                    trigger: "FloatingGEdit"
                });
                e.preventDefault();
                e.stopPropagation();
            });
            v.barOpenToolTip = v.barOpen.appendChild(e.createElement($));
            v.barOpenToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            v.barOpenToolTip.innerHTML = "Edit in Ginger";
            return v;
        };
        var T = function(e) {
            if (n < e) {
                for (var t = 0; t < h.mistakesSteps.length; t++) {
                    if (n < h.mistakesSteps[t] && e >= h.mistakesSteps[t]) {
                        return true;
                    }
                }
            }
            return false;
        };
        var S = function(e) {
            if (e !== n) {
                if (T(e)) {
                    $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-spin");
                } else {
                    $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-spin");
                }
                n = e;
            }
            if (e > 0) {
                $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-dirty");
                if (e > 99) {
                    $gingerWidgetJquery(v.mistakesCount).html('<gdiv style="font-size:11px">99+</gdiv>');
                } else {
                    $gingerWidgetJquery(v.mistakesCount).text(e);
                }
            } else {
                $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-dirty");
                $gingerWidgetJquery(v.mistakesCount).text(e);
            }
        };
        var E = function(e) {
            if (e) {
                return e.ownerDocument || window.document;
            } else {
                return window.document;
            }
        };
        var k = function() {
            var e = window.document;
            var t;
            if (e.getElementsByTagName("body")[0].hasAttribute("contenteditable")) {
                t = e.getElementsByTagName("html")[0].insertBefore(e.createElement($), e.getElementsByTagName("body")[0]);
            } else {
                t = e.getElementsByTagName("body")[0].appendChild(e.createElement($));
            }
            t.style.position = "absolute";
            t.style.top = "0";
            t.style.left = "0";
            t.id = h.bindContainerId;
            J(e);
            t.appendChild(v.main);
            if (window.location.hostname.indexOf("lightning.force.com") != -1) {
                var n = e.createElement("script");
                var r = "if (window.CKEDITOR && CKEDITOR.instances && CKEDITOR.instances.editor) {" + "CKEDITOR.instances.editor.config.fullPage=false;" + "console.log('=====CKEDITOR fix at Salesforce:');}";
                n.innerHTML = r;
                e.documentElement.appendChild(n);
            }
            return t;
        };
        var L = function(e) {
            var t = "";
            for (var n in e) {
                if (t != "") {
                    t += "&";
                }
                t += n + "=" + encodeURIComponent(e[n]);
            }
            return t;
        };
        var A = null;
        var R = function() {
            A = {};
            A.main = v.main.appendChild(document.createElement($));
            A.main.className = "ginger-floatingG-contentPopup";
            A.main.wrap = $gingerWidgetJquery('<gdiv class="ginger-floatingG-contentPopup-wrap"></gdiv>').appendTo(A.main).get(0);
            A.main.close = $gingerWidgetJquery('<ga class="ginger-floatingG-contentPopup-close">&times;</ga>').appendTo(A.main.wrap).get(0);
            A.main.frame = $gingerWidgetJquery('<gdiv class="ginger-floatingG-contentPopup-frame"></gdiv>').appendTo(A.main.wrap).get(0);
            A.main.iframe = A.main.frame.appendChild(document.createElement("iframe"));
            A.main.iframe.setAttribute("scrolling", "no");
            i.add(A.main.close, "click", function() {
                _();
            });
        };
        var N = function(e) {
            var t = $gingerWidgetJquery(window).scrollTop();
            var n = $gingerWidgetJquery(A.main).offset().top;
            var r = n - t;
            if (n === 0 && t === 0) return true;
            return r - e > 0;
        };
        var I = function(e) {
            var t = e.width || 300;
            var n = e.height || 150;
            var r = window.innerWidth;
            var i = window.innerHeight;
            if (r < t + 30 || i < n + 30) return;
            e.type = "floatingGContentPopup";
            var o = gingerModule.get("gingerchromeext.content.session").get();
            if (o && o.token) e.authToken = o.token;
            if (!A) R();
            _();
            $gingerWidgetJquery(A.main).fadeIn();
            if (N(n)) {
                $gingerWidgetJquery(A.main).removeClass("ginger-floatingG-contentPopup-down");
            } else {
                $gingerWidgetJquery(A.main).addClass("ginger-floatingG-contentPopup-down");
            }
            A.main.iframe.setAttribute("src", gingerModule.get("gingerchromeext.browser").runtime.getURL("content/popups/contentPopup/index.html?") + L(e));
            $gingerWidgetJquery(A.main.iframe).css("width", t).css("height", n);
            A.main.frame.style.height = n + "px";
        };
        var _ = function() {
            $gingerWidgetJquery(A.main).hide();
        };
        var F = function(e) {
            var t = setTimeout(function() {
                $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-closed");
            }, 100);
        };
        var O = function(e) {
            if (!e) e = {};
            if (!e.type) e.type = "writer";
            var t;
            if (e.type === "writer" && s) {
                t = /^\s+$/.test(s.getVal()) ? "" : s.getFormattedVal();
            }
            var n = gingerModule.get("widget.utils").isRichTextElement(s.element);
            if (!n) {
                t = t.replace(/</g, "&lt;").replace(/>/g, "&gt;");
            } else {
                var r = location.hostname;
                var i = function(e) {
                    return '<dtt dont-touch-this="true" style="display: none!important;">' + e.outerHTML + "</dtt>";
                };
                var o = document.createElement("div");
                o.innerHTML = t;
                var g = $gingerWidgetJquery(o).find("[style]");
                g.each(function(e, t) {
                    t.setAttribute("cloned-style-ginger-writer", t.getAttribute("style"));
                });
                var a;
                if (/gmail.com|mail.google.com/.test(r)) {
                    a = '.gmail_quote, .gmail_signature, [data-smartmail="gmail_signature"]';
                }
                if (a) {
                    var c = o.querySelectorAll(a);
                    c.forEach(function(e) {
                        try {
                            e.outerHTML = i(e);
                        } catch (e) {}
                    });
                }
                t = o.innerHTML;
            }
            e = {
                cmd: "ginger.extension.setText",
                data: {
                    text: t,
                    cache: JSON.stringify(gingerModule.get("widget.api").dumpCorrectionCache()),
                    representation: s.getRepresentation(),
                    host: location.host
                }
            };
            l.trigger("writer.open", e);
        };
        var B = function() {
            window.addEventListener("message", function e(t) {
                if (!t.data) return;
                var n = t.data;
                try {
                    n = JSON.parse(t.data);
                } catch (t) {}
                if (n.type === "floatingGContentPopup") {
                    if (n.intent === "signIn") {
                        l.trigger("inlineAuth.open", {
                            view: "login",
                            trigger: "FloatingGBackTo"
                        });
                    } else if (n.intent === "neverShowSignIn") {
                        gingerModule.get("gingerchromeext.content.storage").set("signInFloatingGPopupShowInWindows", [ "*" ]);
                    } else if (n.intent === "openBusinessPage") {
                        window.open("https://www.gingersoftware.com/business?autk=" + encodeURIComponent(gingerModule.get("gingerchromeext.content.session").get().token) + "&utm_medium=" + gingerModule.get("gingerchromeext.content.config").get("platform") + "_ext&utm_source=g_message&utm_campaign=smb_intro");
                    }
                    if (s) s.element.focus();
                    _();
                }
            }, false);
        };
        var P = function() {
            if (document.querySelector("#ginger-spellchecker-in-outlook")) {
                return;
            }
            try {
                var e = ".ms-editor-squiggler {display: none !important;}";
                var t = document.createElement("style");
                t.id = "ginger-spellchecker-in-outlook";
                t.type = "text/css";
                t.textContent = e;
                document.getElementsByTagName("head")[0].appendChild(t);
            } catch (e) {
                console.error(e);
            }
        };
        var G = function() {
            return document.querySelector("#ginger-spellchecker-in-outlook") && document.querySelector("#ginger-spellchecker-in-outlook").remove();
        };
        var D = function() {
            if (!document.getElementsByTagName("body").length) return;
            k();
            R();
            B();
            document.addEventListener("scroll", function() {
                setTimeout(function() {
                    if (s) X(s);
                }, 100);
            });
            gingerModule.get("widget").listen.on("input.removed", function(e, t) {
                var n = [ "focus", "blur", "mutation", "visibility.change" ];
                for (var r = 0; r < n.length; r++) {
                    t.events.listen.off(n[r]);
                }
                z();
            });
            gingerModule.get("widget").listen.on("input.added", function(e, n) {
                if (location.host === "outlook.office.com" || location.host === "outlook.live.com" || location.host === "outlook.office365.com") {
                    P();
                }
                n.events.listen.on("disabled", function() {
                    console.log("disabled");
                    if (location.host === "outlook.office.com" || location.host === "outlook.live.com" || location.host === "outlook.office365.com") {
                        P();
                    }
                });
                n.events.listen.on("enabled", function() {
                    if (location.host === "outlook.office.com" || location.host === "outlook.live.com" || location.host === "outlook.office365.com") {
                        G();
                    }
                });
                var t = $gingerWidgetJquery(n.element).find("[data-original-tag='GDIV']");
                t.remove();
                if (n.element === document.activeElement) {
                    U(n);
                }
                n.events.listen.on("focus", function() {
                    U(n);
                    X(n);
                });
                n.events.listen.on("blur", function() {
                    if (r) r = clearTimeout(r);
                    r = setTimeout(function() {
                        if (n.element !== document.activeElement) z();
                    }, 1e3);
                });
                n.events.listen.on("markedForeign.change", function(e, t) {
                    var n = "";
                    if (t) {
                        $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-disabled");
                        $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-foreign");
                        n = "MarkedForeign";
                    } else {
                        $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-foreign");
                        $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-disabled");
                        n = "UnMarkedForeign";
                    }
                    gingerModule.get("gingerchromeext.content.report").reporter({
                        type: "EnableOrDisableGinger",
                        Action: n,
                        location: "FloatingG"
                    });
                    gingerModule.get("gingerchromeext.content.report").reporter({
                        type: "SettingsModification",
                        Action: n,
                        location: "FloatingG",
                        SettingsType: "CorrectionSettingsType"
                    });
                });
                n.events.listen.on("mutation", function() {
                    X(n);
                });
                n.events.listen.on("visibility.change", function(e, t) {
                    if (t) {
                        U(s);
                    } else {
                        if (n === s) z();
                    }
                });
                n.events.listen.on("inputchange", function() {
                    _();
                });
            });
            gingerModule.get("widget.onlinestatus").listen.on("online", function(e) {
                $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-offline");
            });
            gingerModule.get("widget.onlinestatus").listen.on("offline", function(e) {
                $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-offline");
            });
            gingerModule.get("widget.api").listen.on("ajax.start", function() {
                if (e) e = clearTimeout(e);
                $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-loading");
            });
            gingerModule.get("widget.api").listen.on("ajax.end", function() {
                if (e) e = clearTimeout(e);
                e = setTimeout(function() {
                    $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-loading");
                }, t);
            });
            $gingerWidgetJquery(v.bar).mouseover(function() {
                $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-open");
                $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-closed");
            });
            $gingerWidgetJquery(v.bar).mouseout(function() {
                $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-open");
                $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-closed");
            });
        };
        var j;
        var H = function(e, t) {
            var n = s.stats.get();
            if (n && n.mistakes) S(n.mistakes.grammar + n.mistakes.spelling);
            j = n;
        };
        var U = function(e) {
            if (!gingerModule.get("widget").isEnabled()) return;
            if (s) s.stats.listen.off("changed", H);
            _();
            if (r) r = clearTimeout(r);
            gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function() {
                o = true;
                if (v.barEditToolTip) v.barEditToolTip.innerHTML = "Edit in Ginger";
                v.barOpenToolTip.innerHTML = "Edit in Ginger";
            }, function() {
                o = false;
                if (v.barEditToolTip) v.barEditToolTip.innerHTML = "Log in to edit with Ginger";
                v.barOpenToolTip.innerHTML = "Log in to edit with Ginger";
            });
            s = e;
            if (e.isEnabled()) {
                $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-disabled");
            } else {
                $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-disabled");
            }
            if (gingerModule.get("widget.onlinestatus").isOnline()) {
                $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-offline");
            } else {
                $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-offline");
            }
            var t = !/inline/i.test($gingerWidgetJquery(e.element.parentNode).css("display")) && $gingerWidgetJquery(e.element.parentNode).height() <= 0;
            if (!t) {
                H();
                s.stats.listen.on("changed", H);
                X(s);
                setTimeout(function() {
                    X(s);
                }, 100);
                $gingerWidgetJquery(v.main).show();
                gingerModule.get("gingerchromeext.content.storage").get("onboardingFloatingGShown").then(function(e) {
                    if (!e) {
                        I({
                            url: "https://cdn.gingersoftware.com/extensions/chrome/floatingGPopup/ftue.html"
                        });
                        gingerModule.get("gingerchromeext.content.storage").set("onboardingFloatingGShown", true);
                    } else {
                        gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function e() {}, function e() {
                            gingerModule.get("gingerchromeext.content.storage").get("onboardingFloatingGShown").then(function(e) {
                                if (!e) return;
                                gingerModule.get("gingerchromeext.content.storage").get("signInFloatingGPopupShowInWindows").then(function(e) {
                                    var t = e || [];
                                    gingerModule.get("gingerchromeext.content.backgroundConnector").call({
                                        module: "gingerchromeext.background.browserInterface",
                                        callFunction: "getTabId",
                                        includeSender: true
                                    }, function(e) {
                                        if (t[0] !== "*" && t.indexOf(e.id) === -1) {
                                            I({
                                                url: "https://cdn.gingersoftware.com/extensions/chrome/floatingGPopup/signIn.html"
                                            });
                                            t.push(e.id);
                                            t = t.slice(-60);
                                            gingerModule.get("gingerchromeext.content.storage").set("signInFloatingGPopupShowInWindows", t);
                                        } else {}
                                    });
                                });
                            });
                        });
                    }
                });
            } else {
                if (console && console.warn) console.warn("Possibly a tricky area for floatingG!");
            }
        };
        var z = function() {
            $gingerWidgetJquery(v.main).hide();
            if (s) {
                s.stats.listen.off("changed", H);
            }
        };
        var V = function(e) {
            if (e) $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-minified"); else $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-minified");
        };
        var K = function(e, t) {
            if (!s) return;
            if (e === s.element) {
                if (t) {
                    U(s);
                } else {
                    z();
                }
            }
        };
        var X = function(e) {
            if (e !== s) return false;
            q(e.element);
        };
        var Z = function() {
            if (!s) return;
            s.markForeign(false, true);
            Q(true);
        };
        var Q = function(e) {
            var t = "Enable";
            if (!s) return;
            if (s.getIsForeign()) {
                return;
            }
            if (s.isEnabled()) {
                t = "Disable";
                s.disable();
                v.barCloseToolTip.innerHTML = "Enable in this text field";
                $gingerWidgetJquery(v.main).addClass(h.bindClassname + "-disabled");
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Turn on/off Ginger",
                    action: "Turn off from Floating G",
                    label: location.host,
                    value: null
                });
            } else {
                s.enable();
                v.barCloseToolTip.innerHTML = "Disable in this text field";
                $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-disabled");
            }
            $gingerWidgetJquery(v.main).removeClass(h.bindClassname + "-open");
            gingerModule.get("gingerchromeext.content.report").reporter({
                type: "EnableOrDisableGinger",
                Action: t,
                location: "FloatingG"
            });
            gingerModule.get("gingerchromeext.content.report").reporter({
                type: "SettingsModification",
                Action: t,
                location: "FloatingG",
                SettingsType: "CorrectionSettingsType"
            });
        };
        var Y = function() {
            return s;
        };
        return {
            legacyConnector: {
                show: U,
                hide: z
            },
            listen: l,
            getActiveElement: Y,
            showContentPopup: I,
            init: D
        };
    }, [ "widget", "widget.utils", "widget.inputFinder", "widget.siteSettings", "gingerchromeext.content.report", "gingerchromeext.content.eventListener", "gingerchromeext.content.measure" ]);
})();

gingerModule.load("gingerchromeext.content.init", function() {
    var n;
    var r = function() {
        gingerModule.get("gingerchromeext.content.widget");
        gingerModule.get("gingerchromeext.content.onboardingBubbles");
        gingerModule.get("gingerchromeext.content.reloadContentScripts");
        n = clearInterval(n);
    };
    var i = function() {
        window.postMessage({
            cmd: "gingerchromeext.content.inited"
        }, "*");
        gingerModule.get("gingerchromeext.content.writer");
        gingerModule.get("gingerchromeext.content.writer").listen.one("writer.loaded", function() {
            gingerModule.get("gingerchromeext.content.writer").open();
        });
        n = clearInterval(n);
    };
    var e = function() {
        window.addEventListener("message", function(t) {
            var n = {};
            try {
                n = JSON.parse(t.data);
            } catch (e) {
                n = t.data;
            }
            if (!n) return;
            if (n.type === "gingerAuth.login.successful") {
                gingerModule.get("gingerchromeext.content.session").set(n.session);
                var e = t.origin.toLowerCase() === gingerModule.get("gingerchromeext.browser").runtime.getURL("").split("/").splice(0, 3).join("/").toLowerCase();
                if (e) {
                    if (n.session.signUp) {
                        gingerModule.get("gingerchromeext.content.report").reporter({
                            type: "RegistrationEvent",
                            provider: n.session.provider,
                            trigger: n.trigger
                        });
                    } else {
                        gingerModule.get("gingerchromeext.content.report").reporter({
                            type: "LoginEvent",
                            provider: n.session.provider,
                            trigger: n.trigger
                        });
                    }
                }
            }
        });
    };
    var t = function() {
        var e = /gingersoftware\.com\/ginger-writer/.test(location.href);
        var t = document.querySelector("meta[name=disable-ginger-extension]");
        if (e) {
            i();
            n = clearInterval(n);
        } else if (t) {
            n = clearInterval(n);
        } else if (document.querySelectorAll("textarea").length || document.querySelectorAll("[contenteditable]").length) {
            r();
            n = clearInterval(n);
        }
    };
    var o = function() {
        n = setInterval(t, 4e3);
        t();
        e();
        gingerModule.get("gingerchromeext.content.definitionPopup");
        gingerModule.get("gingerchromeext.content.synonymPopup");
        gingerModule.get("gingerchromeext.content.writer");
        gingerModule.get("gingerchromeext.content.inlineAuth");
        gingerModule.get("gingerchromeext.content.licenseLimits");
        gingerModule.get("gingerchromeext.content.miniWriter");
        gingerModule.get("gingerchromeext.content.rephrasePopup");
        if (gingerModule.get("gingerchromeext.content.config").get("platform") === "safari") {
            gingerModule.get("gingerchromeext.content.backgroundConnector").call({
                module: "gingerchromeext.background.iconSwitcher",
                callFunction: "refresh"
            });
            document.addEventListener("visibilitychange", function() {
                gingerModule.get("gingerchromeext.content.backgroundConnector").call({
                    module: "gingerchromeext.background.iconSwitcher",
                    callFunction: "refresh"
                });
            });
        }
    };
    o();
}, []);

(function() {
    var e = gingerModule.load("gingerchromeext.content.inlineAuth", function(e) {
        var n = $gingerWidgetJquery({});
        var t;
        var r;
        var i = function() {
            window.addEventListener("message", function(t) {
                var n = {};
                try {
                    n = JSON.parse(t.data);
                } catch (e) {
                    n = t.data;
                }
                if (!n) return;
                if (n.type === "gingerAuth.login.successful") {
                    gingerModule.get("gingerchromeext.content.contentPopup").hide();
                } else if (n.cmd === "ginger.extension.inlineAuth.open") {
                    o("Writer").then(function() {}, function() {});
                }
            });
        };
        var o = function(e) {
            r = $gingerWidgetJquery.Deferred();
            gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function() {}, function() {
                g(e);
            });
            return r.promise();
        };
        var g = function(e) {
            var t = {
                url: "https://www.gingersoftware.com/auth/",
                height: 600,
                width: 410,
                platform: gingerModule.get("gingerchromeext.content.config").get("source"),
                trigger: e.trigger,
                clientVersion: gingerModule.get("gingerchromeext.content.config").get("clientVersion"),
                widgetUid: gingerModule.get("gingerchromeext.content.config").get("widgetUid"),
                origin: gingerModule.get("gingerchromeext.content.config").get("affId"),
                utm_medium: e.trigger,
                utm_source: "button",
                utm_campaign: "signup_login"
            };
            t.url += e.view === "login" ? "#!/login" : "#!/sign-up";
            gingerModule.get("gingerchromeext.content.contentPopup").show(t);
            gingerModule.get("gingerchromeext.content.contentPopup").listen.one("closed", function() {
                n.trigger("auth.cancelled");
            });
        };
        var a = function() {
            i();
            if (window.location.href.indexOf("pages/postinstall/index.html") !== -1) {
                o();
            }
        };
        a();
        return {
            open: o,
            listen: n
        };
    }, [ "gingerchromeext.content.session", "gingerchromeext.content.config", "gingerchromeext.content.report" ]);
})();

(function() {
    var e = gingerModule.load("gingerchromeext.content.licenseLimits", function() {
        var c = {
            chrome: {
                exceeded: "https://cdn.gingersoftware.com/conv2prem/exceeded-chrome2/",
                onbubble: "https://cdn.gingersoftware.com/conv2prem/onbubble-chrome/",
                approaching: "https://cdn.gingersoftware.com/conv2prem/approaching-chrome/"
            },
            safari: {
                exceeded: "https://cdn.gingersoftware.com/conv2prem/exceeded-safari2/",
                onbubble: "https://cdn.gingersoftware.com/conv2prem/onbubble-safari/",
                approaching: "https://cdn.gingersoftware.com/conv2prem/approaching-safari/"
            }
        };
        var e = function(e) {
            var t = gingerModule.get("gingerchromeext.content.session").get();
            var n = {};
            if (t) {
                n.email = t.email;
                n.authToken = t.token;
            }
            var r = "";
            for (var i in n) {
                if (r != "") {
                    r += "&";
                }
                r += i + "=" + encodeURIComponent(n[i]);
            }
            var o = {};
            var g = c[gingerModule.get("gingerchromeext.content.config").get("platform")];
            var a;
            switch (e) {
              case "approaching":
                a = "Display Premium for Correction Limit Approaching pop-up";
                o = {
                    url: g.approaching + "?" + r,
                    width: "570",
                    height: "570"
                };
                break;

              case "onbubble":
                a = "Display Premium for Correction Limit Reached pop-up";
                o = {
                    url: g.onbubble + "?" + r,
                    width: "570",
                    height: "570"
                };
                gingerModule.get("gingerchromeext.content.storage").get("onBubblePopupShownForUsers").then(function(e) {
                    if (!e) e = [];
                    if (e.indexOf(t.userId) === -1) {
                        gingerModule.get("gingerchromeext.content.report").reporter({
                            msgid: "CapacityLimitationActivatedMessage",
                            type: "MessageOpenEvent"
                        });
                        e.push(t.userId);
                        gingerModule.get("gingerchromeext.content.storage").set("onBubblePopupShownForUsers", e);
                    }
                });
                break;

              case "exceeded":
                a = "Display Premium for Correction Limit Reached pop-up";
                o = {
                    url: g.exceeded + "?" + r,
                    width: "570",
                    height: "570"
                };
                break;
            }
            gingerModule.get("gingerchromeext.content.report").reporterGA({
                category: "Premium",
                action: a,
                label: null,
                value: null
            });
            o.withoutClose = true;
            gingerModule.get("gingerchromeext.content.contentPopup").show(o);
        };
        var r = function() {
            gingerModule.get("gingerchromeext.content.contentPopup").hide();
        };
        var t = function() {
            window.addEventListener("message", function(t) {
                var n = {};
                try {
                    n = JSON.parse(t.data);
                } catch (e) {
                    n = t.data;
                }
                if (!n) return;
                if (n && n.action === "close") {
                    setTimeout(r);
                } else if (n.cmd == "ginger.extension.licenseLimits") {
                    e(n.type);
                } else if (n.action === "upgrade") {
                    switch (type) {
                      case "approaching":
                        gingerModule.get("gingerchromeext.content.report").reporterGA({
                            category: "Premium",
                            action: "Click Premium for Correction Limit Approaching pop-up",
                            label: null,
                            value: null
                        });
                        break;

                      case "onbubble":
                        gingerModule.get("gingerchromeext.content.report").reporterGA({
                            category: "Premium",
                            action: "Click Premium for Correction Limit Reached pop-up",
                            label: null,
                            value: null
                        });
                        break;

                      case "exceeded":
                        gingerModule.get("gingerchromeext.content.report").reporterGA({
                            category: "Premium",
                            action: "Click Premium for Correction Limit Reached pop-up",
                            label: null,
                            value: null
                        });
                        break;
                    }
                }
            });
        };
        var n = function() {
            t();
        };
        n();
        return {
            showLimitationPopup: e
        };
    }, [ "gingerchromeext.content.session", "gingerchromeext.content.config", "widget.licenseLimits", "widget.correctionBubble" ]);
})();

(function() {
    var e = gingerModule.load("gingerchromeext.content.marketingPopups", function() {
        var r = function() {
            if (/Win/i.test(navigator.appVersion)) {
                return "win";
            } else if (/Mac/i.test(navigator.platform)) {
                return "mac";
            }
            return "other";
        };
        var e = function() {
            window.addEventListener("message", function(t) {
                var n = "";
                try {
                    n = JSON.parse(t.data);
                } catch (e) {
                    n = t.data;
                }
                if (!n) return;
                if (n.cmd == "ginger.extension.pollMessage") {
                    o();
                }
            });
        };
        var i = [];
        var o = function(n) {
            gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function e() {
                var t = gingerModule.get("gingerchromeext.content.session").get();
                if (t) {
                    gingerModule.get("gingerchromeext.content.ajax").execute({
                        url: "https://clientMessages.gingersoftware.com/getNextMessage/" + t.userId + "/" + gingerModule.get("gingerchromeext.content.config").get("affId") + "?os=" + r() + "&version=" + gingerModule.get("gingerchromeext.content.config").get("clientVersion"),
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    }).then(function e(t) {
                        if (!t && i.length) {
                            t = i.shift();
                        }
                        if (t && t.url) {
                            if (t.cont_ui === "ie") {
                                gingerModule.get("gingerchromeext.content.contentPopup").show({
                                    url: t.url,
                                    width: parseInt(t.width),
                                    height: parseInt(t.height),
                                    type: t.id,
                                    authToken: gingerModule.get("gingerchromeext.content.session").get().token
                                });
                            } else if (t.cont_ui === "extension.floatingG") {
                                if (n === "approve.one" || n === "approve.all") {
                                    gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function() {
                                        gingerModule.get("gingerchromeext.content.floatingG").showContentPopup({
                                            url: t.url,
                                            width: parseInt(t.width),
                                            height: parseInt(t.height)
                                        });
                                    }, function() {});
                                } else {
                                    i.push(t);
                                }
                            }
                        }
                    }, function e() {});
                }
            }, function e() {});
        };
        e();
        return {
            pollForNewMessage: o
        };
    }, [ "gingerchromeext.content.session", "gingerchromeext.content.config", "widget.correctionBubble", "gingerchromeext.content.ajax" ]);
})();

gingerModule.load("gingerchromeext.content.measure", function() {
    var e = function(n) {
        var r = 1;
        document.querySelectorAll("body *").forEach(function(e) {
            if ($gingerWidgetJquery(e).css("position") !== "static" && (!n ? !/ginger-/.test(e.className) : true)) {
                var t = parseInt($gingerWidgetJquery(e).css("z-index"));
                t = isNaN(t) ? 1 : t;
                r = Math.max(t, r);
            }
        });
        return r;
    };
    var s = function(e) {
        if (document.querySelector("#ginger__mime-element")) {
            document.querySelector("#ginger__mime-element").remove();
        }
        var t = [ "fontSize", "lineHeight", "height", "overflow", "overflowY", "overflowX", "overflowAnchor", "overflowWrap", "overscrollBehavior", "overscrollBehaviorBlock", "overscrollBehaviorInline", "overscrollBehaviorX", "overscrollBehaviorY", "maxHeight", "border", "width", "padding", "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "boxSizing", "outline", "backgroundColor", "fontSize", "maxHeight", "lineHeight", "fontFamily", "fontWeight", "fontStyle" ];
        var n = window.getComputedStyle(e, null);
        var r = document.createElement("div");
        r.id = "ginger__mime-element";
        r.classList.add("ginger__mime-element");
        t.forEach(function(e) {
            r.style[e] = n[e];
        });
        r.style.zIndex = "-999";
        r.style.whiteSpace = "pre-wrap";
        r.textContent = e.value;
        r.style.top = e.getBoundingClientRect().top + "px";
        r.style.left = e.getBoundingClientRect().left + "px";
        r.style.position = "fixed";
        document.body.appendChild(r);
        r.scrollTop = e.scrollTop;
        r.scrollLeft = e.scrollLeft;
        return r;
    };
    getSelectionRectFromMimic = function(e) {
        if (!e) {
            return;
        }
        if (e.nodeName === "TEXTAREA") {
            var t = s(e);
            if (t) {
                var n = e.selectionStart;
                var r = e.selectionEnd;
                window.getSelection().removeAllRanges();
                try {
                    var i = new Range();
                    var o = t.childNodes[0];
                    i.setStart(o, n);
                    i.setEnd(o, r);
                    window.getSelection().addRange(i);
                    var g = document.selection, a, c, l = null;
                    g = window.getSelection();
                    if (g.rangeCount) {
                        a = g.getRangeAt(0).cloneRange();
                        if (a.getClientRects) {
                            c = a.getClientRects();
                            if (c.length > 0) {
                                l = a.getClientRects()[0];
                            }
                        }
                    }
                    window.getSelection().removeAllRanges();
                    e.selectionStart = n;
                    e.selectionEnd = r;
                    if (document.querySelector("#ginger__mime-element")) {
                        document.querySelector("#ginger__mime-element").remove();
                    }
                    return l;
                } catch (e) {
                    console.error(e);
                }
                return null;
            }
        } else {
            return null;
        }
    };
    return {
        findHighestZIndex: e,
        getSelectionRectFromMimic: getSelectionRectFromMimic
    };
}, []);

(function() {
    var e = gingerModule.load("gingerchromeext.content.miniWriter", function() {
        var e = gingerModule.get("widget.cache");
        var r = [];
        var i = function() {
            if (r.length) r[0]();
        };
        var t = function(t) {
            var n = $gingerWidgetJquery.Deferred();
            if (t) {
                r.push(function() {
                    var e = this;
                    $gingerWidgetJquery.ajax(t).then(function(e) {
                        r.splice(0, 1);
                        i();
                        n.resolve(e);
                    }, function(e) {
                        r.splice(0, 1);
                        i();
                        n.reject(e);
                    });
                });
            }
            if (r.length === 1) {
                i();
            }
            return n.promise();
        };
        var o = function() {
            var e = null;
            try {
                if (document.activeElement.nodeName.toLowerCase() !== "body") {
                    e = document.activeElement;
                } else {
                    e = window.getSelection().anchorNode;
                }
            } catch (e) {}
            return e;
        };
        var g = function() {
            var e = "";
            if (window.getSelection) {
                e = $gingerWidgetJquery.trim(window.getSelection().toString());
            } else if (document.selection && document.selection.type !== "Control") {
                e = document.selection.createRange().text;
            }
            return e;
        };
        var n = function() {
            document.addEventListener("visibilitychange", function() {
                if (document.hidden) gingerModule.get("gingerchromeext.content.storage").set("miniWriterFromSelection", null);
            });
            document.addEventListener("mouseup", function(e) {
                gingerModule.get("gingerchromeext.content.storage").set("miniWriterFromSelection", null);
                var t = {
                    text: g(),
                    node: o()
                };
                if (t.text && t.text.length > 1) {
                    var n = $gingerWidgetJquery(t.node).is("input,textarea,*[contenteditable]") && !$gingerWidgetJquery(t.node).is("*[contenteditable='false']");
                    gingerModule.get("gingerchromeext.content.storage").set("miniWriterFromSelection", {
                        type: n ? "input" : "content",
                        text: t.text
                    });
                }
            });
        };
        n();
    }, []);
})();

gingerModule.load("gingerchromeext.content.onboardingBubbles", function() {
    var r = {};
    var i = false;
    var o = function() {
        var e = document.body;
        r.main = $gingerWidgetJquery('<gdiv class="ginger-module-correctionBubble-onboarding"></gdiv>').appendTo(e);
        r.top = $gingerWidgetJquery('<gdiv class="ginger-module-correctionBubble-onboarding-bubble ginger-module-correctionBubble-onboarding-top">To approve a single suggestion, mouse over it and click "✔"</gdiv>').appendTo(r.main);
        r.bottom = $gingerWidgetJquery('<gdiv class="ginger-module-correctionBubble-onboarding-bubble ginger-module-correctionBubble-onboarding-bottom">Click the bubble to approve all of its suggestions.</gdiv>').appendTo(r.main);
    };
    var g = function(e, t) {
        var n = document.getElementsByTagName("gwbm")[0];
        if (!n) return;
        gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function() {
            var e = $gingerWidgetJquery(n).offset();
            var t = $gingerWidgetJquery(".ginger-module-correctionBubble-container-loggedin .ginger-module-correctionBubble-body").offset();
            $gingerWidgetJquery(r.top).css("top", e.top - 76);
            $gingerWidgetJquery(r.top).css("left", e.left - 45);
            $gingerWidgetJquery(r.bottom).css("top", t.top + 60);
            $gingerWidgetJquery(r.bottom).css("left", t.left - 35);
            $gingerWidgetJquery(r.main).show();
            i = true;
            gingerModule.get("gingerchromeext.content.storage").set("onboardingBubblesShown", true);
            gingerModule.get("gingerchromeext.content.report").reporterGA({
                category: "Onboarding",
                action: "First Onboarding Display",
                label: null,
                value: null,
                singleCall: true
            });
        }, function() {});
    };
    var a = function() {
        if (i) {
            gingerModule.get("widget.correctionBubble").listen.off("hide", a);
            gingerModule.get("widget.correctionBubble").listen.off("show", g);
            $gingerWidgetJquery(r.main).remove();
        }
    };
    var c = function() {
        var e = document.getElementsByTagName("gwbm")[0];
        if (!e) return;
        var t = $gingerWidgetJquery(e).offset();
        var n = $(window).scrollTop();
        var r = n + $(window).height();
        if (t.top + 100 < viewPortBottom && t.top - 100 < n) {
            return true;
        }
        return false;
    };
    var e = function() {
        gingerModule.get("gingerchromeext.content.storage").get("onboardingBubblesShown").then(function(e) {
            if (!e) {
                var t = window.top !== window;
                var n = c();
                if (!t) {
                    o();
                    gingerModule.get("widget.correctionBubble").listen.on("show", g);
                    gingerModule.get("widget.correctionBubble").listen.on("hide", a);
                }
            }
        });
    };
    e();
}, [ "gingerchromeext.content.storage" ]);

gingerModule.load("gingerchromeext.content.reloadContentScripts", function() {
    var e = function() {
        gingerModule.get("widget").listen.on("input.added", function() {
            var e = document.body.appendChild(document.createElement("div"));
            e.className = "ginger-module-highlighter-mistake-type-2";
            var t = getComputedStyle(e).backgroundColor;
            e.remove();
            if (t === "rgba(0, 0, 0, 0)") {
                gingerModule.get("gingerchromeext.browser").runtime.getManifest().content_scripts.forEach(function(e) {
                    e.css.forEach(function(e) {
                        var t = gingerModule.get("gingerchromeext.browser").runtime.getURL(e);
                        fetch(t).then(function(e) {
                            e.text().then(function(e) {
                                var t = document.createElement("style");
                                t.textContent = e;
                                document.head.appendChild(t);
                            });
                        });
                    });
                });
            }
        });
    };
    e();
    return {
        init: e
    };
}, [ "gingerchromeext.browser" ]);

(function() {
    var e = gingerModule.load("gingerchromeext.content.rephrasePopup", function() {
        var e = $gingerWidgetJquery({});
        var a = false;
        var c = null;
        var t = [];
        var l = null;
        var n = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
        var r = "d";
        var s = null;
        var d = function(t, n) {
            try {
                return t.reduce(function(e, t) {
                    return t[n] < e[n] ? t : e;
                })[n];
            } catch (e) {
                return t && t[0] && t[0][n] ? t[0][n] : 0;
            }
        };
        var u = function(t, n) {
            try {
                return t.reduce(function(e, t) {
                    return t[n] > e[n] ? t : e;
                })[n];
            } catch (e) {
                return t && t[0] && t[0][n] ? t[0][n] : 0;
            }
        };
        var i = function() {
            gingerModule.get("widget").listen.on("input.added", function(e, t) {
                s = t;
                var n = document.querySelector("#ginger__floatingG-bar-tool-rephrase__btn");
                if (!n) return;
                if (!gingerModule.get("widget").isEnabled()) return;
                if (!s.isEnabled()) return;
                n.onmousedown = function(e) {
                    try {
                        o();
                    } catch (e) {
                        console.error(e);
                    }
                };
                n.onclick = function(e) {
                    if (l && l.text) S(l);
                    h(l.range);
                };
                s.events.listen.on("keydown", function(e) {
                    if (a) E();
                });
            });
            document.addEventListener("mouseup", function(e) {
                if (a && e.target.classList.contains("ginger-extension__rephrase-popup__limit-reached__link")) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA({
                        category: "Premium",
                        action: "Click Premium for Rephrase inline",
                        label: null,
                        value: null
                    });
                }
                if (a && e.target.id !== "ginger__floatingG-bar-tool-rephrase__btn" && !e.target.classList.contains("ginger-extension__rephrase-popup__body") && !e.target.classList.contains("ginger-extension__rephrase-popup__limit-reached__link")) {
                    E();
                }
            });
            if (s && s.events) {
                s.events.listen.on("blur", function() {
                    E();
                });
            }
        };
        var o = function() {
            l = {};
            l.text = v();
            l.range = m();
            l.selectionCoordinates = g(s ? s.element : null);
            l.node = f();
        };
        var g = function(e) {
            var t = document.selection, n, r, i = null;
            try {
                if (window.getSelection) {
                    if (e) {
                        i = gingerModule.get("gingerchromeext.content.measure").getSelectionRectFromMimic(e);
                        if (i) {
                            return i;
                        }
                    }
                    t = window.getSelection();
                    if (t.rangeCount) {
                        n = t.getRangeAt(0).cloneRange();
                        if (n.getClientRects) {
                            r = n.getClientRects();
                            if (r.length === 1) {
                                i = r[0];
                                return i;
                            } else if (r.length > 1) {
                                var o = {
                                    bottom: u(Object.values(r), "bottom"),
                                    height: u(Object.values(r), "height"),
                                    left: d(Object.values(r), "left"),
                                    right: u(Object.values(r), "right"),
                                    top: d(Object.values(r), "top"),
                                    width: u(Object.values(r), "width"),
                                    x: d(Object.values(r), "x"),
                                    y: d(Object.values(r), "y")
                                };
                                o.height = o.bottom - o.bottom > o.height ? o.bottom - o.bottom : o.height;
                                o.width = o.left - o.right > o.width ? o.left - o.right : o.width;
                                i = o;
                                return i;
                            }
                        }
                        if (typeof x !== "undefined" && typeof y !== "undefined" && x == 0 && y == 0) {
                            var g = document.createElement("span");
                            if (g.getClientRects) {
                                g.appendChild(document.createTextNode("​"));
                                n.insertNode(g);
                                i = $gingerWidgetJquery(g).offset();
                                var a = g.parentNode;
                                a.removeChild(g);
                                a.normalize();
                            }
                        }
                    }
                }
            } catch (e) {
                console.error(e);
                return null;
            }
            return i;
        };
        var f = function() {
            var e = null;
            try {
                if (document.activeElement.nodeName.toLowerCase() !== "body") {
                    e = document.activeElement;
                } else {
                    e = window.getSelection().anchorNode;
                }
            } catch (e) {}
            return e;
        };
        var m = function() {
            if (s.element && (s.element.tagName === "TEXTAREA" || s.element.tagName === "INPUT")) {
                return {
                    selectionEnd: s.element.selectionEnd,
                    selectionStart: s.element.selectionStart,
                    selectionDirection: s.element.selectionDirection
                };
            } else {
                return window.getSelection ? window.getSelection().getRangeAt(0).cloneRange() : null;
            }
        };
        var v = function() {
            var e = window.getSelection && window.getSelection();
            if (!e) return "";
            e.modify("move", "backward", "sentence");
            e.modify("extend", "forward", "sentence");
            return e.toString();
        };
        var h = function(e) {
            var t = window.getSelection && window.getSelection();
            if (!t) return "";
            if (typeof e.selectionStart !== "undefined" && typeof e.selectionEnd !== "undefined") {
                if (s && s.element) {
                    s.element.select();
                    s.element.selectionEnd = e.selectionEnd;
                    s.element.selectionStart = e.selectionStart;
                    return;
                }
            }
            t.removeAllRanges();
            t.addRange(e || l && l.range);
        };
        var p = function(e) {
            var t = window.getSelection && window.getSelection();
            if (!t) return "";
            h(e);
            t.modify("move", "backward", "sentence");
            t.modify("extend", "backward", "sentence");
            l.range = m();
            return t.toString();
        };
        var w = function(e) {
            var t = window.getSelection && window.getSelection();
            if (!t) return "";
            h(e);
            t.modify("move", "forward", "sentence");
            t.modify("extend", "backward", "sentence");
            l.range = m();
            return t.toString();
        };
        var b = function(e) {
            var t = /\s/.test(l.text.split("").reverse()[0]);
            var n = /\s/.test(e.split("").reverse()[0]);
            if (t && !n) {
                e += " ";
            }
            var r = gingerModule.get("widget.utils").isRichTextElement(s.element);
            var i = r && $gingerWidgetJquery(s.element).find("[data-block='true']").length > 0 || r && $gingerWidgetJquery(s.element).closest("[data-reactroot]").length;
            gingerModule.get("gingerchromeext.content.report").reporterGA({
                category: "Rephrase",
                action: "Pick a Rephrase alternative inline",
                label: location.host,
                value: null
            });
            gingerModule.get("gingerchromeext.content.report").reporterGA({
                category: "Onboarding",
                action: "First Rephrase",
                label: null,
                value: null,
                singleCall: true
            });
            if (s && s.setVal && i) {
                var o = 0;
                var g = 0;
                if (typeof l.range.selectionStart !== "undefined" && typeof l.range.selectionEnd !== "undefined") {
                    g = l.range.selectionStart;
                    o = l.range.selectionEnd;
                } else {
                    h(l.range);
                    window.getSelection().removeAllRanges();
                    var a = new Range();
                    a.setStart(s.element, 0);
                    a.setEnd(l.range.startContainer, l.range.startOffset);
                    window.getSelection().addRange(a);
                    g = window.getSelection().toString().replace(/\n/g, "").length;
                    o = g + l.text.length;
                    window.getSelection().removeAllRanges();
                }
                s.setVal(e, g, o);
            } else {
                var c = new window.InputEvent("beforeinput", {
                    bubbles: !0,
                    cancelable: !1,
                    inputType: "insertText",
                    data: e
                });
                document.activeElement.dispatchEvent(c);
                document.execCommand("insertText", !1, e);
            }
            setTimeout(function() {
                if (s && s.element) {
                    s.element.focus();
                }
            }, 100);
        };
        var M = function() {
            var e = gingerModule.get("gingerchromeext.content.session").get();
            if (e.license === 2) {
                return "";
            }
            var t = "https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerChromeExtension-Rephrase-Inline&autk=" + e.token;
            return '<gdiv class="ginger-extension__rephrase-popup__limit-reached__title">Free limit reached</gdiv>' + '<gdiv class="ginger-extension__rephrase-popup__limit-reached__text">Boost your creativity and style\n' + "with Unlimited Rephrasing</gdiv>" + '<a  href="' + t + '" target="_blank" class="ginger-extension__rephrase-popup__limit-reached__link">Go Premium</a>';
        };
        var C = function() {
            c = {};
            c.main = $gingerWidgetJquery("<gdiv id='gingerExtension__rephrasePopup' contenteditable='false' class='ginger-extension__rephrase-popup'></gdiv>").appendTo(document.querySelector("html"));
            c.body = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__body'></gdiv>").appendTo(c.main);
            c.loader = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__loader'></gdiv>").appendTo(c.main);
            c.limitReached = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__limit-reached'>" + M() + "</gdiv>").appendTo(c.main);
            return c;
        };
        var W = function(e) {
            if (e) {
                t.push(e);
                $gingerWidgetJquery(e).on("scroll.definitionScroll", function() {
                    E();
                });
                if (e.parentNode) W(e.parentNode);
            }
        };
        var q = function() {
            for (var e = 0; e < t.length; e++) {
                $gingerWidgetJquery(t[e]).off("scroll.definitionScroll");
            }
            t = [];
        };
        var $ = function() {
            if (document.querySelector("#ginger-rewriter-selection")) {
                return;
            }
            var e = "rgba(163, 87, 217, 0.1)";
            try {
                var t = "[ginger-rewriter-selection]::selection {background: " + e + "!important} [ginger-rewriter-selection] *::selection {background: " + e + "!important}";
                var n = document.createElement("style");
                n.id = "ginger-rewriter-selection";
                n.type = "text/css";
                n.textContent = t;
                document.getElementsByTagName("head")[0].appendChild(n);
            } catch (e) {
                console.error(e);
            }
        };
        var J = function() {
            return document.querySelector("#ginger-rewriter-selection") && document.querySelector("#ginger-rewriter-selection").remove();
        };
        var T = function(e) {
            if (!e) return;
            var t;
            var n;
            var r = 0;
            var i = c && c.main ? $gingerWidgetJquery(c.main).outerHeight() : 130;
            var o = c && c.main ? $gingerWidgetJquery(c.main).outerWidth() : 420;
            t = e.bottom + r;
            n = e.left;
            var g = e.width / 2 - o / 2;
            if (g) {
                n = n + g >= 0 ? n + g : n;
            }
            if (n + o > window.innerWidth) {
                n = window.innerWidth - o - r;
            }
            if (t + i > window.innerHeight) {
                t = e.top - i - r;
            }
            $gingerWidgetJquery(c.main).css("left", n);
            $gingerWidgetJquery(c.main).css("top", t);
            $gingerWidgetJquery(c.main).css("z-index", 2147483646);
            $gingerWidgetJquery(c.main).fadeIn();
        };
        var S = function(g) {
            if (a) E();
            a = true;
            if (!g.selectionCoordinates) return E();
            $();
            try {
                $gingerWidgetJquery(l.node).attr("ginger-rewriter-selection", true);
            } catch (e) {
                console.error(e);
            }
            if (!c || !c.main) C();
            c.main.removeClass("ginger-extension__rephrase-popup_loading").removeClass("ginger-extension__rephrase-popup_free-limit-reached").removeClass("ginger-extension__rephrase-popup_no-rephrase");
            c.body.html("");
            c.main.addClass("ginger-extension__rephrase-popup_loading");
            T(g.selectionCoordinates);
            if (g.range) {
                h(g.range);
            }
            gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                module: "gingerchromeext.background.rephraseLimits",
                callFunction: "get"
            }).then(function(e) {
                if (e) {
                    c.main.removeClass("ginger-extension__rephrase-popup_loading");
                    c.main.addClass("ginger-extension__rephrase-popup_free-limit-reached");
                    T(g.selectionCoordinates);
                    gingerModule.get("gingerchromeext.content.report").reporterGA({
                        category: "Premium",
                        action: "Display Premium for Rephrase inline",
                        label: null,
                        value: null
                    });
                    return;
                }
                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                    module: "gingerchromeext.background.rephraseLimits",
                    callFunction: "increase"
                });
                var t = document.querySelector("#ginger__floatingG-bar-tool-rephrase__btn");
                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                    module: "gingerchromeext.background.rephraseLimits",
                    callFunction: "increaseNewQuantity"
                }).then(function(e) {
                    if (!t.parentNode) {
                        return;
                    }
                    if (t.parentNode.classList.contains("ginger-floatingG-bar-tool-rephrase_small-circle_priority") && !e || e <= 8) {} else {
                        if (!e || e <= 3) {
                            t.parentNode.classList.add("ginger-floatingG-bar-tool-rephrase_big-circle");
                        } else if (e > 3 && e <= 8) {
                            t.parentNode.classList.remove("ginger-floatingG-bar-tool-rephrase_big-circle");
                            t.parentNode.classList.add("ginger-floatingG-bar-tool-rephrase_small-circle");
                        } else {
                            t.parentNode.classList.remove("ginger-floatingG-bar-tool-rephrase_small-circle");
                            t.parentNode.classList.remove("ginger-floatingG-bar-tool-rephrase_big-circle");
                        }
                    }
                });
                k(g.text).then(function(e) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA({
                        category: "Rephrase",
                        action: "Rephrase inline",
                        label: location.host,
                        value: null
                    });
                    c.main.removeClass("ginger-extension__rephrase-popup_loading");
                    if (!a) E();
                    c.body.html("");
                    if (!e.Sentences || !e.Sentences.length) {
                        c.error = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__error'>No alternatives found (text too short, too long or too complex)</gdiv>").appendTo(c.body);
                        c.main.addClass("ginger-extension__rephrase-popup_no-rephrase");
                        T(g.selectionCoordinates);
                        return;
                    }
                    c.list = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__list'></gdiv>").appendTo(c.body);
                    c.list.get(0).addEventListener("mousedown", function(e) {
                        var t = e.target;
                        if (!t || !t.classList.contains("ginger-extension__rephrase-popup__item")) return;
                        if (!t.dataset.sentence) return;
                        h(l.range);
                        if (window.getSelection && !window.getSelection().toString()) {
                            h(l.range);
                        }
                        b(t.dataset.sentence);
                        E();
                        $gingerWidgetJquery(g.node).trigger("paste");
                    });
                    c.items = [];
                    for (var t = 0; t < e.Sentences.length; t++) {
                        var n = e.Sentences[t];
                        var r = Diff.diffWords(l.text, n.Sentence);
                        var i = r.filter(function(e) {
                            return !e.removed;
                        }).map(function(e) {
                            return !!e.added ? "<strong>" + e.value + "</strong>" : e.value;
                        }).join("");
                        var o = $gingerWidgetJquery("<ga class='ginger-extension__rephrase-popup__item'>" + i + "</ga>");
                        o.attr("data-sentence", n.Sentence);
                        o.appendTo(c.list);
                        c.items.push(o);
                    }
                    T(g.selectionCoordinates);
                    W(g.node);
                }, function(e) {
                    console.log("Error: ", e);
                    c.error = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__error'>Server error</gdiv>").appendTo(c.body);
                    c.main.removeClass("ginger-extension__rephrase-popup_loading");
                    c.main.addClass("ginger-extension__rephrase-popup_no-rephrase");
                    T(g.selectionCoordinates);
                });
            });
        };
        var E = function() {
            a = false;
            try {
                $gingerWidgetJquery(l.node).removeAttr("ginger-rewriter-selection");
            } catch (e) {
                console.error(e);
            }
            q();
            if (c) $gingerWidgetJquery(c.main).remove();
            c = null;
        };
        var k = function(o) {
            return new Promise(function(t, n) {
                var e = "https://rephrasesrv.gingersoftware.com/rephrase/rephrase";
                var r = {
                    platform: gingerModule.get("gingerchromeext.content.config").get("platform"),
                    clientVersion: gingerModule.get("gingerchromeext.content.config").get("clientVersion"),
                    apiKey: gingerModule.get("gingerchromeext.content.config").get("apiKey"),
                    userIdentifier: gingerModule.get("gingerchromeext.content.session").get().userId,
                    s: (o || l && l.text).trim(),
                    size: 8
                };
                e += "?";
                for (var i in r) {
                    if (r.hasOwnProperty(i)) {
                        e += i + "=" + encodeURI(r[i]) + "&";
                    }
                }
                e = e.slice(0, -1);
                window.fetch(e, {
                    cache: "default"
                }).then(function(e) {
                    return e.json();
                }, function(e) {
                    n(e);
                }).then(function(e) {
                    t(e);
                }, function(e) {
                    n(e);
                });
            });
        };
        i();
        return {
            show: S,
            hide: E,
            listen: e
        };
    }, [ "gingerchromeext.content.ajax", "gingerchromeext.content.config", "gingerchromeext.content.writer", "gingerchromeext.content.session", "gingerchromeext.browser", "gingerchromeext.content.storage", "gingerchromeext.content.eventListener", "gingerchromeext.content.backgroundConnector", "gingerchromeext.content.measure", "widget.utils" ]);
})();

gingerModule.load("gingerchromeext.content.report", function() {
    return {
        reporter: gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
            module: "gingerchromeext.background.report",
            callFunction: "reporter"
        }),
        reporterGA: gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
            module: "gingerchromeext.background.report",
            callFunction: "reporterGA"
        })
    };
}, [ "gingerchromeext.content.backgroundConnector" ]);

gingerModule.load("gingerchromeext.content.session", function() {
    var t = $gingerWidgetJquery("<eventScope>");
    var n = {};
    var r = $gingerWidgetJquery.Deferred();
    var e = function() {
        return n;
    };
    var i = gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
        module: "gingerchromeext.background.session",
        callFunction: "set",
        promise: true
    });
    var o = gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
        module: "gingerchromeext.background.session",
        callFunction: "isLoggedIn",
        promise: true
    });
    var g = gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
        module: "gingerchromeext.background.session",
        callFunction: "refresh",
        promise: true
    });
    var a = function(e) {
        if (JSON.stringify(e) === JSON.stringify(n)) return;
        if (e && e.token) {
            n = e;
            t.trigger("login");
        } else if (e && e.isAnonym) {
            n = e;
            t.trigger("logout");
        } else {
            n = null;
            t.trigger("logout");
        }
        t.trigger("change");
    };
    var c = function() {
        g().then(function(e) {
            a(e);
            r.resolve(e);
        });
        gingerModule.get("gingerchromeext.content.storage").listen.on("change", function(e, t) {
            if ("session" in t) {
                var n = t.session.newValue;
                a(n);
            }
        });
    };
    c();
    return {
        get: e,
        set: i,
        refresh: g,
        isLoggedIn: o,
        listen: t,
        loaded: r.promise()
    };
}, [ "gingerchromeext.content.storage", "gingerchromeext.content.config" ]);

gingerModule.load("gingerchromeext.content.storage", function() {
    var n = $gingerWidgetJquery("<eventScope>");
    var e = function() {
        gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(e, t) {
            n.trigger("change", e, t);
        });
    };
    var t = function(e, t) {
        if (!e) return;
        var n = $gingerWidgetJquery.Deferred();
        var r = {};
        r[e] = t;
        try {
            gingerModule.get("gingerchromeext.browser").storage.sync.set(r, function() {
                n.resolve();
            });
        } catch (e) {
            console.warn("chrome.storage.sync.set is not supported", e);
            n.resolve();
        }
        return n.promise();
    };
    var r = function(t) {
        var n = $gingerWidgetJquery.Deferred();
        try {
            gingerModule.get("gingerchromeext.browser").storage.sync.get(t, function(e) {
                n.resolve(e[t]);
            });
        } catch (e) {
            console.warn("chrome.storage.sync.get is not supported", e);
            n.resolve();
        }
        return n.promise();
    };
    e();
    return {
        get: r,
        set: t,
        listen: n
    };
}, []);

(function() {
    var e = gingerModule.load("gingerchromeext.content.synonymPopup", function() {
        var a;
        var c;
        var l = false;
        var e = $gingerWidgetJquery({});
        var r = function(e) {
            var t = document.selection, n, r, i = null;
            try {
                if (window.getSelection) {
                    i = gingerModule.get("gingerchromeext.content.measure").getSelectionRectFromMimic(e);
                    if (i) {
                        return i;
                    }
                    t = window.getSelection();
                    if (t.rangeCount) {
                        n = t.getRangeAt(0).cloneRange();
                        if (n.getClientRects) {
                            r = n.getClientRects();
                            if (r.length === 1) {
                                i = r[0];
                                return i;
                            } else if (r.length > 1) {
                                var o = {
                                    bottom: getMax(Object.values(r), "bottom"),
                                    height: getMax(Object.values(r), "height"),
                                    left: getMin(Object.values(r), "left"),
                                    right: getMax(Object.values(r), "right"),
                                    top: getMin(Object.values(r), "top"),
                                    width: getMax(Object.values(r), "width"),
                                    x: getMin(Object.values(r), "x"),
                                    y: getMin(Object.values(r), "y")
                                };
                                o.height = o.bottom - o.bottom > o.height ? o.bottom - o.bottom : o.height;
                                o.width = o.left - o.right > o.width ? o.left - o.right : o.width;
                                i = o;
                                return i;
                            }
                        }
                        if (x == 0 && y == 0) {
                            var g = document.createElement("span");
                            if (g.getClientRects) {
                                g.appendChild(document.createTextNode("​"));
                                n.insertNode(g);
                                i = $gingerWidgetJquery(g).offset();
                                var a = g.parentNode;
                                a.removeChild(g);
                                a.normalize();
                            }
                        }
                    }
                }
            } catch (e) {}
            return i;
        };
        var i = function() {
            var e = null;
            try {
                if (document.activeElement.nodeName.toLowerCase() !== "body") {
                    e = document.activeElement;
                } else {
                    e = window.getSelection().anchorNode;
                }
            } catch (e) {}
            return e;
        };
        var o = function() {
            var e = "";
            if (window.getSelection) {
                e = $gingerWidgetJquery.trim(window.getSelection().toString());
            } else if (document.selection && document.selection.type != "Control") {
                e = document.selection.createRange().text;
            }
            return e;
        };
        var s = function(e, g) {
            var t = gingerModule.get("gingerchromeext.content.session").get();
            var n = 6;
            if (t.license > 1) {
                n = 12;
            }
            gingerModule.get("gingerchromeext.content.ajax").execute({
                url: "https://synonyms.reverso.net/api/v2/search/en/" + encodeURIComponent(e) + "?rude=false&limit=" + n,
                method: "GET",
                headers: {
                    "X-Reverso-Origin": "ginger.ext.chrome",
                    "Content-Type": "application/json"
                },
                credential: "omit",
                cache: "default"
            }).then(function(e) {
                var t = {};
                if (l) {
                    g([]);
                    l = false;
                    return;
                }
                if (e && e.results && e.resultsCount > 0) {
                    for (var n in e.results) {
                        var r = e.results[n];
                        r.cluster.forEach(function(e) {
                            if (!t[e.pos.desc[0]]) t[e.pos.desc[0]] = [];
                            t[e.pos.desc[0]].push(e.word);
                        });
                    }
                } else if (e.resultsCount === 0 && e.suggestions && e.suggestions[0] && e.suggestions[0].language === "en") {
                    c = e.suggestions[0].word;
                    s(e.suggestions[0].word, function(e) {
                        g(e);
                        l = true;
                    });
                }
                t = d(t);
                t = u(t);
                var i = [];
                for (var o in t) {
                    i = i.concat(t[o]);
                }
                g(i);
            }, function(e) {
                console.error(e);
                g([]);
            });
        };
        var d = function(e) {
            var t = [];
            for (var n in e) {
                var r = JSON.parse(JSON.stringify(e));
                e[n].forEach(function(e) {
                    if (!t.includes(e.toLowerCase())) {
                        t.push(e.toLowerCase());
                    } else {
                        r[n].splice(r[n].indexOf(e), 1);
                    }
                });
            }
            return r;
        };
        var u = function(e) {
            var t = 0;
            for (var n in e) {
                if (e[n].length > 0) t++;
            }
            var r = gingerModule.get("gingerchromeext.content.session").get();
            var i = 6;
            if (r.license > 1) {
                i = 12;
            }
            for (var n in e) {
                e[n] = e[n].slice(0, i / t);
            }
            return e;
        };
        var t = function(e) {
            var t = "";
            for (var n in e) {
                if (t != "") {
                    t += "&";
                }
                t += n + "=" + encodeURIComponent(e[n]);
            }
            return t;
        };
        var n = [];
        var f = function(e) {
            if (e) {
                n.push(e);
                $gingerWidgetJquery(e).on("scroll.definitionScroll", function() {
                    p();
                });
                if (e.parentNode) f(e.parentNode);
            }
        };
        var g = function() {
            for (var e = 0; e < n.length; e++) {
                $gingerWidgetJquery(n[e]).off("scroll.definitionScroll");
            }
            n = [];
        };
        var m = function() {
            a = {};
            a.main = $gingerWidgetJquery("<gdiv contenteditable='false' class='ginger-extension-synonympopup'></gdiv>").appendTo(document.querySelector("html"));
            a.title = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-title'></gdiv>").appendTo(a.main);
            a.subTitle = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-subtitle'></gdiv>").appendTo(a.main);
            a.body = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-body'></gdiv>").appendTo(a.main);
            a.footer = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-footer'></gdiv>").appendTo(a.main);
            a.body.addClass("ginger-extension-synonympopup-body-loading");
        };
        var v = function(e) {
            gingerModule.get("gingerchromeext.content.report").reporterGA({
                category: "Synonyms",
                action: "Pick a Synonym from dropdown",
                label: location.host,
                value: null
            });
            gingerModule.get("gingerchromeext.content.report").reporterGA({
                category: "Onboarding",
                action: "First Synonyms",
                label: null,
                value: null,
                singleCall: true
            });
            var t, n;
            var r = new window.InputEvent("beforeinput", {
                bubbles: !0,
                cancelable: !1,
                inputType: "insertText",
                data: e
            });
            document.activeElement.dispatchEvent(r);
            document.execCommand("insertText", !1, e);
        };
        var h = function(e, t) {
            var n = e.toString();
            if (n.charAt(0) === " ") t = " " + t; else if (n.charAt(0) === " ") t = " " + t;
            if (n.charAt(n.length - 1) === " ") t += " "; else if (n.charAt(n.length - 1) === " ") t += " ";
            return t;
        };
        var p = function() {
            b = false;
            g();
            if (a) $gingerWidgetJquery(a.main).remove();
            a = null;
        };
        var w = function(e) {
            if (!e) return;
            var t;
            var n;
            var r = 0;
            var i = a && a.main ? $gingerWidgetJquery(a.main).outerHeight() : 130;
            var o = a && a.main ? $gingerWidgetJquery(a.main).outerWidth() : 322;
            t = e.bottom + r;
            n = e.left;
            var g = e.width / 2 - o / 2;
            if (g) {
                n = n + g >= 0 ? n + g : n;
            }
            if (n + o > window.innerWidth) {
                n = window.innerWidth - o - r;
            }
            if (t + i > window.innerHeight) {
                t = e.top - i - r;
            }
            $gingerWidgetJquery(a.main).css("left", n);
            $gingerWidgetJquery(a.main).css("top", t);
            $gingerWidgetJquery(a.main).css("z-index", 2147483646);
            $gingerWidgetJquery(a.main).fadeIn();
        };
        var b = false;
        var M = function(g) {
            b = true;
            c = null;
            if (!g.selectionCoordinates) return;
            if (!a) m();
            a.title.html('Synonyms for "' + g.text + '"');
            a.footer.html("");
            w(g.selectionCoordinates);
            l = false;
            s(g.text, function(e) {
                var t = {
                    title: g.text,
                    synonyms: e
                };
                a.body.removeClass("ginger-extension-synonympopup-body-loading");
                a.body.html("");
                if (!t.synonyms.length) {
                    a.title.html("No synonyms found.");
                } else {
                    if (c) {
                        a.body.addClass("ginger-extension-synonympopup-body-not-found");
                        a.title.html('No synonyms found for "' + g.text + '"');
                        a.subTitle.addClass("visible");
                        a.subTitle.html('Showing synonyms for "' + c + '"');
                    }
                    var n = gingerModule.get("gingerchromeext.content.session").get();
                    if (n.license !== 0) {
                        gingerModule.get("gingerchromeext.content.report").reporterGA({
                            category: "Premium",
                            action: "Display Premium for Synonyms",
                            label: null,
                            value: null
                        });
                        var r = "https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerChromeExtension-Synonyms-TextField&autk=" + n.token;
                        a.footer.addClass("visible");
                        a.footer.html('Get more synonyms with Premium <a href="' + r + '" target="_blank">Subscribe</a>');
                        a.footer.click(function() {
                            gingerModule.get("gingerchromeext.content.report").reporterGA({
                                category: "Premium",
                                action: "Click Premium for Synonyms",
                                label: null,
                                value: null
                            });
                        });
                    }
                    t.synonyms.forEach(function(o) {
                        var e = $gingerWidgetJquery('<ga class="ginger-extension-synonympopup-body-item">' + o + "</ga>").appendTo(a.body);
                        if (c) return;
                        e.get(0).addEventListener("mousedown", function(e) {
                            var t = g.text[0] === g.text[0].toUpperCase();
                            if (t) {
                                o = o.slice(0, 1).toUpperCase() + o.slice(1);
                            }
                            var n = window.getSelection().toString();
                            var r = n.match(/^\s+/);
                            r = r && r.length ? r[0] : "";
                            var i = n.match(/\s+$/);
                            i = i && i.length ? i[0] : "";
                            o = r + o + i;
                            v(o);
                            p();
                            e.preventDefault();
                            $gingerWidgetJquery(g.node).trigger("paste");
                            return false;
                        }, {
                            capture: true
                        });
                    });
                }
            });
            f(g.node);
        };
        var C = function() {
            gingerModule.get("widget").listen.on("input.added", function(e, n) {
                n.element.addEventListener("dblclick", function(e) {
                    if (!gingerModule.get("widget").isEnabled()) return;
                    if (!n.isEnabled()) return;
                    gingerModule.get("gingerchromeext.content.storage").get("enableDefinitionsAndSynonyms").then(function(e) {
                        if (e) {
                            var t = {
                                text: o(),
                                selectionCoordinates: r(n.element),
                                node: i()
                            };
                            if (t.text && !t.text.match(/\s/)) {
                                M(t);
                            }
                        }
                    });
                });
                n.events.listen.on("keydown", function() {
                    if (b) p();
                });
            });
            document.addEventListener("click", function(e) {
                p();
            });
        };
        C();
        return {
            show: M,
            hide: p,
            listen: e
        };
    }, [ "gingerchromeext.content.ajax", "gingerchromeext.content.config", "gingerchromeext.content.writer", "gingerchromeext.content.session", "gingerchromeext.browser", "gingerchromeext.content.storage", "gingerchromeext.content.eventListener", "gingerchromeext.content.measure" ]);
})();

gingerModule.load("gingerchromeext.content.widget", function() {
    var n = [];
    var e;
    var t = false;
    var r = function(e) {
        window.top.postMessage(e, "*");
    };
    var i = function() {
        gingerModule.get("widget.report").setReporter(function(e) {
            gingerModule.get("gingerchromeext.content.report").reporter(e);
        });
        gingerModule.get("widget").init({
            inputFinder: {
                selector: '[gingerWidgetDebugArea] [contenteditable="true"], div[contenteditable="true"], textarea'
            },
            version: gingerModule.get("gingerchromeext.content.config").get("clientVersion"),
            apiKey: gingerModule.get("gingerchromeext.content.config").get("apiKey"),
            source: gingerModule.get("gingerchromeext.content.config").get("source"),
            userId: gingerModule.get("gingerchromeext.content.session").get().userId,
            widgetUid: gingerModule.get("gingerchromeext.content.config").get("widgetUid"),
            platform: gingerModule.get("gingerchromeext.content.config").get("platform"),
            token: gingerModule.get("gingerchromeext.content.session").get().token
        });
        if (!t) {
            gingerModule.get("widget.licenseLimits").listen.on("triggered.approaching", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("approaching");
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.exceeded", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("exceeded");
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.onbubble", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("onbubble");
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve.all", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("onbubble");
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("onbubble");
            });
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function() {
                gingerModule.get("gingerchromeext.content.marketingPopups").pollForNewMessage("approve.one");
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Correction",
                    action: "Accept Correction",
                    label: location.host,
                    value: null
                });
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Onboarding",
                    action: "First Correction",
                    label: location.host,
                    value: null,
                    singleCall: true
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignored.mistake", function() {
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Correction",
                    action: "Skip Correction",
                    label: location.host,
                    value: null
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignore.all", function() {
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Correction",
                    action: "Skip Correction",
                    label: location.host,
                    value: null
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function() {
                gingerModule.get("gingerchromeext.content.marketingPopups").pollForNewMessage("approve.all");
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Correction",
                    action: "Accept Correction",
                    label: location.host,
                    value: null
                });
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Onboarding",
                    action: "First Correction",
                    label: location.host,
                    value: null,
                    singleCall: true
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve", function() {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: "WordBubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve.all", function() {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: "WordBubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.addToDictionary", function() {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: "WordBubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("addedtodict.mistake", function() {
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Customize",
                    action: "Add a word to Personal Dictionary",
                    label: null,
                    value: null
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("inlineAuth.open", function(e, t) {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: "FloatingGBackTo"
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.open", function(e, t) {
                gingerModule.get("gingerchromeext.content.synonymPopup").hide();
                gingerModule.get("gingerchromeext.content.writer").open(t);
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.hide", function() {
                gingerModule.get("gingerchromeext.content.writer").hide();
            });
        } else {
            gingerModule.get("widget.licenseLimits").listen.on("triggered.approaching", function() {
                r({
                    cmd: "ginger.extension.licenseLimits",
                    type: "approaching"
                });
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.exceeded", function() {
                r({
                    cmd: "ginger.extension.licenseLimits",
                    type: "exceeded"
                });
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.onbubble", function() {
                r({
                    cmd: "ginger.extension.licenseLimits",
                    type: "onbubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve.all", function() {
                r({
                    cmd: "ginger.extension.licenseLimits",
                    type: "onbubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve", function() {
                r({
                    cmd: "ginger.extension.licenseLimits",
                    type: "onbubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function() {
                r({
                    cmd: "ginger.extension.pollMessage"
                });
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Correction",
                    action: "Accept Correction",
                    label: location.host,
                    value: null
                });
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Onboarding",
                    action: "First Correction",
                    label: location.host,
                    value: null,
                    singleCall: true
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignored.mistake", function() {
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Correction",
                    action: "Skip Correction",
                    label: location.host,
                    value: null
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignore.all", function() {
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Correction",
                    action: "Skip Correction",
                    label: location.host,
                    value: null
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function() {
                r({
                    cmd: "ginger.extension.pollMessage"
                });
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Correction",
                    action: "Accept Correction",
                    label: location.host,
                    value: null
                });
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Onboarding",
                    action: "First Correction",
                    label: location.host,
                    value: null,
                    singleCall: true
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve", function() {
                r({
                    cmd: "ginger.extension.inlineAuth.open",
                    params: {
                        trigger: "WordBubble"
                    }
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve.all", function() {
                r({
                    cmd: "ginger.extension.inlineAuth.open",
                    params: {
                        trigger: "WordBubble"
                    }
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.addToDictionary", function() {
                r({
                    cmd: "ginger.extension.inlineAuth.open",
                    params: {
                        trigger: "WordBubble"
                    }
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("addedtodict.mistake", function() {
                gingerModule.get("gingerchromeext.content.report").reporterGA({
                    category: "Customize",
                    action: "Add a word to Personal Dictionary",
                    label: null,
                    value: null
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("inlineAuth.open", function() {
                r({
                    cmd: "ginger.extension.inlineAuth.open",
                    params: {
                        trigger: "FloatingG"
                    }
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.open", function(e, t) {
                r({
                    cmd: "ginger.extension.writer.open",
                    data: {
                        data: t.data,
                        sendToWindow: true,
                        cmd: "ginger.extension.setText"
                    }
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.hide", function() {
                r({
                    cmd: "ginger.extension.writer.hide"
                });
            });
        }
        gingerModule.get("widget.session").set(gingerModule.get("gingerchromeext.content.session").get());
        gingerModule.get("gingerchromeext.content.session").listen.on("change", function() {
            gingerModule.get("widget.session").set(gingerModule.get("gingerchromeext.content.session").get());
        });
        gingerModule.get("gingerchromeext.content.storage").get("dialect").then(function(e) {
            if (!e) {
                gingerModule.get("widget.config").set("dialect", "US");
                gingerModule.get("gingerchromeext.content.config").set("dialect", "US");
            } else {
                gingerModule.get("widget.config").set("dialect", e);
                gingerModule.get("gingerchromeext.content.config").set("dialect", e);
            }
        });
        gingerModule.get("gingerchromeext.content.storage").get("loggedOutApprovalsLeft").then(function(e) {
            if (e || e === 0) {
                gingerModule.get("widget.config").set("loggedOutApprovalsLeft", e);
            } else {
                gingerModule.get("widget.config").set("loggedOutApprovalsLeft", 10);
            }
        });
        gingerModule.get("widget.config").listen.on("change", function(e, t) {
            if ("loggedOutApprovalsLeft" in t.changed) {
                gingerModule.get("gingerchromeext.content.storage").set("loggedOutApprovalsLeft", t.changed.loggedOutApprovalsLeft);
            }
        });
        gingerModule.get("gingerchromeext.content.storage").listen.on("change", function(e, t) {
            if ("loggedOutApprovalsLeft" in t) {
                gingerModule.get("widget.config").set("loggedOutApprovalsLeft", t.loggedOutApprovalsLeft.newValue);
            }
        });
    };
    var o = function(e) {
        return e.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
    };
    var g = function(e) {
        if (!e) e = window.location.href;
        return n.indexOf(o(e)) !== -1;
    };
    var a = function() {
        t = window.top !== window;
        var e = !gingerModule.get("widget.siteSettings").get(window.location.href).domainDisabled;
        if (window.frameElement && window.top !== window.self) {
            try {
                e = e && !gingerModule.get("widget.siteSettings").get(window.frameElement.ownerDocument.defaultView.location.href).disabled;
            } catch (e) {
                console.error(e);
            }
        }
        if (!e) return;
        gingerModule.get("gingerchromeext.content.storage").get("domainBlackList").then(function(e) {
            n = e || [];
            if (gingerModule.get("widget").isEnabled() && g()) {
                gingerModule.get("widget").disable();
            } else if (!gingerModule.get("widget").isEnabled() && !g()) {}
        });
        gingerModule.get("gingerchromeext.content.storage").listen.on("change", function(e, t) {
            if ("dialect" in t) {
                gingerModule.get("gingerchromeext.content.config").set("dialect", t["dialect"].newValue);
                gingerModule.get("widget.config").set("dialect", t["dialect"].newValue);
            } else if ("domainBlackList" in t) {
                n = t["domainBlackList"].newValue;
                if (gingerModule.get("widget").isEnabled() && g()) {
                    gingerModule.get("widget").disable();
                } else if (!gingerModule.get("widget").isEnabled() && !g()) {
                    gingerModule.get("widget").enable();
                }
            }
        });
        i();
        gingerModule.get("gingerchromeext.content.floatingG").init();
        gingerModule.get("gingerchromeext.content.addToPdPopup");
    };
    if (document.body && !document.getElementById("webkit-xml-viewer-source-xml")) {
        gingerModule.get("gingerchromeext.content.config").loaded.then(function() {
            gingerModule.get("gingerchromeext.content.session").loaded.then(function() {
                Sentry.init({
                    dsn: "https://f4e2effb36f24733942cf3c792d9d2a4@o59183.ingest.sentry.io/5735937",
                    release: chrome && chrome.runtime ? chrome.runtime.getManifest().version : "2.1.199",
                    tracesSampleRate: 1,
                    ignoreErrors: [ /SecurityError: Blocked a frame with origin "(.*)" from accessing a cross-origin frame\./, "Extension context invalidated.", "ResizeObserver loop limit exceeded" ]
                });
                a();
            });
        });
    }
}, [ "gingerchromeext.content.config", "gingerchromeext.content.backgroundConnector", "widget.licenseLimits", "gingerchromeext.content.storage", "gingerchromeext.content.marketingPopups", "gingerchromeext.content.onboardingBubbles", "widget.report" ]);

(function() {
    var e = gingerModule.load("gingerchromeext.content.writer", function() {
        "use strict";
        var n = {};
        var r = $gingerWidgetJquery({});
        var e;
        var i;
        var o = false;
        var g = gingerModule.get("gingerchromeext.content.measure");
        var a = function() {
            n.main = document.body.appendChild(document.createElement("gdiv"));
            n.main.style.display = "none";
            n.main.className = "ginger-extension-writer";
            n.main.addEventListener("click", function() {
                if (!/\/ginger-writer/.test(location.href)) t();
            });
            n.frame = n.main.appendChild(document.createElement("gdiv"));
            n.frame.className = "ginger-extension-writer-frame";
            n.iframe = n.frame.appendChild(document.createElement("iframe"));
            n.iframe.src = gingerModule.get("gingerchromeext.browser").runtime.getURL("writer/index.html");
            return n;
        };
        var c = function(t) {
            if (!n.main || !n.main.parentNode) a();
            gingerModule.get("gingerchromeext.content.report").reporter({
                type: "OpenFloatingG"
            });
            if (/\/ginger-writer/.test(location.href)) {
                $gingerWidgetJquery(n.main).show();
                return;
            }
            gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function e() {
                if (t && t.cmd) {
                    if (o) {
                        s(t);
                    } else {
                        r.one("writer.loaded", function() {
                            s(t);
                        });
                    }
                }
                $gingerWidgetJquery(n.main).css("z-index", g.findHighestZIndex() + 30);
                $gingerWidgetJquery(n.main).fadeIn();
            }, function e() {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: t && t.trigger ? t.trigger : "FloatingG"
                }).then(function() {
                    c(t);
                }, function() {});
            });
        };
        var l = function() {
            if (e) $gingerWidgetJquery(e.element).focus();
            $gingerWidgetJquery(n.main).hide();
            e = null;
        };
        var t = function() {
            s({
                cmd: "ginger.extension.callReturnText"
            });
        };
        var s = function(e) {
            var t = n.iframe;
            t.contentWindow.postMessage(e, "*");
        };
        var d = function() {
            window.addEventListener("message", function(t) {
                var n = {};
                try {
                    n = JSON.parse(t.data);
                } catch (e) {
                    n = t.data;
                }
                if (!n) return;
                if (n.cmd === "ginger.extension.returnText") {
                    gingerModule.get("widget.cache").restore(n.cache);
                    l();
                    if (i) {
                        i.postMessage(n, "*");
                    } else {
                        e = gingerModule.get("gingerchromeext.content.floatingG").getActiveElement();
                        if (e) {
                            if (n.representation) e.setRepresentation(n.representation);
                            e.setVal(n.text);
                            setTimeout(function() {
                                e.element.focus();
                            }, 100);
                        }
                    }
                } else if (n.cmd === "ginger.extension.writer.open") {
                    i = null;
                    if (n.data.sendToWindow) {
                        i = t.source;
                    }
                    c(n.data);
                } else if (n.cmd === "ginger.extension.writer.hide") {
                    l();
                } else if (n.cmd === "ginger.extension.writer.loaded") {
                    o = true;
                    r.trigger("writer.loaded");
                }
            });
        };
        var u = function() {
            if (window.self === window.parent) {
                a();
            }
            gingerModule.get("gingerchromeext.content.inlineAuth").listen.on("auth.cancelled", function() {
                s({
                    cmd: "ginger.inlineAuth.cancelled"
                });
            });
            d();
        };
        $gingerWidgetJquery(u);
        return {
            open: c,
            hide: l,
            listen: r
        };
    }, [ "gingerchromeext.content.report", "gingerchromeext.content.session", "widget.api", "widget.correctionService", "gingerchromeext.content.inlineAuth", "gingerchromeext.content.measure" ]);
})();

gingerModule.get("gingerchromeext.content.config").loaded.then(function() {
    gingerModule.get("gingerchromeext.content.session").loaded.then(function() {
        gingerModule.get("gingerchromeext.content.init");
    });
});